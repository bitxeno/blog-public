<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>单元测试 on bitxeno's notes</title><link>https://blog.xenori.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><description>Recent content in 单元测试 on bitxeno's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 14 Feb 2012 17:29:51 +0000</lastBuildDate><atom:link href="https://blog.xenori.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Molas——.NET依赖分离框架</title><link>https://blog.xenori.com/2012/02/molas-isolation-framework/</link><pubDate>Tue, 14 Feb 2012 17:29:51 +0000</pubDate><guid>https://blog.xenori.com/2012/02/molas-isolation-framework/</guid><description>&lt;p>&lt;img src="http://research.microsoft.com/en-us/projects/pex/pexweb.png"
loading="lazy"
>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/moles/" target="_blank" rel="noopener"
>Moles&lt;/a>是由微软研究院(&lt;a class="link" href="http://research.microsoft.com" target="_blank" rel="noopener"
>Microsoft Research&lt;/a>)开发的.NET依赖分离框架，它实现了使用自定义的委托(delegate)方法来替换原有类中的方法，以达到分离依赖，方便单元测试的目的。Moles在功能和用法上与开源的IoC框架Moq很像，但Moles有一些Moq实现不了功能，如替换静态方法，去掉静态构造函数，突破访问限制等。Molas非常有利于对ASP.NET WebForm构建的网站和依赖第三方类库的程序进行单元测试。&lt;/p>
&lt;h2 id="下载和安装">下载和安装&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/downloads.aspx" target="_blank" rel="noopener"
>下载Moles&lt;/a>后直接安装就可以了，里面集成有VS2010的插件，安装成功后，VS2010右键菜单中会集成Moles功能菜单。&lt;/p>
&lt;h2 id="使用示例">使用示例&lt;/h2>
&lt;p>我们试下测试2000年千年虫的bug。在VS2010中创建一个MoleDomain的类项目，并创建类Y2KChecker，代码如下：&lt;/p>
&lt;pre>&lt;code>namespace MoleDomain
{
public static class Y2KChecker
{
public static void Check()
{
if (DateTime.Now == new DateTime(2000, 1, 1))
throw new ApplicationException(&amp;quot;y2kbug!&amp;quot;);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>现在我们要测试这段代码，确定当时间为2000/1/1时，程序能正确抛出异常。很显然这段代码没法做单元测试，因为代码中的DateTime.Now是依赖系统时钟的，只返回当前时间，我们没法改变它的值使它刚好等于2000/1/1。怎么办好呢？&lt;/p>
&lt;p>使用Molas解决这个问题很简单。创建一个测试项目，并引用MoleDomain项目，单元测试代码如下：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
public void Test()
{
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>运行测试，会显示预期的未通过，因为DateTime.Now现在返回的还是系统时间。
&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1ld1fvzj20d203d74i.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;p>我们试下使用Molas替换DateTime.Now的返回值，在测试项目引用列表中，右键MoleDomain，选择“Add Moles Assembly”，确定后会自动在项目中增加一个MoleDomain.moles文件，moles后缀的文件是让Moles对该程序集自动生成对应的Molas类型程序集，以便测试时使用。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mey3gxj20c109eaas.jpg"
loading="lazy"
alt="moles"
>
右键测试项目，选择“重新生成”，会发现程序自动引用了很多Moles相关的程序集，如Microsoft.Moles.Framework，还有自动生成的 MolaDomain.Moles程序集。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mvxks5j206i08rq3d.jpg"
loading="lazy"
alt="moles"
>
要使Moles正常运行，需要改下原来的单元测试代码。在测试方法上方加上HostType特性，并写下替换DateTime.Now返回值的代码：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
[HostType(&amp;quot;Moles&amp;quot;)]
public void Test()
{
//利用委托替换原来的返回值
MDateTime.NowGet = () =&amp;gt; new DateTime(2000, 1, 1);
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，发现还是失败，提示错误：&lt;/p>
&lt;pre>&lt;code>测试方法 MoleDomain.Test.Y2KCheckerTest.Test 引发了异常 Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException，但应为异常 System.ApplicationException。异常消息: Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException: The System.DateTime System.DateTime.get_Now() was not instrumented
To resolve this issue, add the following attribute in the test project:
using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
&lt;/code>&lt;/pre>
&lt;p>提示缺少一些引用配置，在测试命名空间上方加上代码：&lt;/p>
&lt;pre>&lt;code>using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
namespace MoleDomain.Test
{
.....
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，终于通过测试了：）
&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1neh8mtj20ds027aa6.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;h1 id="mole基础知识">Mole基础知识&lt;/h1>
&lt;p>原始类成员方法对应的Mole类型属性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>◇ 静态方法表示为mole类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类实例方法表示为嵌套的&lt;strong>AllInstances&lt;/strong>类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类构造函数表示为mole类型的命名为&lt;strong>Constructor&lt;/strong>的静态属性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面部分说明下如何使用.
&lt;strong>Static Methods&lt;/strong>
为mole类型的静态属性附加委托方法可以替换类静态方法的内容。mole类型属性只能附加一个委托方法。如&lt;strong>MyClass&lt;/strong>类有一个静态方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public static class MyClass {
public static int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们附加一个mole到MyMethod中，使它一直返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.MyMethod = () =&amp;gt;5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass类型的代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass {
public static Func MyMethod {
set {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>安装Moles框架后，使用右键的“Add Moles Assembly”功能添加.mole后缀文件后，MMyClass就能自动生成。&lt;/p>
&lt;p>&lt;strong>实例方法(对所有实例生效)&lt;/strong>
和静态方法相似，也可以对所有实例方法进行mole。实例方法放置在嵌套类&lt;strong>AllInstances&lt;/strong>的静态属性中，例如下面MyClass实例的MyMethod方法：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>mole一个方法使所有实例对象都返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.AllInstances.MyMethod = _ =&amp;gt; 5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public static class AllInstances {
public static FuncMyMethod {
set {
...
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>实例方法(对一个实例生效)&lt;/strong>
对不同的实例，实例方法可以mole不同的委托方法。mole的属性实际是mole类型实例自己的属性（不是静态方法)，每个mole类型实例都会有一个原始类型的实例对象。如&lt;strong>MyClass&lt;/strong>的实例方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们可以创建两个MMyClass的实例对象，一个使它返回5，另一个使它返回10：&lt;/p>
&lt;pre>&lt;code>var myClass1 = new MMyClass()
{
MyMethod = () =&amp;gt; 5
};
var myClass2 = new MMyClass() { MyMethod = () =&amp;gt; 10 };
&lt;/code>&lt;/pre>
&lt;p>自动生成的mole类型代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public Func MyMethod {
set {
...
}
}
public MyClass Instance {
get {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>原始类型对象可以通过mole实例对象的&lt;strong>Instance&lt;/strong>属性获得：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
var instance = mole.Instance;
&lt;/code>&lt;/pre>
&lt;p>mole实例对象也可以隐式转换为原始类型对象，所以你可以直接赋值对原始类型，如下：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
MyClassinstance = mole;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>构造函数(Constructors)&lt;/strong>
类构造函数也可以mole来进行一些赋值操作。类构造函数表示为mole类型的静态方法&lt;strong>Constructor&lt;/strong>，如下面的MyClass类带有一个int参数的构造函数：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public MyClass(int value) {
this.Value = value;
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过附加构造函数使以后的所有实例的Value属性都返回-5：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
var mole = new MMyClass(@this) {
ValueGet = () =&amp;gt; -5
};
};
&lt;/code>&lt;/pre>
&lt;p>如果你只想mole后面一个实例，我们只需把Constructor静态属性赋null值，如：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
...
MMyClass.ConstructorInt32 = null;
};
&lt;/code>&lt;/pre>
&lt;p>需要注意的是，每个mole类型都有两个构造函数，当需要一个新的mole实例对象时，使用默认的构造器；而带有一个原始类型参数的构造函数，只应该在mole构造函数时使用。&lt;/p>
&lt;pre>&lt;code>public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase
{
public static Action ConstructorInt32 {
set {
...
}
}
public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
...
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>基类成员(Base Members)&lt;/strong>
只要把子类实例作为基类构造函数的参数传入，就可以创建一个基类的mole对象，并访问到基类中的mole属性。例如，基类&lt;strong>Base&lt;/strong>有一个MyMethod的方法，而&lt;strong>Child&lt;/strong>是&lt;strong>Base&lt;/strong>的子类：&lt;/p>
&lt;pre>&lt;code>public abstract class Base {
public int MyMethod() {
...
}
}
public class Child : Base {
}
&lt;/code>&lt;/pre>
&lt;p>通过创建一个&lt;strong>MBase&lt;/strong>对象我们能设置&lt;strong>Base&lt;/strong>的mole属性：&lt;/p>
&lt;pre>&lt;code>var child = new MChild();
new MBase(child) { MyMethod = () =&amp;gt; 5 };
&lt;/code>&lt;/pre>
&lt;p>注意这里，当&lt;strong>MChild&lt;/strong>实例作为传入&lt;strong>MBase&lt;/strong>构造函数时，会被隐式转换为&lt;strong>Child&lt;/strong>实例。
MChild和MBase的自动生成代码如下：&lt;/p>
&lt;pre>&lt;code>public class MChild : MoleBase {
public MChild() { }
public MChild(Child child)
: base(child) { }
}
public class MBase : MoleBase {
public MBase(Base target) { }
public Func MyMethod
{ set { ... } }
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>静态构造函数&lt;/strong>
静态构造函数在Moles中被特殊对待，Moles只能简单地抹去静态构造函数，而不能重新为它附加新的委托方法。Moles通过指定[MolesEraseStaticConstructor]特性来抹去一个类的静态构造函数。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseStaticConstructor(typeof(MyStatic))]
class MyStatic {
static MyStatic() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>终结器(Finalizers)&lt;/strong>
对于终结器，Moles也是特殊对待的。Moles也是只能简单抹去终结器，通过指定[MolesEraseFinalizer]特性实现。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseFinalizer(typeof(MyFinalizer))]
class MyFinalizer {
~MyFinalizer() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>私有方法&lt;/strong>
假如私有方法的签名类型是可见的，Moles会为私有方法自动生成mole属性。签名类型可见是指，参数类型或返回值类型是可见的，不是私有类型。&lt;/p>
&lt;p>&lt;strong>绑定接口&lt;/strong>
当类有实现接口时，Moles自动生成的mole类型会提供立即绑定接口成员的方法。例如，MyClass实现了s IEnumerable接口：&lt;/p>
&lt;pre>&lt;code>public class MyClass : IEnumerable {
public IEnumerator GetEnumerator() {
...
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过mole类型的&lt;strong>Bind&lt;/strong>方法，我们可以简捷地mole接口实现：&lt;/p>
&lt;pre>&lt;code>var myClass = new MMyClass();
myClass.Bind(new int[] { 1, 2, 3 });
&lt;/code>&lt;/pre>
&lt;p>自动生成的&lt;strong>MMyClass&lt;/strong>代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public MMyClass Bind(IEnumerable target) {
...
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="moles缺点">Moles缺点&lt;/h2>
&lt;p>Moles缺点是，测试运行比较慢，还有测试代码只能在本机上才能测试通过，假如同伴获取代码后需要运行单元测试，必须也安装Molas环境。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/documentation.aspx" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/documentation.aspx&lt;/a>&lt;/p></description></item></channel></rss>
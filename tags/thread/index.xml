<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thread on bitxeno's notes</title><link>https://blog.xenori.com/tags/thread/</link><description>Recent content in Thread on bitxeno's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 09 Jan 2012 07:11:38 +0000</lastBuildDate><atom:link href="https://blog.xenori.com/tags/thread/index.xml" rel="self" type="application/rss+xml"/><item><title>开源线程池组件SmartThreadPool</title><link>https://blog.xenori.com/2012/01/smartthreadpool/</link><pubDate>Mon, 09 Jan 2012 07:11:38 +0000</pubDate><guid>https://blog.xenori.com/2012/01/smartthreadpool/</guid><description>&lt;p>1、为什么需要使用线程池(Thread Pool）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>**减少线程间上下文切换。**线程执行一定的时间片后，系统会自动把cpu切换给另一个线程使用，这时还需要保存当前的线程上下文状态，并加载新线程的上下文状态。当程序中有大量的线程时，每个线程分得的时间片会越来越少，可能会出现线程未处理多少操作，就需要切换到另一线程，这样频繁的线程间上下文切换会花费大量的cpu时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**减少内存占用。**系统每创建一条物理线程，需要大概花费1MB的内存空间，许多程序喜欢先创建多条物理线程，并周期轮询来处理各自的任务，这样既消耗了线程上下文切换的时间，还浪费了内存。这些任务可能只需要一条线程就能满足要求。假如某一任务需要执行较长的周期，线程池还可以自动增加线程，并在空闲时，销毁线程，释放占用的内存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>2、为什么不使用.Net默认的线程池&lt;/p>
&lt;ul>
&lt;li>.Net默认的线程池(ThreadPool)是一个静态类，所以是没办法自己创建一个新的程序池的。默认的线程池与应用程序域(AppDomain)挂钩，一个AppDomain只有一个线程池。假如在线程池中执行了一个周期较长的任务，一直占用着其中一个线程，可能就会影响到应用程序域中的其他程序的性能。例如，假如在Asp.Net的线程池中执行一个周期较长的任务，就会影响请求的并发处理能力（线程池默认有个最大线程数）。
3、SmartThreadPool特性和优点&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>SmartThreadPool&lt;/a>特性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>池中的线程数量会根据负载自动增减&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>任务异步执行后可以返回值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处于任务队列中未执行的任务可以取消&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回调函数可以等待多个任务都执行完成后再触发&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以有优先级(priority)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以分组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持泛型Action&lt;!-- raw HTML omitted --> 和 Func&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>有性能监测机制&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>4、使用示例
最简单的使用方法：&lt;/p>
&lt;pre>&lt;code> // 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
smartThreadPool.QueueWorkItem(() =&amp;gt;
{
Console.WriteLine(&amp;quot;Hello World!&amp;quot;);
});
&lt;/code>&lt;/pre>
&lt;p>带返回值的任务：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
var sum = 0;
for (var i = 0; i &amp;lt; 10; i++)
sum += i;
return sum;
});
// 输出计算结果
Console.WriteLine(result.Result);
&lt;/code>&lt;/pre>
&lt;p>等待多个任务执行完成：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result1 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(5000);
return 3;
});
var result2 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(3000);
return 5;
});
bool success = SmartThreadPool.WaitAll(
new IWorkItemResult[] { result1, result2 });
if (success)
{
// 输出结果
Console.WriteLine(result1.Result);
Console.WriteLine(result2.Result);
}
&lt;/code>&lt;/pre>
&lt;p>5、结论
使用SmartThreadPool可以简单就实现支持多线程的程序，由线程池来管理线程，可以减少死锁的出现。SmartThreadPool还支持简单的生产者-消费者模式，当不需要对任务进行持久化时，还是很好用的。&lt;/p>
&lt;p>6、扩展阅读&lt;/p>
&lt;p>&lt;a class="link" href="http://www.codeproject.com/KB/threads/smartthreadpool.aspx" target="_blank" rel="noopener"
>http://www.codeproject.com/KB/threads/smartthreadpool.aspx&lt;/a>
&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>http://smartthreadpool.codeplex.com/&lt;/a>
&lt;a class="link" href="http://www.albahari.com/threading/" target="_blank" rel="noopener"
>http://www.albahari.com/threading/&lt;/a>&lt;/p></description></item></channel></rss>
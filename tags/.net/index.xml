<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net on bitxeno's notes</title><link>https://blog.xenori.com/tags/.net/</link><description>Recent content in .Net on bitxeno's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 12 May 2012 08:31:49 +0000</lastBuildDate><atom:link href="https://blog.xenori.com/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Mono.Cecil更改程序集dll特性</title><link>https://blog.xenori.com/2012/05/use-mono-cecil-to-change-dll-attribute/</link><pubDate>Sat, 12 May 2012 08:31:49 +0000</pubDate><guid>https://blog.xenori.com/2012/05/use-mono-cecil-to-change-dll-attribute/</guid><description>&lt;p>工作中发现一个公共组件因为某个类不带有[Serializable]特性，导致保存到memcache时出错。刚好负责的同事请假不在，尝试了iLSpy反编译方法后，最后决定使用Mono.Cecil直接修改现成的程序集dll解决。&lt;/p>
&lt;p>示例代码如下：&lt;/p>
&lt;pre>&lt;code>class Program
{
static void Main(string[] args)
{
var asmFile = &amp;quot;TestDll.dll&amp;quot;; // 程序集名
Console.WriteLine(&amp;quot;add serializable attribute for '{0}'.&amp;quot;, asmFile);
var asmDef = AssemblyDefinition.ReadAssembly(asmFile, new ReaderParameters
{
ReadSymbols = true // 标识是否读取修改pdb文件
});
// 取类名中包含&amp;quot;Entity&amp;quot;字符串的类
var types = asmDef.Modules
.SelectMany(m =&amp;gt; m.Types)
.Where(t =&amp;gt; t.Name.Contains(&amp;quot;Entity&amp;quot;));
// 设置类为可序列化
foreach (var type in types)
{
type.IsSerializable = true;
}
// 重新保存dll
var newAsmFileName = &amp;quot;TestDll_new.dll&amp;quot;;
asmDef.Write(newAsmFileName, new WriterParameters
{
WriteSymbols = true
});
Console.WriteLine(&amp;quot;new dll has save as {0}.&amp;quot;, newAsmFileName);
}
}
&lt;/code>&lt;/pre>
&lt;p>Mono.Cecil除了可以更改特性，还能把sealed类更改为public类，功能非常强大。&lt;/p>
&lt;p>&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/05/MonoCecilTest.zip" target="_blank" rel="noopener"
>下载demo&lt;/a>&lt;/p>
&lt;p>参考资料：
&lt;a class="link" href="http://blog.zhaojie.me/2011/09/aspnet-mvc-dynamic-model-mono-cecil.html" target="_blank" rel="noopener"
>使用Mono.Cecil辅助ASP.NET MVC使用dynamic类型Model&lt;/a>&lt;/p></description></item><item><title>Molas——.NET依赖分离框架</title><link>https://blog.xenori.com/2012/02/molas-isolation-framework/</link><pubDate>Tue, 14 Feb 2012 17:29:51 +0000</pubDate><guid>https://blog.xenori.com/2012/02/molas-isolation-framework/</guid><description>&lt;p>&lt;img src="http://research.microsoft.com/en-us/projects/pex/pexweb.png"
loading="lazy"
>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/moles/" target="_blank" rel="noopener"
>Moles&lt;/a>是由微软研究院(&lt;a class="link" href="http://research.microsoft.com" target="_blank" rel="noopener"
>Microsoft Research&lt;/a>)开发的.NET依赖分离框架，它实现了使用自定义的委托(delegate)方法来替换原有类中的方法，以达到分离依赖，方便单元测试的目的。Moles在功能和用法上与开源的IoC框架Moq很像，但Moles有一些Moq实现不了功能，如替换静态方法，去掉静态构造函数，突破访问限制等。Molas非常有利于对ASP.NET WebForm构建的网站和依赖第三方类库的程序进行单元测试。&lt;/p>
&lt;h2 id="下载和安装">下载和安装&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/downloads.aspx" target="_blank" rel="noopener"
>下载Moles&lt;/a>后直接安装就可以了，里面集成有VS2010的插件，安装成功后，VS2010右键菜单中会集成Moles功能菜单。&lt;/p>
&lt;h2 id="使用示例">使用示例&lt;/h2>
&lt;p>我们试下测试2000年千年虫的bug。在VS2010中创建一个MoleDomain的类项目，并创建类Y2KChecker，代码如下：&lt;/p>
&lt;pre>&lt;code>namespace MoleDomain
{
public static class Y2KChecker
{
public static void Check()
{
if (DateTime.Now == new DateTime(2000, 1, 1))
throw new ApplicationException(&amp;quot;y2kbug!&amp;quot;);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>现在我们要测试这段代码，确定当时间为2000/1/1时，程序能正确抛出异常。很显然这段代码没法做单元测试，因为代码中的DateTime.Now是依赖系统时钟的，只返回当前时间，我们没法改变它的值使它刚好等于2000/1/1。怎么办好呢？&lt;/p>
&lt;p>使用Molas解决这个问题很简单。创建一个测试项目，并引用MoleDomain项目，单元测试代码如下：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
public void Test()
{
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>运行测试，会显示预期的未通过，因为DateTime.Now现在返回的还是系统时间。
&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1ld1fvzj20d203d74i.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;p>我们试下使用Molas替换DateTime.Now的返回值，在测试项目引用列表中，右键MoleDomain，选择“Add Moles Assembly”，确定后会自动在项目中增加一个MoleDomain.moles文件，moles后缀的文件是让Moles对该程序集自动生成对应的Molas类型程序集，以便测试时使用。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mey3gxj20c109eaas.jpg"
loading="lazy"
alt="moles"
>
右键测试项目，选择“重新生成”，会发现程序自动引用了很多Moles相关的程序集，如Microsoft.Moles.Framework，还有自动生成的 MolaDomain.Moles程序集。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mvxks5j206i08rq3d.jpg"
loading="lazy"
alt="moles"
>
要使Moles正常运行，需要改下原来的单元测试代码。在测试方法上方加上HostType特性，并写下替换DateTime.Now返回值的代码：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
[HostType(&amp;quot;Moles&amp;quot;)]
public void Test()
{
//利用委托替换原来的返回值
MDateTime.NowGet = () =&amp;gt; new DateTime(2000, 1, 1);
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，发现还是失败，提示错误：&lt;/p>
&lt;pre>&lt;code>测试方法 MoleDomain.Test.Y2KCheckerTest.Test 引发了异常 Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException，但应为异常 System.ApplicationException。异常消息: Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException: The System.DateTime System.DateTime.get_Now() was not instrumented
To resolve this issue, add the following attribute in the test project:
using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
&lt;/code>&lt;/pre>
&lt;p>提示缺少一些引用配置，在测试命名空间上方加上代码：&lt;/p>
&lt;pre>&lt;code>using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
namespace MoleDomain.Test
{
.....
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，终于通过测试了：）
&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1neh8mtj20ds027aa6.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;h1 id="mole基础知识">Mole基础知识&lt;/h1>
&lt;p>原始类成员方法对应的Mole类型属性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>◇ 静态方法表示为mole类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类实例方法表示为嵌套的&lt;strong>AllInstances&lt;/strong>类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类构造函数表示为mole类型的命名为&lt;strong>Constructor&lt;/strong>的静态属性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面部分说明下如何使用.
&lt;strong>Static Methods&lt;/strong>
为mole类型的静态属性附加委托方法可以替换类静态方法的内容。mole类型属性只能附加一个委托方法。如&lt;strong>MyClass&lt;/strong>类有一个静态方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public static class MyClass {
public static int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们附加一个mole到MyMethod中，使它一直返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.MyMethod = () =&amp;gt;5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass类型的代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass {
public static Func MyMethod {
set {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>安装Moles框架后，使用右键的“Add Moles Assembly”功能添加.mole后缀文件后，MMyClass就能自动生成。&lt;/p>
&lt;p>&lt;strong>实例方法(对所有实例生效)&lt;/strong>
和静态方法相似，也可以对所有实例方法进行mole。实例方法放置在嵌套类&lt;strong>AllInstances&lt;/strong>的静态属性中，例如下面MyClass实例的MyMethod方法：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>mole一个方法使所有实例对象都返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.AllInstances.MyMethod = _ =&amp;gt; 5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public static class AllInstances {
public static FuncMyMethod {
set {
...
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>实例方法(对一个实例生效)&lt;/strong>
对不同的实例，实例方法可以mole不同的委托方法。mole的属性实际是mole类型实例自己的属性（不是静态方法)，每个mole类型实例都会有一个原始类型的实例对象。如&lt;strong>MyClass&lt;/strong>的实例方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们可以创建两个MMyClass的实例对象，一个使它返回5，另一个使它返回10：&lt;/p>
&lt;pre>&lt;code>var myClass1 = new MMyClass()
{
MyMethod = () =&amp;gt; 5
};
var myClass2 = new MMyClass() { MyMethod = () =&amp;gt; 10 };
&lt;/code>&lt;/pre>
&lt;p>自动生成的mole类型代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public Func MyMethod {
set {
...
}
}
public MyClass Instance {
get {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>原始类型对象可以通过mole实例对象的&lt;strong>Instance&lt;/strong>属性获得：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
var instance = mole.Instance;
&lt;/code>&lt;/pre>
&lt;p>mole实例对象也可以隐式转换为原始类型对象，所以你可以直接赋值对原始类型，如下：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
MyClassinstance = mole;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>构造函数(Constructors)&lt;/strong>
类构造函数也可以mole来进行一些赋值操作。类构造函数表示为mole类型的静态方法&lt;strong>Constructor&lt;/strong>，如下面的MyClass类带有一个int参数的构造函数：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public MyClass(int value) {
this.Value = value;
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过附加构造函数使以后的所有实例的Value属性都返回-5：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
var mole = new MMyClass(@this) {
ValueGet = () =&amp;gt; -5
};
};
&lt;/code>&lt;/pre>
&lt;p>如果你只想mole后面一个实例，我们只需把Constructor静态属性赋null值，如：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
...
MMyClass.ConstructorInt32 = null;
};
&lt;/code>&lt;/pre>
&lt;p>需要注意的是，每个mole类型都有两个构造函数，当需要一个新的mole实例对象时，使用默认的构造器；而带有一个原始类型参数的构造函数，只应该在mole构造函数时使用。&lt;/p>
&lt;pre>&lt;code>public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase
{
public static Action ConstructorInt32 {
set {
...
}
}
public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
...
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>基类成员(Base Members)&lt;/strong>
只要把子类实例作为基类构造函数的参数传入，就可以创建一个基类的mole对象，并访问到基类中的mole属性。例如，基类&lt;strong>Base&lt;/strong>有一个MyMethod的方法，而&lt;strong>Child&lt;/strong>是&lt;strong>Base&lt;/strong>的子类：&lt;/p>
&lt;pre>&lt;code>public abstract class Base {
public int MyMethod() {
...
}
}
public class Child : Base {
}
&lt;/code>&lt;/pre>
&lt;p>通过创建一个&lt;strong>MBase&lt;/strong>对象我们能设置&lt;strong>Base&lt;/strong>的mole属性：&lt;/p>
&lt;pre>&lt;code>var child = new MChild();
new MBase(child) { MyMethod = () =&amp;gt; 5 };
&lt;/code>&lt;/pre>
&lt;p>注意这里，当&lt;strong>MChild&lt;/strong>实例作为传入&lt;strong>MBase&lt;/strong>构造函数时，会被隐式转换为&lt;strong>Child&lt;/strong>实例。
MChild和MBase的自动生成代码如下：&lt;/p>
&lt;pre>&lt;code>public class MChild : MoleBase {
public MChild() { }
public MChild(Child child)
: base(child) { }
}
public class MBase : MoleBase {
public MBase(Base target) { }
public Func MyMethod
{ set { ... } }
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>静态构造函数&lt;/strong>
静态构造函数在Moles中被特殊对待，Moles只能简单地抹去静态构造函数，而不能重新为它附加新的委托方法。Moles通过指定[MolesEraseStaticConstructor]特性来抹去一个类的静态构造函数。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseStaticConstructor(typeof(MyStatic))]
class MyStatic {
static MyStatic() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>终结器(Finalizers)&lt;/strong>
对于终结器，Moles也是特殊对待的。Moles也是只能简单抹去终结器，通过指定[MolesEraseFinalizer]特性实现。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseFinalizer(typeof(MyFinalizer))]
class MyFinalizer {
~MyFinalizer() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>私有方法&lt;/strong>
假如私有方法的签名类型是可见的，Moles会为私有方法自动生成mole属性。签名类型可见是指，参数类型或返回值类型是可见的，不是私有类型。&lt;/p>
&lt;p>&lt;strong>绑定接口&lt;/strong>
当类有实现接口时，Moles自动生成的mole类型会提供立即绑定接口成员的方法。例如，MyClass实现了s IEnumerable接口：&lt;/p>
&lt;pre>&lt;code>public class MyClass : IEnumerable {
public IEnumerator GetEnumerator() {
...
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过mole类型的&lt;strong>Bind&lt;/strong>方法，我们可以简捷地mole接口实现：&lt;/p>
&lt;pre>&lt;code>var myClass = new MMyClass();
myClass.Bind(new int[] { 1, 2, 3 });
&lt;/code>&lt;/pre>
&lt;p>自动生成的&lt;strong>MMyClass&lt;/strong>代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public MMyClass Bind(IEnumerable target) {
...
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="moles缺点">Moles缺点&lt;/h2>
&lt;p>Moles缺点是，测试运行比较慢，还有测试代码只能在本机上才能测试通过，假如同伴获取代码后需要运行单元测试，必须也安装Molas环境。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/documentation.aspx" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/documentation.aspx&lt;/a>&lt;/p></description></item><item><title>使windows服务安装名称可配置</title><link>https://blog.xenori.com/2012/01/config-windows-services-install-name/</link><pubDate>Thu, 12 Jan 2012 07:42:04 +0000</pubDate><guid>https://blog.xenori.com/2012/01/config-windows-services-install-name/</guid><description>&lt;p>有时，我们安装的windows服务可能是个框架，在同一服务器上可能服务于不同的系统，为了使服务名称不冲突，需要把服务名称更改为可配置。
因为ServiceInstaller能直接设置安装服务的名称和描述，所以很容易就能写出下面的代码：&lt;/p>
&lt;pre>&lt;code>serviceInstaller.ServiceName = ConfigurationManager.AppSetting[&amp;quot;ServiceName&amp;quot;];
serviceInstaller.Description = ConfigurationManager.AppSetting[&amp;quot;ServiceDescription&amp;quot;];
&lt;/code>&lt;/pre>
&lt;p>编译执行安装，可惜抛出了异常，安装失败了。
&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/01/QQ%e4%ba%94%e7%ac%94%e6%88%aa%e5%9b%be%e6%9c%aa%e5%91%bd%e5%90%8d.png" target="_blank" rel="noopener"
>&lt;img src="http://bitxeno.me/wp-content/uploads/2012/01/QQ%e4%ba%94%e7%ac%94%e6%88%aa%e5%9b%be%e6%9c%aa%e5%91%bd%e5%90%8d.png"
loading="lazy"
>&lt;/a>
失败的原因是，执行安装服务的程序是InstallUtil.exe，安装阶段不会自动加载服务的app.config配置文件，只会加载全局的machine.config，需改为手动加载app.config并读取。
确定解决思路后，我写出了下面的代码：&lt;/p>
&lt;p>var targetDirectory = AppDomain.CurrentDomain.BaseDirectory;
var configPath = Path.Combine(targetDirectory, &amp;ldquo;Service.exe&amp;rdquo;);
var config = ConfigurationManager.OpenExeConfiguration(configPath);
serviceInstaller.ServiceName = config.AppSettings.Settings[&amp;ldquo;ServiceName&amp;rdquo;].Value;
serviceInstaller.Description = config.AppSettings.Settings[&amp;ldquo;ServiceDescription&amp;rdquo;].Value;&lt;/p>
&lt;p>再次编译运行，发现本机上安装成功了：），整个程序打包交给另一个同事在服务器上安装，发现安装过程又出错了。。。
过去看了一下，发现错误的原因是，本机安装时，InstallUtil程序我是放在和服务同一目录，而服务器上的InstallUtil是和服务在不同目录。看来AppDomain.CurrentDomain.BaseDirectory获取到的是InstallUtil的应用程序域目录路径，而不是服务的。
之后使用反射来解决了这个问题，代码如下：&lt;/p>
&lt;pre>&lt;code>var path = System.Reflection.Assembly.GetExecutingAssembly().Location;
var targetDirectory = System.IO.Path.GetDirectoryName(path);
var configPath = Path.Combine(targetDirectory, &amp;quot;Service.exe&amp;quot;);
var config = ConfigurationManager.OpenExeConfiguration(configPath);
serviceInstaller.ServiceName = config.AppSettings.Settings[&amp;quot;ServiceName&amp;quot;].Value;
serviceInstaller.Description = config.AppSettings.Settings[&amp;quot;ServiceDescription&amp;quot;].Value;
&lt;/code>&lt;/pre></description></item><item><title>开源线程池组件SmartThreadPool</title><link>https://blog.xenori.com/2012/01/smartthreadpool/</link><pubDate>Mon, 09 Jan 2012 07:11:38 +0000</pubDate><guid>https://blog.xenori.com/2012/01/smartthreadpool/</guid><description>&lt;p>1、为什么需要使用线程池(Thread Pool）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>**减少线程间上下文切换。**线程执行一定的时间片后，系统会自动把cpu切换给另一个线程使用，这时还需要保存当前的线程上下文状态，并加载新线程的上下文状态。当程序中有大量的线程时，每个线程分得的时间片会越来越少，可能会出现线程未处理多少操作，就需要切换到另一线程，这样频繁的线程间上下文切换会花费大量的cpu时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**减少内存占用。**系统每创建一条物理线程，需要大概花费1MB的内存空间，许多程序喜欢先创建多条物理线程，并周期轮询来处理各自的任务，这样既消耗了线程上下文切换的时间，还浪费了内存。这些任务可能只需要一条线程就能满足要求。假如某一任务需要执行较长的周期，线程池还可以自动增加线程，并在空闲时，销毁线程，释放占用的内存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>2、为什么不使用.Net默认的线程池&lt;/p>
&lt;ul>
&lt;li>.Net默认的线程池(ThreadPool)是一个静态类，所以是没办法自己创建一个新的程序池的。默认的线程池与应用程序域(AppDomain)挂钩，一个AppDomain只有一个线程池。假如在线程池中执行了一个周期较长的任务，一直占用着其中一个线程，可能就会影响到应用程序域中的其他程序的性能。例如，假如在Asp.Net的线程池中执行一个周期较长的任务，就会影响请求的并发处理能力（线程池默认有个最大线程数）。
3、SmartThreadPool特性和优点&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>SmartThreadPool&lt;/a>特性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>池中的线程数量会根据负载自动增减&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>任务异步执行后可以返回值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处于任务队列中未执行的任务可以取消&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回调函数可以等待多个任务都执行完成后再触发&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以有优先级(priority)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以分组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持泛型Action&lt;!-- raw HTML omitted --> 和 Func&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>有性能监测机制&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>4、使用示例
最简单的使用方法：&lt;/p>
&lt;pre>&lt;code> // 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
smartThreadPool.QueueWorkItem(() =&amp;gt;
{
Console.WriteLine(&amp;quot;Hello World!&amp;quot;);
});
&lt;/code>&lt;/pre>
&lt;p>带返回值的任务：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
var sum = 0;
for (var i = 0; i &amp;lt; 10; i++)
sum += i;
return sum;
});
// 输出计算结果
Console.WriteLine(result.Result);
&lt;/code>&lt;/pre>
&lt;p>等待多个任务执行完成：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result1 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(5000);
return 3;
});
var result2 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(3000);
return 5;
});
bool success = SmartThreadPool.WaitAll(
new IWorkItemResult[] { result1, result2 });
if (success)
{
// 输出结果
Console.WriteLine(result1.Result);
Console.WriteLine(result2.Result);
}
&lt;/code>&lt;/pre>
&lt;p>5、结论
使用SmartThreadPool可以简单就实现支持多线程的程序，由线程池来管理线程，可以减少死锁的出现。SmartThreadPool还支持简单的生产者-消费者模式，当不需要对任务进行持久化时，还是很好用的。&lt;/p>
&lt;p>6、扩展阅读&lt;/p>
&lt;p>&lt;a class="link" href="http://www.codeproject.com/KB/threads/smartthreadpool.aspx" target="_blank" rel="noopener"
>http://www.codeproject.com/KB/threads/smartthreadpool.aspx&lt;/a>
&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>http://smartthreadpool.codeplex.com/&lt;/a>
&lt;a class="link" href="http://www.albahari.com/threading/" target="_blank" rel="noopener"
>http://www.albahari.com/threading/&lt;/a>&lt;/p></description></item></channel></rss>
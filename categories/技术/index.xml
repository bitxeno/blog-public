<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on bitxeno's notes</title><link>https://blog.xenori.com/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on bitxeno's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 29 Feb 2024 12:16:42 +0800</lastBuildDate><atom:link href="https://blog.xenori.com/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>github 下载加速</title><link>https://blog.xenori.com/2024/02/github-download-enhance-speed/</link><pubDate>Thu, 29 Feb 2024 12:16:42 +0800</pubDate><guid>https://blog.xenori.com/2024/02/github-download-enhance-speed/</guid><description>&lt;img src="https://blog.xenori.com/2024/02/github-download-enhance-speed/cover.png" alt="Featured image of post github 下载加速" />&lt;h2 id="使用-ghproxy-加速">使用 ghproxy 加速&lt;/h2>
&lt;p>官网：&lt;a class="link" href="https://mirror.ghproxy.com" target="_blank" rel="noopener"
>https://mirror.ghproxy.com&lt;/a>&lt;/p>
&lt;h3 id="加速方法">加速方法：&lt;/h3>
&lt;p>在链接前面添加：https://mirror.ghproxy.com/，如：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://mirror.ghproxy.com/https://github.com/user/repo/releases/download/version/file
&lt;/code>&lt;/pre>
&lt;div class="notices warning" >&lt;blockquote>&lt;p>限制：ghproxy 域名可能会被墙，导致需要更换域名&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="使用-jsdelivr-加速">使用 jsdelivr 加速&lt;/h2>
&lt;p>官网：&lt;a class="link" href="https://github.com/jsdelivr/jsdelivr?tab=readme-ov-file#github" target="_blank" rel="noopener"
>https://github.com/jsdelivr/jsdelivr?tab=readme-ov-file#github&lt;/a>&lt;/p>
&lt;h3 id="加速方法-1">加速方法：&lt;/h3>
&lt;p>使用 &lt;a class="link" href="https://cdn.jsdelivr.net/gh" target="_blank" rel="noopener"
>https://cdn.jsdelivr.net/gh&lt;/a> 替换 &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>https://github.com&lt;/a> 域名，如：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cdn.jsdelivr.net/gh/user/repo@version/file
&lt;/code>&lt;/pre>&lt;p>&lt;code>@version&lt;/code> 可以是 tag 或 commit，省略也可以，如：&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cdn.jsdelivr.net/gh/user/repo/file
&lt;/code>&lt;/pre>
&lt;div class="notices warning" >&lt;blockquote>&lt;p>限制：只支持 git 仓库文件，不支持 release 发布的文件&lt;/p>
&lt;/blockquote>&lt;/div></description></item><item><title>Mac系统下如何抓包unix套接字（Unix Domain Socket）</title><link>https://blog.xenori.com/2023/05/how-to-capture-unix-domain-socket-on-mac/</link><pubDate>Mon, 22 May 2023 12:35:10 +0800</pubDate><guid>https://blog.xenori.com/2023/05/how-to-capture-unix-domain-socket-on-mac/</guid><description>&lt;img src="https://blog.xenori.com/2023/05/how-to-capture-unix-domain-socket-on-mac/cover.png" alt="Featured image of post Mac系统下如何抓包unix套接字（Unix Domain Socket）" />&lt;p>普通的抓包工具如 charles 等没法抓取unix套接字数据，需要借助 socat 来抓取。&lt;/p>
&lt;h2 id="安装抓包工具-socat">安装抓包工具 socat&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install socat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="制作抓包脚本">制作抓包脚本&lt;/h2>
&lt;p>在&lt;code>/usr/local/bin&lt;/code>下创建一个命名为&lt;code>xdump&lt;/code>的 shell 执行脚本，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>restore&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mv &lt;span class="nv">$1&lt;/span>.original &lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\nSocket &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> \e[33mRESTORED&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sock&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;restore &lt;/span>&lt;span class="nv">$sock&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sock&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$sock&lt;/span>&lt;span class="s2">.original&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socat -t100 -v UNIX-LISTEN:&lt;span class="nv">$sock&lt;/span>,mode&lt;span class="o">=&lt;/span>777,reuseaddr,fork UNIX-CONNECT:&lt;span class="nv">$sock&lt;/span>.original
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为&lt;code>xdump&lt;/code>脚本赋执行权限：&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod +x /usr/local/bin/xdump
&lt;/code>&lt;/pre>&lt;h2 id="开始抓包">开始抓包&lt;/h2>
&lt;p>需要抓包时执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo xdump /path/to/unix_socket_file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如抓包 xcode 的&lt;code>usbmuxd&lt;/code>通信协议：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo xdump /var/run/usbmuxd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; 2023/05/22 14:17:23.000982894 &lt;span class="nv">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">472&lt;/span> &lt;span class="nv">from&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="nv">to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">471&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">........&lt;span class="se">\b&lt;/span>.......&amp;lt;?xml &lt;span class="nv">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span class="nv">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;UTF-8&amp;#34;&lt;/span>?&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!DOCTYPE plist PUBLIC &lt;span class="s2">&amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;plist &lt;span class="nv">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;BundleID&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;com.apple.dt.Xcode&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;ClientVersionString&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;usbmuxd-531.100.1&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;MessageType&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;ReadBUID&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;ProcessID&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;integer&amp;gt;870&amp;lt;/integer&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;ProgName&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;Xcode&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/plist&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt; 2023/05/22 14:17:23.000985543 &lt;span class="nv">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">276&lt;/span> &lt;span class="nv">from&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="nv">to&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">275&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">........&lt;span class="se">\b&lt;/span>.......&amp;lt;?xml &lt;span class="nv">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span> &lt;span class="nv">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;UTF-8&amp;#34;&lt;/span>?&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!DOCTYPE plist PUBLIC &lt;span class="s2">&amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;plist &lt;span class="nv">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;BUID&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/plist&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>通过 WSA 抓取 android 的 https 网络请求包</title><link>https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/</link><pubDate>Mon, 15 May 2023 15:27:10 +0800</pubDate><guid>https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/</guid><description>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/cover.jpeg" alt="Featured image of post 通过 WSA 抓取 android 的 https 网络请求包" />&lt;p>android 9 以上版本，app 不再信任用户安装的证书，只能通过 root 手机把证书移动到 system 分区才能实现抓包。一般日常使用手机为了安全是不可能 root 的，这里通过 Windows 的 WSA 来实现抓包。&lt;/p>
&lt;h2 id="准备环境">准备环境&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>到 &lt;a class="link" href="https://github.com/MustardChef/WSABuilds/releases" target="_blank" rel="noopener"
>WSABuilds&lt;/a> 下载安装已 root 带 &lt;strong>magisk&lt;/strong> 的 WSA 镜像（假如之前已安装过 WSA，需要先到系统应用列表中，把旧的卸载）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装后，开始菜单中搜索 &lt;code>android&lt;/code>，找到 WSA 设置应用并打开，选择 &lt;code>开发人员&lt;/code>，并打开&lt;code>开发人员模式&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/1.png"
width="1084"
height="718"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/1_hub311dd2faff923cd2dc66f0ae9a4776d_92901_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/1_hub311dd2faff923cd2dc66f0ae9a4776d_92901_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="362px"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>安装&lt;a class="link" href="https://www.microsoft.com/store/productId/9P2JFQ43FPPG" target="_blank" rel="noopener"
>APK 安装程序&lt;/a>，实现双击安装 apk 和自动安装 adb 命令工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;a class="link" href="ms-windows-store://pdp/?productid=9PPSP2MKVTGT" >WSA 工具箱&lt;/a>，用于上传文件到 WSA&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载&lt;a class="link" href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener"
>Magisk app&lt;/a>，并安装&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="安装-charles-证书">安装 charles 证书&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>打开 &lt;strong>charles&lt;/strong>，选择菜单 &lt;code>Help -&amp;gt; SSL Proxying -&amp;gt; Save Charles Root Certificate&lt;/code>，并选择把证书保存为 &lt;code>.cer&lt;/code> 格式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开&lt;strong>WSA 工具箱&lt;/strong>，使用&lt;code>文件传输&lt;/code>功能把刚刚保存的证书上传到 wsa 的&lt;code>Download&lt;/code>目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击&lt;strong>WSA 工具箱&lt;/strong>首页的&lt;code>Android设置&lt;/code>，选择&lt;code>安全-&amp;gt;更多安全设置-&amp;gt;加密与凭据-&amp;gt;安装证书&lt;/code>菜单，选择并安装&lt;code>Download&lt;/code>目录的&lt;code>charles&lt;/code>证书&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/2.png"
width="1390"
height="864"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/2_huc11281a385f0323f7fb22346342b05c5_278663_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/2_huc11281a385f0323f7fb22346342b05c5_278663_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;ol start="4">
&lt;li>证书安装成功后，正常在&lt;code>加密与凭据-&amp;gt;信任的凭据-&amp;gt;用户&lt;/code>项中能看到已安装的证书&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/3.png"
width="582"
height="688"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/3_hu6752eb6c708844501a8d4a854f8e7790_62810_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/3_hu6752eb6c708844501a8d4a854f8e7790_62810_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;h2 id="把用户区证书移动到-system-分区">把用户区证书移动到 system 分区&lt;/h2>
&lt;ol>
&lt;li>下载 &lt;strong>Magisk&lt;/strong> 的&lt;a class="link" href="https://github.com/NVISOsecurity/MagiskTrustUserCerts/releases" target="_blank" rel="noopener"
>MagiskTrustUserCerts&lt;/a>模块压缩包，并通过&lt;strong>WSA 工具箱&lt;/strong>上传到&lt;code>Download&lt;/code>目录&lt;/li>
&lt;/ol>
&lt;ol start="2">
&lt;li>打开 &lt;strong>Magisk&lt;/strong> app，点击&lt;code>模块 -&amp;gt; 从本地安装&lt;/code>，选择刚刚上传的&lt;code>Download&lt;/code>目录下的&lt;code>AlwaysTrustUserCerts&lt;/code>压缩包&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/4.png"
width="544"
height="718"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/4_hu62ae5ce2897a65b7a4027a8ee750a16e_45040_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/4_hu62ae5ce2897a65b7a4027a8ee750a16e_45040_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>安装成功后，正常会提示你重启 wsa，没的话，在命令行中执行&lt;code>adb reboot&lt;/code>手工重启下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重启后正常能在&lt;code>加密与凭据-&amp;gt;信任的凭据-&amp;gt;系统&lt;/code>中，看到&lt;code>charles&lt;/code>证书&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/5.png"
width="544"
height="696"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/5_hub5c871cd5d01a8af30fa5218ac6cbbd2_106297_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/5_hub5c871cd5d01a8af30fa5218ac6cbbd2_106297_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="78"
data-flex-basis="187px"
>&lt;/p>
&lt;h2 id="配置代理抓包">配置代理抓包&lt;/h2>
&lt;ol>
&lt;li>打开 &lt;strong>charles&lt;/strong>，选择菜单&lt;code>Proxy -&amp;gt; SSL Proxying Settings...&lt;/code>，勾选 &lt;code>Enable SSL Proxying&lt;/code>，并添加新的 location，&lt;code>Host&lt;/code>填&lt;code>*&lt;/code>，&lt;code>Port&lt;/code>填&lt;code>443&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/6.png"
width="1620"
height="808"
srcset="https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/6_hudd5d61aff7f94b1e6ad1eb93fdacf997_349536_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/capture-android-https-network-packet-with-wsa/6_hudd5d61aff7f94b1e6ad1eb93fdacf997_349536_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;ol start="2">
&lt;li>打开命令行，执行下面的命令设置 WSA 代理：&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>adb connect 127.0.0.1:58526
adb shell settings put global http_proxy 192.168.x.x:8888
&lt;/code>&lt;/pre>&lt;p>其中&lt;code>192.168.x.x&lt;/code>需改为&lt;strong>charles&lt;/strong>所在的 ip 地址&lt;/p>
&lt;ol start="3">
&lt;li>下载安装需要抓包的 app，访问就能在&lt;strong>charles&lt;/strong>看到 https 流量了：）&lt;/li>
&lt;/ol>
&lt;h2 id="删除代理">删除代理&lt;/h2>
&lt;p>去掉代理需执行下面命令：&lt;/p>
&lt;pre tabindex="0">&lt;code>adb shell settings delete global http_proxy
adb shell settings delete global global_http_proxy_host
adb shell settings delete global global_http_proxy_port
&lt;/code>&lt;/pre></description></item><item><title>如何抓取 AppleTV (tvOS) 的 https 网络请求包</title><link>https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/</link><pubDate>Sun, 14 May 2023 11:27:10 +0800</pubDate><guid>https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/</guid><description>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/cover.webp" alt="Featured image of post 如何抓取 AppleTV (tvOS) 的 https 网络请求包" />&lt;p>AppleTV 无法直接安装证书和修改代理，需要借助添加自定义描述文件的方式来实现，才能对 app 进行抓包。&lt;/p>
&lt;h2 id="准备环境">准备环境&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装 &lt;a class="link" href="https://apps.apple.com/us/app/apple-configurator/id1037126344?mt=12" target="_blank" rel="noopener"
>Apple Configurator&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 charles&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保证 Mac 和 AppleTV 连接同一局域网&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="charles-配置抓包-https-流量">charles 配置抓包 https 流量&lt;/h2>
&lt;ol>
&lt;li>打开 &lt;strong>charles&lt;/strong>，选择菜单&lt;code>Proxy -&amp;gt; SSL Proxying Settings...&lt;/code>，勾选 &lt;code>Enable SSL Proxying&lt;/code>，并添加新的 location，&lt;code>Host&lt;/code>填&lt;code>*&lt;/code>，&lt;code>Port&lt;/code>填&lt;code>443&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/ssl_proxy.png"
width="1408"
height="1176"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/ssl_proxy_hu9385ff29d123eaef73d64fd1ef688db4_954487_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/ssl_proxy_hu9385ff29d123eaef73d64fd1ef688db4_954487_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ssl_proxy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;blockquote>
&lt;p>建议把&lt;code>Proxy&lt;/code>菜单中的&lt;code>macOS Proxy&lt;/code>去掉勾选，避免 Mac 的流量和 AppleTV 的流量混在一起&lt;/p>
&lt;/blockquote>
&lt;h2 id="创建代理描述文件">创建代理描述文件&lt;/h2>
&lt;ol>
&lt;li>打开 &lt;strong>charles&lt;/strong>，选择菜单 &lt;code>Help -&amp;gt; SSL Proxying -&amp;gt; Save Charles Root Certificate&lt;/code>，并选择把证书保存为 &lt;code>.cer&lt;/code> 格式&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/1.png"
width="1620"
height="808"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/1_hudd5d61aff7f94b1e6ad1eb93fdacf997_349536_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/1_hudd5d61aff7f94b1e6ad1eb93fdacf997_349536_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>打开 &lt;strong>Apple configurator&lt;/strong>，选择菜单 &lt;code>文件 -&amp;gt; 新建描述文件&lt;/code>&lt;/p>
&lt;p>点击&lt;code>通用&lt;/code>，在&lt;code>名称&lt;/code>中填一个易于识别的名称，如&lt;code>charles proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/2.png"
width="1832"
height="1220"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/2_hu42109b38b626d0cede6f1f90334f83b5_1241515_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/2_hu42109b38b626d0cede6f1f90334f83b5_1241515_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>点击&lt;code>证书&lt;/code>，并把刚刚保存的 charles root 证书上传上去&lt;/p>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/3.png"
width="1832"
height="1220"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/3_hu42109b38b626d0cede6f1f90334f83b5_1206667_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/3_hu42109b38b626d0cede6f1f90334f83b5_1206667_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>点击&lt;code>Wi-Fi&lt;/code>，填上 AppleTV 连接的 wifi 信息和 charles 代理信息&lt;/p>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/4.png"
width="1832"
height="1670"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/4_hue2f3b8746f0cc5ecc63a05b2db26589a_1581556_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/4_hue2f3b8746f0cc5ecc63a05b2db26589a_1581556_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>最后使用快捷键 &lt;code>cmd+s&lt;/code> 保存描述文件到本地或 iCloud 中，推荐保存到 iCloud&lt;/p>
&lt;h2 id="在-appletv-中添加描述文件">在 AppleTV 中添加描述文件&lt;/h2>
&lt;ol>
&lt;li>点击 &lt;strong>Apple configurator&lt;/strong> 主菜单，选择&lt;code>配对设备&lt;/code>，把 &lt;code>AppleTV&lt;/code> 配置并连接上&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/5.png"
width="552"
height="640"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/5_hu83a8338785ad8bbb0a93cad6a53b3d51_139507_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/5_hu83a8338785ad8bbb0a93cad6a53b3d51_139507_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/6.png"
width="1160"
height="728"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/6_huebb36bc3bfe44e4cb28ade3e23c31819_649582_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/6_huebb36bc3bfe44e4cb28ade3e23c31819_649582_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;ol start="2">
&lt;li>连接上后，&lt;strong>Apple configurator&lt;/strong> 主界面等一会会显示 AppleTV，右键选择 &lt;code>添加 -&amp;gt; 描述文件&lt;/code>，选择刚刚保存的描述文件&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/7.png"
width="1972"
height="1218"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/7_hu347e9fcf991c51822b535619a81cf78b_517017_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/7_hu347e9fcf991c51822b535619a81cf78b_517017_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;ol start="3">
&lt;li>等一会 AppleTV 会提示安装描述文件，一路选择安装就可以&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv1.png"
width="1244"
height="702"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv1_hu9e7601cd7d518e2459b2e26fc21fb9bf_123632_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv1_hu9e7601cd7d518e2459b2e26fc21fb9bf_123632_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;ol start="4">
&lt;li>安装完成后，会显示刚刚安装的描述文件&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv2.png"
width="1244"
height="702"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv2_hua1f44c6a77eb76decf16669d3280ca88_100363_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv2_hua1f44c6a77eb76decf16669d3280ca88_100363_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;ol start="5">
&lt;li>进入 AppleTV 设置，选择&lt;code>通用 -&amp;gt; 关于 -&amp;gt; 证书信任设置&lt;/code>，把&lt;code>charles&lt;/code>证书设置为信任（假如&lt;code>关于&lt;/code>中没出现&lt;code>证书信任设置&lt;/code>，证明描述文件配置有误，导致描述文件没添加成功）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv3.png"
width="1244"
height="702"
srcset="https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv3_hu1cb442105a5193c5aa586fa8d8025ec3_158194_480x0_resize_box_3.png 480w, https://blog.xenori.com/2023/05/how-capture-appletv-https-network-packet/tv3_hu1cb442105a5193c5aa586fa8d8025ec3_158194_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;ol start="6">
&lt;li>AppleTV 选择&lt;code>系统 -&amp;gt; 重新启动&lt;/code>，重启后 AppleTV 会改为使用描述文件中配置的代理 wifi 连接&lt;/li>
&lt;/ol>
&lt;div class="notices warning" >&lt;blockquote>&lt;p>使用完后可以到菜单&lt;code>通用 -&amp;gt; 描述文件&lt;/code>中删除添加的自定义描述文件，删除后连接的 wifi 会丢失断网，需要自已再次手工连接&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="charles-查看-https-流量">charles 查看 https 流量&lt;/h2>
&lt;p>等 AppleTV 重启完成，打开想要抓包的 app，在 charles 就能看到 app 的 https 请求了&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/DualSubs/DualSubs/wiki/%E5%9C%A8Apple-TV-%28tvOS%29-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6%E6%88%96MitM%E8%AF%81%E4%B9%A6" target="_blank" rel="noopener"
>在Apple TV (tvOS) 上添加描述文件或MitM证书&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>常用ffmpeg命令</title><link>https://blog.xenori.com/2022/12/ffmpeg-commands/</link><pubDate>Sat, 10 Dec 2022 11:27:10 +0800</pubDate><guid>https://blog.xenori.com/2022/12/ffmpeg-commands/</guid><description>&lt;img src="https://blog.xenori.com/2022/12/ffmpeg-commands/cover.png" alt="Featured image of post 常用ffmpeg命令" />&lt;h2 id="1-切割mkv并保留字幕">1. 切割mkv并保留字幕&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 截取从30s开始的30s视频&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ffmpeg -ss 00:00:00 -t 00:00:30 -i input.mkv -c:v copy -c:a copy -c:s copy -map &lt;span class="m">0&lt;/span> output.mkv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>wireshark常用抓包分析命令</title><link>https://blog.xenori.com/2022/08/wireshark-commands/</link><pubDate>Wed, 10 Aug 2022 11:58:08 +0800</pubDate><guid>https://blog.xenori.com/2022/08/wireshark-commands/</guid><description>&lt;img src="https://blog.xenori.com/2022/08/wireshark-commands/cover.png" alt="Featured image of post wireshark常用抓包分析命令" />&lt;h2 id="服务器抓包">服务器抓包&lt;/h2>
&lt;h3 id="mac示例">Mac示例&lt;/h3>
&lt;p>&lt;code>192.168.1.1&lt;/code>是服务器ip，&lt;code>192.168.2.1&lt;/code>是Mac ip，本命令在Mac终端执行&lt;/p>
&lt;pre tabindex="0">&lt;code>ssh root@192.168.1.1 &amp;#39;tcpdump -i br-lan host 192.168.2.1 -s 0 -l -w -&amp;#39; | /Applications/Wireshark.app/Contents/MacOS/Wireshark -k -i -
&lt;/code>&lt;/pre>&lt;h3 id="windows示例">Windows示例&lt;/h3>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;h2 id="请求过滤">请求过滤&lt;/h2>
&lt;h3 id="查看http的get请求">查看http的GET请求&lt;/h3>
&lt;pre tabindex="0">&lt;code>http.request.method == &amp;#34;GET&amp;#34;
&lt;/code>&lt;/pre>&lt;h3 id="查看http所有成功的请求">查看http所有成功的请求&lt;/h3>
&lt;pre tabindex="0">&lt;code>http.response.code == 200
&lt;/code>&lt;/pre></description></item><item><title>tvOS 开发实践 - SwiftUI篇</title><link>https://blog.xenori.com/2022/06/tvos-development-practice-with-swiftui/</link><pubDate>Tue, 21 Jun 2022 11:58:08 +0800</pubDate><guid>https://blog.xenori.com/2022/06/tvos-development-practice-with-swiftui/</guid><description>&lt;img src="https://blog.xenori.com/2022/06/tvos-development-practice-with-swiftui/cover.png" alt="Featured image of post tvOS 开发实践 - SwiftUI篇" />&lt;h2 id="焦点非对齐移动">焦点非对齐移动&lt;/h2>
&lt;p>默认tvOS焦点移动是需要移动方向上有能获取焦点的button，假如button是左右靠边对齐的，就移动不上去。需要使用&lt;code>focusSetion&lt;/code>把button所在的整行范围变成可焦点识别的，才能自动移动到靠边的button上。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">VStack&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HStack&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Button&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxWidth&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">infinity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">alignment&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">trailing&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">focusSection&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Button&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Save&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现parralw效果">实现Parralw效果&lt;/h2>
&lt;p>需要使用开源库&lt;a class="link" href="https://github.com/PGSSoft/ParallaxView/" target="_blank" rel="noopener"
>ParallaxView&lt;/a>编写自定义控件实现&lt;/p>
&lt;h2 id="优化滚动列表性能">优化滚动列表性能&lt;/h2>
&lt;p>SwiftUI滚动列表中有异步加载的图片时，向下快速滚动会停顿，不能持续滚动，看着像是tvOS焦点切换到indicator时出现了问题。要解决只能改为使用UICollectionView来实现滚动列表，推荐使用第三方开源的&lt;a class="link" href="https://github.com/apptekstudios/ASCollectionView" target="_blank" rel="noopener"
>ASCollectionView&lt;/a>或&lt;a class="link" href="https://github.com/SwiftUIX/SwiftUIX" target="_blank" rel="noopener"
>SwiftUIX&lt;/a>来实现。&lt;/p>
&lt;h2 id="tabbar随内容滚动">tabbar随内容滚动&lt;/h2>
&lt;p>需要借助&lt;a class="link" href="https://github.com/siteline/SwiftUI-Introspect" target="_blank" rel="noopener"
>Introspect&lt;/a>库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">Foundation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">SwiftUI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">TabBarScrollModifier&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ViewModifier&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">body&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Content&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">some&lt;/span> &lt;span class="n">View&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">introspectViewController&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">viewController&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">scrollView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">findScrollViewIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">viewController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">scrollView&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">scrollView&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">UIScrollView&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">viewController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setContentScrollView&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scrollView&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">findScrollViewIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">view&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">UIView&lt;/span>&lt;span class="p">?)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">UIView&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">view&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">view&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">subviews&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">subviews&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">UIScrollView&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">sub&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">UICollectionView&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sub&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">item&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">findScrollViewIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">sub&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">View&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">tabBarScroll&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">some&lt;/span> &lt;span class="n">View&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modifier&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TabBarScrollModifier&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在内容的ScrollView中调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ScrollView&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">tabBarScroll&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="onlongpressgesture导致跳转失效">onLongPressGesture导致跳转失效&lt;/h2>
&lt;p>假如在 &lt;code>NavigationLink&lt;/code> 上使用 &lt;code>onLongPressGesture&lt;/code>，那么 &lt;code>NavigartionLink&lt;/code> 的跳转会失效&lt;/p>
&lt;pre tabindex="0">&lt;code>NavigationLink{
EmptyView()
} label: {
Text(&amp;#34;Click&amp;#34;)
}
.onLongPressGesture {
// 加上这句会没法触发跳转
print(&amp;#34;long press&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;p>看网上说法这是appletv的bug，可在 &lt;code>onLongPressGesture&lt;/code> 前面加上 &lt;code>onPlayPauseCommand&lt;/code> 来避免这问题&lt;/p>
&lt;pre tabindex="0">&lt;code>NavigationLink{
EmptyView()
} label: {
Text(&amp;#34;Click&amp;#34;)
}
.onPlayPauseCommand {
// fixed navigate!!!
}
.onLongPressGesture {
print(&amp;#34;long press&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;h2 id="如何本地修改导入的swift-package">如何本地修改导入的swift package&lt;/h2>
&lt;p>需要把swift package先下载到本地，然后在finder中找到文件夹，直接拖到xcode项目根目录中&lt;/p>
&lt;p>这样修改本地代码，就可以在xcode中看到修改后的效果&lt;/p></description></item><item><title>caddy使用教程</title><link>https://blog.xenori.com/2022/04/caddy-usage/</link><pubDate>Wed, 20 Apr 2022 11:58:08 +0800</pubDate><guid>https://blog.xenori.com/2022/04/caddy-usage/</guid><description>&lt;img src="https://blog.xenori.com/2022/04/caddy-usage/cover.jpeg" alt="Featured image of post caddy使用教程" />&lt;h2 id="安装caddy">安装caddy&lt;/h2>
&lt;p>Mac:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew install caddy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows:&lt;/p>
&lt;p>到官网直接下载：&lt;a class="link" href="https://caddyserver.com/download" target="_blank" rel="noopener"
>https://caddyserver.com/download&lt;/a>&lt;/p>
&lt;h2 id="快速启动支持https的开发服务器">快速启动支持https的开发服务器&lt;/h2>
&lt;h3 id="安装证书">安装证书&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">caddy trust
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动简单文件服务器">启动简单文件服务器&lt;/h3>
&lt;p>进入文件目录，执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">caddy file-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动开发服务器">启动开发服务器&lt;/h3>
&lt;p>进入项目根目录，执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt; Caddyfile
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">www.example.com {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> try_files {path} /index.html
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> file_server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> tls internal
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caddy run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>推荐</title><link>https://blog.xenori.com/star/</link><pubDate>Mon, 05 Jul 2021 17:20:08 +0800</pubDate><guid>https://blog.xenori.com/star/</guid><description>&lt;h1 id="windows应用">Windows应用&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/MarcAnt01/Fluent-Screen-Recorder" target="_blank" rel="noopener"
>&lt;strong>Fluent Screen Recorder&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>简单的fluent design风格录屏应用&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/zhongyang219/TrafficMonitor" target="_blank" rel="noopener"
>&lt;strong>TrafficMonitor&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Traffic Monitor是一款用于Windows平台的网速监控悬浮窗软件，可以显示当前网速、CPU及内存利用率，支持嵌入到任务栏显示，支持更换皮肤、历史流量统计等功能。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/QL-Win/QuickLook" target="_blank" rel="noopener"
>&lt;strong>QuickLook&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>可以像 macOS 通过一样空格键快速预览文件内容，支持 word、excel、markdown 和图片等&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/karpach/remote-shutdown-pc" target="_blank" rel="noopener"
>&lt;strong>Remote Shutdown Manager&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>局域网通过 http 接口远程关机服务&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/ShareX/ShareX" target="_blank" rel="noopener"
>&lt;strong>ShareX&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>开源截图工具，还能自动上传图床&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/d2phap/ImageGlass" target="_blank" rel="noopener"
>&lt;strong>ImageGlass&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>小巧的类似acdsee的看图工具&lt;/p>
&lt;/blockquote>
&lt;h1 id="mac-应用">Mac 应用&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/lwouis/alt-tab-macos" target="_blank" rel="noopener"
>&lt;strong>AltTab&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Windows 系统有一个 alt-tab 组合键切换桌面的功能，这个开源软件将这个组合键移植到 MacOS 电脑。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://kyome.io/runcat/index.html?lang=en" target="_blank" rel="noopener"
>&lt;strong>runcat&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>有趣的生活在菜单栏的猫咪，会随着cpu使用率而越跑越快，也能设置显示cpu/内存/硬盘等系统信息&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/pqrs-org/Karabiner-Elements" target="_blank" rel="noopener"
>&lt;strong>Karabiner-Elements&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>强大的键盘映射工具&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/keycastr/keycastr/releases" target="_blank" rel="noopener"
>&lt;strong>KeyCastr&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>屏显当前按下的键&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://zipzapmac.com/Go2Shell" target="_blank" rel="noopener"
>&lt;strong>Go2Shell&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>在 Finder 中使用当前目录打开终端&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="noopener"
>&lt;strong>CheatSheet&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>通过按住⌘键快速显示当前应用的所有可用快捷键&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/davidwernhart/AlDente" target="_blank" rel="noopener"
>&lt;strong>AlDente&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>限制电池最大充电百分比，如设为 80%，就是充到 80%后，改为用电源直接供电，有效保护电池寿命。适合 MacBook 一直插电使用党。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/matryer/xbar" target="_blank" rel="noopener"
>&lt;strong>xbar&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>可以把任意的脚本和程序结果输出到状态栏中&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://www.better365.cn/bab2.html" target="_blank" rel="noopener"
>&lt;strong>Better And Better&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Better And Better 支持触控板、鼠标绘图手势，通过绘图即可触发对应动作。通过触控板、鼠标绘制字母“B”即可打开Better365官网，当然，你还可以选择其他预设、脚本、快捷键自定义设置执行动作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/listen1/listen1_desktop" target="_blank" rel="noopener"
>&lt;strong>Listen 1 音乐播放器&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Listen 1 可以搜索和播放来自多个主流音乐网站（网易云音乐/QQ音乐咪咕音乐等）的歌曲，让你的曲库更全面。并支持收藏功能，方便的创建自己的歌单。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener"
>&lt;strong>Hidden Bar&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Hidden Bar可以让你隐藏 macOS 菜单栏不常用的应用图标，&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/fitztrev/shuttle" target="_blank" rel="noopener"
>&lt;strong>shuttle&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>简单的状态栏ssh快捷方式&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://github.com/ntfstool/ntfstool" target="_blank" rel="noopener"
>&lt;strong>NTFS Tool&lt;/strong>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>为MAC提供NTFS读写支持的一款免费软件&lt;/p>
&lt;/blockquote></description></item><item><title>Windows下获取鼠标当前选中文字</title><link>https://blog.xenori.com/2021/05/get-selected-text-in-windows/</link><pubDate>Thu, 13 May 2021 15:43:11 +0800</pubDate><guid>https://blog.xenori.com/2021/05/get-selected-text-in-windows/</guid><description>&lt;img src="https://blog.xenori.com/2021/05/get-selected-text-in-windows/cover.png" alt="Featured image of post Windows下获取鼠标当前选中文字" />&lt;p>Mac下的PopClip是我很喜欢的应用，一直想在Windows下找个替代的，但一直没找到，就准备自己简单实现一个。但研究后发现，Windows下是没有统一的API接口来获取当前用户选中文字的。商业化的&lt;a class="link" href="https://www.textcapture.com/gb/getword.htm" target="_blank" rel="noopener"
>GetWord&lt;/a>组件可以实现，效果不错，但是这组件是不能免费在非商业应用中使用的。&lt;/p>
&lt;p>经过一番网络查找后，发现有几个方案可以获取到，但都有优缺点，都不完美，需要把几种方案结合起来使用才能获取大部分情景下的选中文字。下面记录下这几种不同的实现方案：&lt;/p>
&lt;h2 id="microsoft-ui-automation">Microsoft UI Automation&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/zh-cn/dotnet/framework/ui-automation/" target="_blank" rel="noopener"
>Microsoft UI Automation&lt;/a>是UI的自动化测试框架，提供对windows用户界面（UI）相关信息的编程访问。它提供的&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/uiautomationclient/nn-uiautomationclient-iuiautomationtextpattern" target="_blank" rel="noopener"
>IUIAutomationTextPattern&lt;/a>接口，可以用来获取文本控件的选中内容，获取示例（C#）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">var&lt;/span> &lt;span class="n">el&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">AutomationElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FocusedElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">object&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">TryGetCurrentPattern&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TextPattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Pattern&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">out&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">var&lt;/span> &lt;span class="n">selectRanges&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">TextPattern&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">GetSelection&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">var&lt;/span> &lt;span class="n">rng&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">selectRanges&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetText&lt;/span>&lt;span class="p">(-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="notices success" >&lt;blockquote>&lt;p>优点：官方支持的接口，edge、chrome等浏览器内容都能获取到&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;div class="notices " >&lt;blockquote>&lt;p>缺点：很多应用不支持这接口，或支持得不好，测试发现有些使用.Net组件能获取的，但自己用Go+Win32就没法正确获取&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="em_getsel--wm_gettext-message">EM_GETSEL &amp;amp; WM_GETTEXT message&lt;/h2>
&lt;p>向windows窗口发送&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/controls/em-getsel" target="_blank" rel="noopener"
>EM_GETSEL&lt;/a>消息，可以获取到编辑控件当前选中文本的起始和结束索引位置，结合&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-gettext" target="_blank" rel="noopener"
>WM_GETTEXT&lt;/a>获取编辑控件当前文本内容，就能计算出选中的文字，获取示例（Go）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">getSelection&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// attach to other windows thread
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">processId&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">attach&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">forgroundWnd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetForegroundWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">targetThreadId&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetWindowThreadProcessId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">forgroundWnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">processId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">currentThreadId&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetCurrentThreadId&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">targetThreadId&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">currentThreadId&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">attach&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">AttachThreadInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">currentThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">targetThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">attach&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;AttachThreadInput failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">focusWnd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetFocus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Get total text length
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">textlength&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">uint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">focusWnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WM_GETTEXTLENGTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Have any text at all?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">textlength&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">textlength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">textlength&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Get selection
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">selstart&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selend&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">focusWnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EM_GETSEL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">selstart&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">selend&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sb&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">uint16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">textlength&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SendMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">focusWnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WM_GETTEXT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">textlength&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">sb&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Slice out selection
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">UTF16ToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sb&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">length&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selend&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">selstart&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selstart&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selend&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">attach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">AttachThreadInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">currentThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">targetThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">selstart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">selend&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">attach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">AttachThreadInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">currentThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">targetThreadId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Failed :(
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;get selected failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="notices success" >&lt;blockquote>&lt;p>优点：支持旧的winform、win32应用&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;div class="notices " >&lt;blockquote>&lt;p>缺点：新的WPF、UWP应用不支持&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="hook-textout-api">Hook TextOut API&lt;/h2>
&lt;p>部分windows应用或游戏是通过底层GDI++的&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-textoutw" target="_blank" rel="noopener"
>TextOutW&lt;/a>或&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-exttextoutw" target="_blank" rel="noopener"
>ExtTextOutW&lt;/a>接口渲染文字的，我们可以通过HOOK技术，把这些接口替换为我们自己的接口，调用&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidaterect" target="_blank" rel="noopener"
>InvalidateRect&lt;/a>让应用重绘下鼠标划过的区域，这样应用再调用ExTextOutW接口渲染时，就能拿到相应的文字了。具体原理可以参考这篇论文：&lt;a class="link" href="https://scialert.net/fulltext/?doi=itj.2013.1668.1672#1147370_ja" target="_blank" rel="noopener"
>Principle of Capturing Word from Screen and Its Implement Methods&lt;/a>，相关示例项目可参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/Artikash/Textractor" target="_blank" rel="noopener"
>Textractor&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/williammortl/Prochook64/" target="_blank" rel="noopener"
>Prochook64&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="notices success" >&lt;blockquote>&lt;p>优点：支持获取旧游戏的文本&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;div class="notices " >&lt;blockquote>&lt;p>缺点：实现难度大，现在大多数应用都是通过TrueType字体文件渲染的，只能拿到&lt;code>GLYPH_INDEX&lt;/code>，拿不到最原始的文字。&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="ocr">OCR&lt;/h2>
&lt;p>截图鼠标划过的区域，再通过OCR出来文字，很多词典软件的鼠标取词通过这方式实现&lt;/p>
&lt;div class="notices success" >&lt;blockquote>&lt;p>优点：任何windows应用都支持&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;div class="notices " >&lt;blockquote>&lt;p>缺点：OCR处理慢，混合多语言文字准确度不高&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;h2 id="clipboard">Clipboard&lt;/h2>
&lt;p>通过模拟复制命令，把选中文字先复制到剪贴板，再从剪贴板取出来。使用示例（Go）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">getSelectionByClipboard&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">hwnd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetForegroundWindow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">winText&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">uint16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">GetWindowText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hwnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">winText&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nb">uint32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">winText&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">windowName&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">UTF16ToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">winText&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// save old clipboard content
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">oldClipboardText&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetClipboardText&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// current sequentNumber
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">oldSeqNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetClipboardSequenceNumber&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// send ctrl+c copy event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">windowName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Internet Explore&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">windowName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Microsoft Edge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Internet Explore ignore ctrl+c click event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">PostMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hwnd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">win&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WM_COMMAND&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0001000f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// send selected to clipboard
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">SendCopy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clipboardChange&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nf">waitForClipboardChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">oldSeqNumber&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">clipboardChange&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetClipboardText&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// restore old clipborad state
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">UpdateClipboardText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">oldClipboardText&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Failed :(
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;get selected failed&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">waitForClipboardChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">oldSeqNumber&lt;/span> &lt;span class="kt">uint32&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitChangeCh&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">timeout&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">runTime&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">changeCheckTimer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Microsecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">changeCheckTimer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">C&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">seqNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">GetClipboardSequenceNumber&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">seqNumber&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">oldSeqNumber&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitChangeCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">runTime&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">runTime&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">timeout&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitChangeCh&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">changeCheckTimer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Microsecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">waitChangeCh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="notices success" >&lt;blockquote>&lt;p>优点：支持复制的应用都可以支持，如excel，word等&lt;/p>
&lt;/blockquote>&lt;/div>
&lt;div class="notices " >&lt;blockquote>&lt;p>缺点：污染系统剪贴板，当用户有使用剪贴板历史软件时，会看到所有选中的文字&lt;/p>
&lt;/blockquote>&lt;/div></description></item><item><title>常用git命令</title><link>https://blog.xenori.com/2021/02/git-commands/</link><pubDate>Mon, 22 Feb 2021 16:58:10 +0800</pubDate><guid>https://blog.xenori.com/2021/02/git-commands/</guid><description>&lt;img src="https://blog.xenori.com/2021/02/git-commands/cover.png" alt="Featured image of post 常用git命令" />&lt;h2 id="创建分支">创建分支&lt;/h2>
&lt;h3 id="根据-commit-创建新分支">根据 commit 创建新分支&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git checkout -b branch_name commit_id_xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="回滚">回滚&lt;/h2>
&lt;h3 id="还原本地修改过的文件">还原本地修改过的文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 会还原本地所有修改过的文件！！&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除新增未监视的文件(untracked files)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clean -fd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="丢弃本地上一次提交">丢弃本地上一次提交&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 回退到上一个 commit 版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset HEAD^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回滚到指定版本">回滚到指定版本&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 还原到指定的旧版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard &amp;lt;old_commit_id&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 还原到上一版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset HEAD^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 新修改处理...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 强制push更新覆盖远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -f origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="标签-tag">标签 tag&lt;/h2>
&lt;h3 id="删除指定-tag">删除指定 tag&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 先删除远程tag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin :refs/tags/v0.x.x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 再删除本地tag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -d v0.x.x
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除匹配的部分-tag">删除匹配的部分 tag&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 先删除远程tag，支持*模糊匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -d origin &lt;span class="k">$(&lt;/span>git tag -l &lt;span class="s2">&amp;#34;v0.1*&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 再删除本地tag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -d &lt;span class="k">$(&lt;/span>git tag -l &lt;span class="s2">&amp;#34;v0.1*&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除所有-tags">删除所有 tags&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 先删除所有远程tag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag -l &lt;span class="p">|&lt;/span> xargs -n &lt;span class="m">1&lt;/span> git push --delete origin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 再删除所有本地tag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git tag &lt;span class="p">|&lt;/span> xargs git tag -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="commit-修改">Commit 修改&lt;/h2>
&lt;h3 id="清空所有历史-commit">清空所有历史 commit&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建新的master分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout --orphan new_master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add -A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -am &lt;span class="s2">&amp;#34;First commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除旧master分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -D master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 新master分支改名为master&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -m master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 强制push更新覆盖远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -f origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="合并多个-commit">合并多个 commit&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 切换回master分支，并获取最新代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 把分支的多个提交合并为一个&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge --squash feature-branch-xxxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;merge commit message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多帐号">多帐号&lt;/h2>
&lt;h3 id="提交时提示输入帐号">提交时提示输入帐号&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git config --local credential.helper &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># git地址要使用http协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin https://xxx.com/xxx.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>常用adb命令</title><link>https://blog.xenori.com/2020/09/adb-commands/</link><pubDate>Fri, 11 Sep 2020 11:27:10 +0800</pubDate><guid>https://blog.xenori.com/2020/09/adb-commands/</guid><description>&lt;img src="https://blog.xenori.com/2020/09/adb-commands/cover.png" alt="Featured image of post 常用adb命令" />&lt;h2 id="1-查看连接设备">1. 查看连接设备&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> adb devcies
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-当有多个连接设备时指定执行命令的设备">2. 当有多个连接设备时，指定执行命令的设备&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb -s &amp;lt;deviceid&amp;gt; &amp;lt;commands&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb -s 1e25fe71 shell pm list package
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-查看手机中已安装的所有apk文件">3. 查看手机中已安装的所有apk文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb shell pm list package
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-导出指定的-apk-包">4. 导出指定的 apk 包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb shell pm path &amp;lt;com.package.name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb pull &amp;lt;/system/priv-app/com.package.name/package_name.apk&amp;gt; ~/download/savepath
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-卸载任意包括系统应用">5. 卸载任意（包括系统）应用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb shell pm uninstall -k --user &lt;span class="m">0&lt;/span> &amp;lt;com.package.name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-查看-app-的错误日志">6. 查看 app 的错误日志&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb logcat -v &lt;span class="nb">time&lt;/span> &lt;span class="p">|&lt;/span> grep AndroidRuntime
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-清空-app-日志">7. 清空 app 日志&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb logcat -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[更新]使用httpcanary在android 9以上版本抓取https网络请求包</title><link>https://blog.xenori.com/2020/07/how-capture-https-network-packet/</link><pubDate>Wed, 01 Jul 2020 11:27:10 +0800</pubDate><guid>https://blog.xenori.com/2020/07/how-capture-https-network-packet/</guid><description>&lt;img src="https://blog.xenori.com/2020/07/how-capture-https-network-packet/cover.png" alt="Featured image of post [更新]使用httpcanary在android 9以上版本抓取https网络请求包" />&lt;p>在 android 9 以上版本，很多 app 都使用&lt;a class="link" href="https://github.com/moxie0/AndroidPinning" target="_blank" rel="noopener"
>certificate pinning&lt;/a>技术来防止 https 中间人攻击，当 app 检测到证书不正确时，会自动断开网络请求，导致抓取不到 https 网络请求包。&lt;/p>
&lt;p>要顺利抓到 https 请求包，需要借助VMOS来避开certificate pinning检测。&lt;/p>
&lt;h2 id="1安装vmos">1、安装VMOS&lt;/h2>
&lt;p>在网盘中下载&lt;code>VMOS&lt;/code>，安装完后，打开VMOS，点击右上方的&lt;code>+&lt;/code>按钮添加虚拟机，选择最下方的&lt;code>安卓7.1极客版&lt;/code>，下载并安装完成。
&lt;img src="https://blog.xenori.com/2020/07/how-capture-https-network-packet/1.jpg"
width="1080"
height="2340"
srcset="https://blog.xenori.com/2020/07/how-capture-https-network-packet/1_hue87aad7deec839ffe0e011d351530d61_609274_480x0_resize_q75_box.jpg 480w, https://blog.xenori.com/2020/07/how-capture-https-network-packet/1_hue87aad7deec839ffe0e011d351530d61_609274_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>回到首页，点击启动虚拟机，进入虚拟机
&lt;img src="https://blog.xenori.com/2020/07/how-capture-https-network-packet/2.jpg"
width="1080"
height="2340"
srcset="https://blog.xenori.com/2020/07/how-capture-https-network-packet/2_hu736f23926ef0ac4ad33f71e9374fb3e8_349102_480x0_resize_q75_box.jpg 480w, https://blog.xenori.com/2020/07/how-capture-https-network-packet/2_hu736f23926ef0ac4ad33f71e9374fb3e8_349102_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>点击下方的&lt;code>常用工具&lt;/code>-&amp;gt;&lt;code>应用&lt;/code>，找到需抓包的软件，点击后导入安装
&lt;img src="https://blog.xenori.com/2020/07/how-capture-https-network-packet/3.jpg"
width="1440"
height="3120"
srcset="https://blog.xenori.com/2020/07/how-capture-https-network-packet/3_hu489ee71d1210f341130b295703923855_556682_480x0_resize_q75_box.jpg 480w, https://blog.xenori.com/2020/07/how-capture-https-network-packet/3_hu489ee71d1210f341130b295703923855_556682_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;p>VMOS下载地址：&lt;a class="link" href="https://pan.baidu.com/s/1UBNon-dT37G3NuFMcO_szw" target="_blank" rel="noopener"
>https://pan.baidu.com/s/1UBNon-dT37G3NuFMcO_szw&lt;/a> 提取码: wis3&lt;/p>
&lt;h2 id="2安装抓包软件httpcanary">2、安装抓包软件httpcanary&lt;/h2>
&lt;p>自行下载安装：&lt;/p>
&lt;p>蓝奏：&lt;a class="link" href="https://www.lanzous.com/i6hw4ti" target="_blank" rel="noopener"
>https://www.lanzous.com/i6hw4ti&lt;/a>&lt;/p>
&lt;p>百度：&lt;a class="link" href="https://pan.baidu.com/s/11fx67kcqQOwxCLdItAXIxA" target="_blank" rel="noopener"
>https://pan.baidu.com/s/11fx67kcqQOwxCLdItAXIxA&lt;/a> 提取码: ccbd&lt;/p>
&lt;h2 id="3抓取-app-的-https-请求">3、抓取 app 的 https 请求&lt;/h2>
&lt;p>先运行&lt;code>httpcanary&lt;/code>，再在&lt;code>VMOS&lt;/code>中访问需抓包的 app，就能看到所有 https 请求了，在&lt;code>VMOS&lt;/code>中运行的 app，是不会检测certificate pinning的&lt;/p>
&lt;p>&lt;img src="https://blog.xenori.com/2020/07/how-capture-https-network-packet/4.jpg"
width="1080"
height="2340"
srcset="https://blog.xenori.com/2020/07/how-capture-https-network-packet/4_hu3131e9057829df9b315e2c9944db091d_461027_480x0_resize_q75_box.jpg 480w, https://blog.xenori.com/2020/07/how-capture-https-network-packet/4_hu3131e9057829df9b315e2c9944db091d_461027_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p></description></item><item><title>各种开发相关的国内源</title><link>https://blog.xenori.com/2020/05/china-speedup-source-for-develop/</link><pubDate>Thu, 07 May 2020 11:27:10 +0800</pubDate><guid>https://blog.xenori.com/2020/05/china-speedup-source-for-develop/</guid><description>&lt;pre tabindex="0">&lt;code>阿里云统一官方镜像站：https://developer.aliyun.com/mirror/
包含了所有开源的国内镜像源，如homebrew，npm，pip，centos等，差不多满足所有开发需求， 🐂🍻
&lt;/code>&lt;/pre>&lt;h2 id="go-get-国内源">go get 国内源&lt;/h2>
&lt;p>七牛：https://goproxy.cn&lt;/p>
&lt;p>官方全球加速CDN：https://goproxy.io/&lt;/p>
&lt;p>第三方：https://gocenter.io&lt;/p>
&lt;h2 id="pip-国内源">pip 国内源&lt;/h2>
&lt;p>清华：https://pypi.tuna.tsinghua.edu.cn/simple&lt;/p>
&lt;p>阿里云：http://mirrors.aliyun.com/pypi/simple/&lt;/p>
&lt;p>中国科技大学 &lt;a class="link" href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener"
>https://pypi.mirrors.ustc.edu.cn/simple/&lt;/a>&lt;/p>
&lt;p>华中理工大学：http://pypi.hustunique.com/&lt;/p>
&lt;p>山东理工大学：http://pypi.sdutlinux.org/&lt;/p>
&lt;p>豆瓣：http://pypi.douban.com/simple/&lt;/p>
&lt;h3 id="使用方法">使用方法&lt;/h3>
&lt;p>临时使用：&lt;/p>
&lt;pre tabindex="0">&lt;code>pip install pyspider -i https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code>&lt;/pre>&lt;p>永久修改，一劳永逸：&lt;/p>
&lt;p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)&lt;/p>
&lt;p>内容如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host=mirrors.aliyun.com
&lt;/code>&lt;/pre>&lt;h2 id="gradle国内源">gradle国内源&lt;/h2>
&lt;p>阿里：http://maven.aliyun.com/nexus/content/groups/public&lt;/p>
&lt;h3 id="使用方法-1">使用方法&lt;/h3>
&lt;p>配置只在当前项目生效：
在 build.gradle 文件内修改/添加 repositories 配置&lt;/p>
&lt;pre tabindex="0">&lt;code>repositories {
maven {
url &amp;#34;http://maven.aliyun.com/nexus/content/groups/public&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;p>配置全局生效：
找到 (用户家目录)/.gradle/init.gradle 文件，如果找不到 init.gradle 文件，自己新建一个修改/添加 init.gradle 文件内的 repositories 配置&lt;/p>
&lt;pre tabindex="0">&lt;code>allprojects {
repositories {
maven {
url &amp;#34;http://maven.aliyun.com/nexus/content/groups/public&amp;#34;
}
}
}
&lt;/code>&lt;/pre></description></item><item><title>解决npm 安装 electron 卡住，无法完成</title><link>https://blog.xenori.com/2019/12/fix-npm-hang-when-install-electron/</link><pubDate>Thu, 26 Dec 2019 14:10:18 +0800</pubDate><guid>https://blog.xenori.com/2019/12/fix-npm-hang-when-install-electron/</guid><description>&lt;p>使用最新的 node v12 安装 electron 时，发现每次跑到下面的语句就会挂住，无法继续安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&amp;gt; electron@7.1.7 postinstall /Users/cxf/Dev/CapsIndicator/node_modules/electron
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; node install.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看网上相关解决方案，发现是因为 npm 需要连接 github 下载 electron 安装包导致，安装包有 60M 左右，但从 github 下载却只有几 KB，所以感觉是卡住了。但改使用淘宝的 cnpm 发现还是会卡住，这是因为 electron 的包默认还是指向 github 下载，还有 electron 提供了修改下载地址的环境变量&lt;code>electron_mirror&lt;/code>，使用&lt;code>npm config&lt;/code>设置配置变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">npm config &lt;span class="nb">set&lt;/span> electron_mirror &lt;span class="s2">&amp;#34;https://npm.taobao.org/mirrors/electron/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次执行安装命令，虽然不会卡住了，但变为直接提示404安装失败：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; electron@7.1.7 postinstall /Users/cxf/Dev/CapsIndicator/node_modules/electron
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; node install.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>node:2216&lt;span class="o">)&lt;/span> UnhandledPromiseRejectionWarning: HTTPError: Response code &lt;span class="m">404&lt;/span> &lt;span class="o">(&lt;/span>Not Found&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at EventEmitter.&amp;lt;anonymous&amp;gt; &lt;span class="o">(&lt;/span>/Users/cxf/Dev/CapsIndicator/node_modules/got/source/as-stream.js:35:24&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at EventEmitter.emit &lt;span class="o">(&lt;/span>events.js:210:5&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at module.exports &lt;span class="o">(&lt;/span>/Users/cxf/Dev/CapsIndicator/node_modules/got/source/get-response.js:22:10&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at ClientRequest.handleResponse &lt;span class="o">(&lt;/span>/Users/cxf/Dev/CapsIndicator/node_modules/got/source/request-as-event-emitter.js:155:5&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Object.onceWrapper &lt;span class="o">(&lt;/span>events.js:300:26&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at ClientRequest.emit &lt;span class="o">(&lt;/span>events.js:215:7&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at ClientRequest.origin.emit &lt;span class="o">(&lt;/span>/Users/cxf/Dev/CapsIndicator/node_modules/@szmarczak/http-timer/source/index.js:37:11&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at HTTPParser.parserOnIncomingClient &lt;span class="o">[&lt;/span>as onIncoming&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>_http_client.js:583:27&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at HTTPParser.parserOnHeadersComplete &lt;span class="o">(&lt;/span>_http_common.js:115:17&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at TLSSocket.socketOnData &lt;span class="o">(&lt;/span>_http_client.js:456:22&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>node:2216&lt;span class="o">)&lt;/span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async &lt;span class="k">function&lt;/span> without a catch block, or by rejecting a promise which was not handled with .catch&lt;span class="o">()&lt;/span>. &lt;span class="o">(&lt;/span>rejection id: 1&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>node:2216&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>DEP0018&lt;span class="o">]&lt;/span> DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero &lt;span class="nb">exit&lt;/span> code.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm WARN capsindicator@1.0.0 license should be a valid SPDX license expression
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 github &lt;a class="link" href="https://github.com/electron/electron-packager/issues/1050" target="_blank" rel="noopener"
>issue#1050&lt;/a> 后，发现是因为淘宝保存的版本目录和官方的不同，淘宝去掉了&lt;code>v&lt;/code>前缀。&lt;/p>
&lt;pre tabindex="0">&lt;code>// 官方
https://npm.taobao.org/mirrors/electron/v7.1.7/electron-v7.1.7-linux-x64.zip
// 淘宝
https://npm.taobao.org/mirrors/electron/7.1.7/electron-v7.1.7-linux-x64.zip
&lt;/code>&lt;/pre>&lt;p>好在 electron 官方也提供了修改目录名称的环境变量&lt;code>electron_custom_dir&lt;/code>，配置改下：&lt;/p>
&lt;pre tabindex="0">&lt;code>npm config set electron_custom_dir &amp;#34;7.1.7&amp;#34;
&lt;/code>&lt;/pre>&lt;p>再次运行安装命令，这次终于成功了😂&lt;/p>
&lt;blockquote>
&lt;p>官方相关的&lt;a class="link" href="https://github.com/electron/electron/blob/9c442e0a7e1ee5945c4d1f9f67a814c855b7e440/docs/tutorial/installation.md#custom-mirrors-and-caches" target="_blank" rel="noopener"
>安装说明&lt;/a>：&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/12/26/7QUYwhvlXny8sNG.png"
loading="lazy"
alt="UTOOLS1577342703742.png"
>&lt;/p>
&lt;/blockquote></description></item><item><title>使用gdb调试php的coredump文件</title><link>https://blog.xenori.com/2015/07/2015-using-gdb-to-debug-php-coredump/</link><pubDate>Wed, 08 Jul 2015 01:33:35 +0800</pubDate><guid>https://blog.xenori.com/2015/07/2015-using-gdb-to-debug-php-coredump/</guid><description>&lt;p>使用xhprof测试slim框架的性能时，发现php抛了Segment Fault错误，试着使用gdb查看是什么导致的。&lt;/p>
&lt;h2 id="生成coredump文件">生成coredump文件&lt;/h2>
&lt;p>要生成php的coredump文件需要对系统进行一些配置，具体查看：&lt;a class="link" href="https://rtcamp.com/tutorials/php/core-dump-php5-fpm/" target="_blank" rel="noopener"
>Generating core-dump for php5-fpm&lt;/a>&lt;/p>
&lt;h2 id="使用gdb调试coredump文件">使用gdb调试coredump文件&lt;/h2>
&lt;p>执行gdb命令，因为coredump是php-fpm进程生成的，还需要指定php-fpm的路径，要不查看不了具体的代码执行信息。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ gdb /usr/local/php5/sbin/php-fpm -c /tmp/core-php-fpm.1567
&lt;/code>&lt;/pre>&lt;h2 id="gdb调试命令">gdb调试命令&lt;/h2>
&lt;h3 id="bt">bt&lt;/h3>
&lt;p>bt命令打印程序执行的堆栈信息&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) bt
#0 _phpi_pop (ht=&amp;lt;value optimized out&amp;gt;, return_value=0x7faf756ace10, return_value_ptr=0x0, this_ptr=&amp;lt;value optimized out&amp;gt;,
return_value_used=&amp;lt;value optimized out&amp;gt;, off_the_end=0) at /home/apps/php-5.6.10/ext/standard/array.c:1879
#1 0x00007faf7d8f3317 in hp_execute_internal (execute_data=0x7faf8991db40, fci=0x0, ret=1) at /home/apps/xhprof-master/extension/xhprof.c:1730
#2 0x0000000000888cc5 in zend_do_fcall_common_helper_SPEC (execute_data=&amp;lt;value optimized out&amp;gt;) at /home/apps/php-5.6.10/Zend/zend_vm_execute.h:560
#3 0x00000000008787d0 in execute_ex (execute_data=0x7faf8991db40) at /home/apps/php-5.6.10/Zend/zend_vm_execute.h:363
#4 0x00007faf7d8f2ca9 in hp_execute_ex (execute_data=0x7faf8991db40) at /home/apps/xhprof-master/extension/xhprof.c:1675
&lt;/code>&lt;/pre>&lt;h3 id="p">p&lt;/h3>
&lt;p>p命令用于打印变量信息&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) p *executor_globals-&amp;gt;argument_stack
$2 = {top = 0x7faf8991dc38, end = 0x7faf8993d848, prev = 0x0}
&lt;/code>&lt;/pre>&lt;h3 id="f">f&lt;/h3>
&lt;p>切换当前的栈，一般来说，程序停止时，最顶层的栈就是当前栈&lt;/p>
&lt;pre tabindex="0">&lt;code># 切换到1层级的栈
(gdb) f 1
#1 0x00007f701d60c317 in hp_execute_internal (execute_data=0x7f702940a858, fci=0x0, ret=1) at /home/apps/xhprof-master/extension/xhprof.c:1730
1730 ((zend_internal_function *) execute_data-&amp;gt;function_state.function)-&amp;gt;handler(
# 查看当前栈信息
(gdb) info f
Stack level 1, frame at 0x7fff515e2090:
rip = 0x7f701d60c317 in hp_execute_internal (/home/apps/xhprof-master/extension/xhprof.c:1730); saved rip 0x888a15
called by frame at 0x7fff515e2150, caller of frame at 0x7fff515e2040
source language c.
Arglist at 0x7fff515e2038, args: execute_data=0x7f702940a858, fci=0x0, ret=1
Locals at 0x7fff515e2038, Previous frame&amp;#39;s sp is 0x7fff515e2090
Saved registers:
rbx at 0x7fff515e2058, rbp at 0x7fff515e2060, r12 at 0x7fff515e2068, r13 at 0x7fff515e2070, r14 at 0x7fff515e2078, r15 at 0x7fff515e2080,
rip at 0x7fff515e2088
&lt;/code>&lt;/pre>&lt;h3 id="info">info&lt;/h3>
&lt;p>查看信息&lt;/p>
&lt;pre tabindex="0">&lt;code># 打印局部变量信息
info locals
# 打印全局和局部变量信息
info variables
# 打印参数信息
info args
# 打印当前堆栈信息
info f
&lt;/code>&lt;/pre>&lt;h2 id="php脚本调试命令">php脚本调试命令&lt;/h2>
&lt;p>使用php脚本调试命令，需要引入php源码中的脚本文件.gdbinit。&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) source /home/apps/php-5.6.10/.gdbinit
&lt;/code>&lt;/pre>&lt;h3 id="zbacktrace">zbacktrace&lt;/h3>
&lt;p>zbacktrace可以打印php的堆栈信息，不同于bt只打印c的堆栈信息。&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) zbacktrace
[0x7faf8991db40] array_shift(array(2)[0x7faf756acc88]) /var/www/html/php-framework-benchmark/slim-2.6/vendor/slim/slim/Slim/Slim.php:441
[0x7faf8991da18] Slim\Slim-&amp;gt;mapRoute(array(2)[0x7faf897a0590]) /var/www/html/php-framework-benchmark/slim-2.6/vendor/slim/slim/Slim/Slim.php:473
[0x7faf8991d910] Slim\Slim-&amp;gt;get(&amp;#34;/hello/index&amp;#34;, object[0x7faf897a0510]) /var/www/html/php-framework-benchmark/slim-2.6/index.php:18
&lt;/code>&lt;/pre>&lt;h3 id="print_cvs">print_cvs&lt;/h3>
&lt;p>print_cvs打印当前执行命令下的所有php变量&lt;/p>
&lt;h3 id="printzv">printzv&lt;/h3>
&lt;p>打印zval变量信息，可指定zval的指针地址，如zbacktrace返回的函数参数地址&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) printzv 0x7faf756acc88
[0x7faf756acc88] (refcount=2,is_ref) array(2): {
0 =&amp;gt; [0x7faf8979ee40] (refcount=4) string(12): &amp;#34;/hello/index&amp;#34;
1 =&amp;gt; [0x7faf897a0510] (refcount=3) objectYou can&amp;#39;t do that without a process to debug.
&lt;/code>&lt;/pre>&lt;h3 id="print_ht">print_ht&lt;/h3>
&lt;p>print_ht是用打印zval变量信息&lt;/p>
&lt;h3 id="print_htptr">print_htptr&lt;/h3>
&lt;p>print_htptr是用打印zval指针指向的变量信息&lt;/p>
&lt;h3 id="print_htstr">print_htstr&lt;/h3>
&lt;p>print_htstr用于打印string构成的Hashtable变量信息&lt;/p>
&lt;h3 id="print_ft">print_ft&lt;/h3>
&lt;p>print_ft用于打印function table (HashTable)&lt;/p>
&lt;h3 id="zmemcheck">zmemcheck&lt;/h3>
&lt;p>zmemcheck用于显示当前的内在分配状态信息&lt;/p>
&lt;h2 id="php全局对象executor_globals">php全局对象executor_globals&lt;/h2>
&lt;p>php源码用有个用EG宏表示的全局对象executor_globals，它包含了php所有相关的执行信息，如当前执行的op_array，传递参数和函数名等信息。源码中的EG(v)实际是调用executor_globals-&amp;gt;v。executor_globals包含的变量有很多，可以用命令：&lt;/p>
&lt;pre tabindex="0">&lt;code>p executor_globals
&lt;/code>&lt;/pre>&lt;p>打印出来查看。&lt;/p>
&lt;p>下面是比较重要的几个变量：&lt;/p>
&lt;pre tabindex="0">&lt;code>argument_stack : 传递给当前调用函数的参数堆栈，可以查看参数信息
current_execute_data : 当前执行的命令信息，如当前执行函数信息，op_array，op_code等
prev_execute_data ：前一执行命令信息，相当于调用函数的上级函数
active_op_array : 当前正在执行的op_array
exception : 当前包含的异常信息
&lt;/code>&lt;/pre>&lt;p>查看示例：&lt;/p>
&lt;pre tabindex="0">&lt;code>## 查看当前执行命令信息
(gdb) p *executor_globals-&amp;gt;current_execute_data
$8 = {opline = 0x7faf76376fd0, function_state = {function = 0x1123720, arguments = 0x7faf8991dc30}, op_array = 0x7faf897bf9f8, object = 0x0,
symbol_table = 0x0, prev_execute_data = 0x7faf8991da18, old_error_reporting = 0x0, nested = 0 &amp;#39;\000&amp;#39;, original_return_value = 0x0,
current_scope = 0x7faf8991da28, current_called_scope = 0x0, current_this = 0x0, fast_ret = 0x0, delayed_exception = 0x0,
call_slots = 0x7faf8991dc08, call = 0x7faf8991dc08}
## 查看前一执行命令信息，相当于上级调用函数
(gdb) p *executor_globals-&amp;gt;current_execute_data-&amp;gt;prev_execute_data
$19 = {opline = 0x7faf763781e8, function_state = {function = 0x7faf897bf9f8, arguments = 0x7faf8991dad8}, op_array = 0x7faf897bf020,
object = 0x7faf8978adf0, symbol_table = 0x0, prev_execute_data = 0x7faf8991d910, old_error_reporting = 0x0, nested = 0 &amp;#39;\000&amp;#39;,
original_return_value = 0x0, current_scope = 0x7faf897c2d48, current_called_scope = 0x7faf897c2d48, current_this = 0x7faf8978adf0,
fast_ret = 0x7faf897c2d48, delayed_exception = 0x0, call_slots = 0x7faf8991dab0, call = 0x7faf8991dab0}
&lt;/code>&lt;/pre>&lt;h2 id="扩展阅读">扩展阅读&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.laruence.com/2011/06/23/2057.html" target="_blank" rel="noopener"
>如何调试PHP的Core之获取基本信息&lt;/a>&lt;br>
&lt;a class="link" href="http://www.php-internals.com/book/" target="_blank" rel="noopener"
>TIPI: 深入理解PHP内核&lt;/a>&lt;/p></description></item><item><title>解决cookie冲突导致的登录循环重定向</title><link>https://blog.xenori.com/2015/04/loop-redirect-cause-by-cookie-conflict/</link><pubDate>Thu, 02 Apr 2015 00:21:00 +0000</pubDate><guid>https://blog.xenori.com/2015/04/loop-redirect-cause-by-cookie-conflict/</guid><description>&lt;p>近排开发的一个后台系统（域名：admin.test.test.com）在接入公司统一SSO时，遇到了cookie冲突引起的登录循环重定向的bug。&lt;/p>
&lt;p>公司有一个统一的SSO登录页面，我们开发的系统是跳转到该页面实现登录验证的。有用户反映登录不了，浏览器提示循环重定向了，查看用户浏览器发现有两个相同名称的session cookie：&lt;/p>
&lt;pre tabindex="0">&lt;code>PHPSESSID=token1; path=/; expired=/; domain=.test.com
PHPSESSID=token2; path=/; expired=/; domain=.test.test.com
&lt;/code>&lt;/pre>&lt;p>显然这两个cookie的domain因为都是admin.test.test.com的根域名，使浏览器都发送到php后台系统了。第一个是后台系统（admin.test.test.com）写入的，是正确的session id，而第二个是由未知系统写入的。测试打印**$_COOKIE[&amp;lsquo;PHPSESSID&amp;rsquo;]**发现输出是：&lt;/p>
&lt;pre tabindex="0">&lt;code>token2
&lt;/code>&lt;/pre>&lt;p>很明显php读取到了错误的session id，所以导致系统读取不到保存在session中的登录信息，而误判用户为未登录，之后再把用户跳转回SSO登录页面，跳转回SSO系统后，SSO系统知道用户已登录过，再跳转回系统。。。这样就一直循环下去了=。=&lt;/p>
&lt;p>为什么PHP会读取到错误的session id呢？打印全局变量**$_SERVER[&amp;lsquo;HTTP_COOKIES&amp;rsquo;]**出来查看：&lt;/p>
&lt;pre tabindex="0">&lt;code>PHPSESSID=token2;PHPSESSID=token1
&lt;/code>&lt;/pre>&lt;p>发现PHP是能接收到两个同名COOKIE的，但只取了第一个当真正的session id！！&lt;br>
查看php源码，在文件php_variables.c的220行，有注释出php对同名cookie的处理规则：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://github.com/php/php-src/blob/e10e151e9b92313a7085272c85bebf6c82017fce/main/php_variables.c" target="_blank" rel="noopener"
>https://github.com/php/php-src/blob/e10e151e9b92313a7085272c85bebf6c82017fce/main/php_variables.c&lt;/a> #220&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * According to rfc2965, more specific paths are listed above the less specific ones.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * If we encounter a duplicate cookie name, we should skip it, since it is not possible
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * to have the same (plain text) cookie name for the same path and we should not overwrite
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * more specific cookies with the less specific ones.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">Z_TYPE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">PG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http_globals&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="n">TRACK_VARS_COOKIE&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">IS_UNDEF&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">symtable1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nf">Z_ARRVAL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">PG&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http_globals&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="n">TRACK_VARS_COOKIE&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">zend_symtable_str_exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symtable1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index_len&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">zval_ptr_dtor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">gpc_element&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gpc_element_p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">zend_symtable_str_update_ind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symtable1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">gpc_element&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>意思是当php遇到相同名称的cookie时，只会保留**$_SERVER[&amp;lsquo;HTTP_COOKIES&amp;rsquo;]**中的第一个cookie，而余下同名的会忽略跳过。&lt;/p>
&lt;p>很明显，只要浏览器传cookie给php时，把token1的session id放在最前面，这样就能正确判断登录成功了！
那么浏览器传递cookie顺序是如何的呢？参考&lt;a class="link" href="http://www.rfc-editor.org/rfc/rfc6265.txt" target="_blank" rel="noopener"
>RFC6265 HTTP State Management Mechanism&lt;/a>，可以发现：&lt;/p>
&lt;pre tabindex="0">&lt;code>4.2.2
In particular,if the Cookie header contains two cookies with the same name (e.g.,
that were set with different Path or Domain attributes), servers
SHOULD NOT rely upon the order in which these cookies appear in the
header.
5.3. Storage Model
2. The user agent SHOULD sort the cookie-list in the following
order:
* Cookies with longer paths are listed before cookies with
shorter paths.
* Among cookies that have equal-length path fields, cookies with
earlier creation-times are listed before cookies with later
creation-times.
NOTE: Not all user agents sort the cookie-list in this order, but
this order reflects common practice when this document was
written, and, historically, there have been servers that
(erroneously) depended on this order.
&lt;/code>&lt;/pre>&lt;p>大概意思就是：&lt;/p>
&lt;ol>
&lt;li>path越长的说明匹配越精确，顺序越靠前&lt;/li>
&lt;li>假如path相同，cookie创建时间越早的，顺序越靠前&lt;/li>
&lt;li>顺序与domain没关系&lt;br>
RFC同时也说明并不是所有的浏览器都遵守这个，并且服务器也不应该依赖于cookie出现的顺序。&lt;/li>
&lt;/ol>
&lt;p>最后通过更改保存的session id名称来避免冲突解决问题，不过倒让我加深了cookie的了解。&lt;/p></description></item><item><title>在ubuntu中编译安装php</title><link>https://blog.xenori.com/2013/11/install-php-from-source-in-ubuntu/</link><pubDate>Tue, 12 Nov 2013 01:07:00 +0800</pubDate><guid>https://blog.xenori.com/2013/11/install-php-from-source-in-ubuntu/</guid><description>&lt;h3 id="预装编译环境">预装编译环境&lt;/h3>
&lt;p>在ubuntu中执行下面命令安装编译依赖软件&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; sudo apt-get install \
libxml2-dev \
libcurl4-openssl-dev \
libjpeg-dev \
libpng-dev \
libxpm-dev \
libmysqlclient-dev \
libpq-dev \
libicu-dev \
libfreetype6-dev \
libldap2-dev \
libxslt-dev
&lt;/code>&lt;/pre>&lt;h3 id="下载php源代码">下载php源代码&lt;/h3>
&lt;pre tabindex="0">&lt;code>wget http://us3.php.net/get/php-5.5.5.tar.gz/from/cn2.php.net/mirror
&lt;/code>&lt;/pre>&lt;h3 id="开始编译安装">开始编译安装&lt;/h3>
&lt;pre tabindex="0">&lt;code>&amp;gt; tar zxf php-5.5.5.tar.gz
&amp;gt; cd php-5.5.5
&amp;gt; sudo ./configurate ...
&lt;/code>&lt;/pre>&lt;h3 id="安装apc和memcache扩展">安装apc和memcache扩展&lt;/h3></description></item><item><title>捕捉php中的fatal error错误</title><link>https://blog.xenori.com/2013/11/handle-fatal-error-in-php/</link><pubDate>Mon, 04 Nov 2013 00:48:00 +0800</pubDate><guid>https://blog.xenori.com/2013/11/handle-fatal-error-in-php/</guid><description>&lt;p>php中有三个函数与捕捉运行错误有关，分别是：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/set_error_handler" target="_blank" rel="noopener"
>set_error_handler&lt;/a>：运行错误处理函数，php内核执行代码出错时一般是触发error，而不是抛异常，抛异常是面向对象编程中用的&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/set_exception_handler" target="_blank" rel="noopener"
>set_exception_handler&lt;/a>：运行异常信息处理函数，当代码中throw的异常没有被try-catch捕获时，就会调用该函数。php中error和exception的区别可以看这篇回答：&lt;a class="link" href="http://stackoverflow.com/questions/841500/php-exceptions-vs-errors" target="_blank" rel="noopener"
>php-exceptions-vs-errors&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/register_shutdown_function" target="_blank" rel="noopener"
>register_shutdown_function&lt;/a>：脚本关闭执行函数，会在php脚本每次执行完成退出前运行。&lt;/p>
&lt;/blockquote>
&lt;p>为了保证运行错误能被顺利捕捉到，必须保证在有错的程序执行前先注册了错误处理函数。
一般错误处理代码结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> &lt;span class="nf">handle_normal_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$errno&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errstr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errline&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 把error封装为异常，由异常处理函数统一处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">ErrorException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$errstr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errno&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errfile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$errline&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// don&amp;#39;t execute php default exception action
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">set_error_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;handle_normal_error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">E_ALL&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">E_STRICT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> &lt;span class="nf">user_exception_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$ex&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">E_USER_ERROR&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">send_error_to_log_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">E_USER_WARNING&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">set_exception_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;user_exception_handler&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> &lt;span class="nf">handle_fatal_error&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">error_get_last&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$error&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;type&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">E_ERROR&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nv">$error&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;type&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">send_error_to_log_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$msg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">register_shutdown_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;handle_fatal_error&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在thinkphp 3.13中，已经做了全局导常处理，代码如下：
{% codeblock Think.class.php %}&lt;/p>
&lt;p>/**
* 应用程序初始化
* @access public
* @return void
*/
static public function start() {
// 设定错误和异常处理
register_shutdown_function(array(&amp;lsquo;Think&amp;rsquo;,&amp;lsquo;fatalError&amp;rsquo;));
set_error_handler(array(&amp;lsquo;Think&amp;rsquo;,&amp;lsquo;appError&amp;rsquo;));
set_exception_handler(array(&amp;lsquo;Think&amp;rsquo;,&amp;lsquo;appException&amp;rsquo;));&lt;/p>
&lt;pre>&lt;code> ...
}
&lt;/code>&lt;/pre>
&lt;p>/**
* 自定义异常处理
* @access public
* @param mixed $e 异常对象
*/
static public function appException($e) {
$error = array();
$error[&amp;lsquo;message&amp;rsquo;] = $e-&amp;gt;getMessage();
$trace = $e-&amp;gt;getTrace();
if(&amp;rsquo;throw_exception&amp;rsquo;==$trace[0][&amp;lsquo;function&amp;rsquo;]) {
$error[&amp;lsquo;file&amp;rsquo;] = $trace[0][&amp;lsquo;file&amp;rsquo;];
$error[&amp;rsquo;line&amp;rsquo;] = $trace[0][&amp;rsquo;line&amp;rsquo;];
}else{
$error[&amp;lsquo;file&amp;rsquo;] = $e-&amp;gt;getFile();
$error[&amp;rsquo;line&amp;rsquo;] = $e-&amp;gt;getLine();
}
Log::record($error[&amp;lsquo;message&amp;rsquo;],Log::ERR);
halt($error);
}&lt;/p>
&lt;pre>&lt;code>/**
* 自定义错误处理
* @access public
* @param int $errno 错误类型
* @param string $errstr 错误信息
* @param string $errfile 错误文件
* @param int $errline 错误行数
* @return void
*/
static public function appError($errno, $errstr, $errfile, $errline) {
switch ($errno) {
case E_ERROR:
case E_PARSE:
case E_CORE_ERROR:
case E_COMPILE_ERROR:
case E_USER_ERROR:
ob_end_clean();
// 页面压缩输出支持
if(C('OUTPUT_ENCODE')){
$zlib = ini_get('zlib.output_compression');
if(empty($zlib)) ob_start('ob_gzhandler');
}
$errorStr = &amp;quot;$errstr &amp;quot;.$errfile.&amp;quot; 第 $errline 行.&amp;quot;;
if(C('LOG_RECORD')) Log::write(&amp;quot;[$errno] &amp;quot;.$errorStr,Log::ERR);
function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr);
break;
case E_STRICT:
case E_USER_WARNING:
case E_USER_NOTICE:
default:
$errorStr = &amp;quot;[$errno] $errstr &amp;quot;.$errfile.&amp;quot; 第 $errline 行.&amp;quot;;
trace($errorStr,'','NOTIC');
break;
}
}
// 致命错误捕获
static public function fatalError() {
// 保存日志记录
if(C('LOG_RECORD')) Log::save();
if ($e = error_get_last()) {
switch($e['type']){
case E_ERROR:
case E_PARSE:
case E_CORE_ERROR:
case E_COMPILE_ERROR:
case E_USER_ERROR:
ob_end_clean();
function_exists('halt')?halt($e):exit('ERROR:'.$e['message']. ' in &amp;lt;b&amp;gt;'.$e['file'].'&amp;lt;/b&amp;gt; on line &amp;lt;b&amp;gt;'.$e['line'].'&amp;lt;/b&amp;gt;');
break;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>{% endcodeblock %}&lt;/p>
&lt;p>{% codeblock functions.php %}&lt;/p>
&lt;p>/**&lt;/p>
&lt;ul>
&lt;li>错误输出&lt;/li>
&lt;li>@param mixed $error 错误&lt;/li>
&lt;li>@return void
*/
function halt($error) {
$e = array();
if (APP_DEBUG) {
//调试模式下输出错误信息
if (!is_array($error)) {
$trace = debug_backtrace();
$e[&amp;lsquo;message&amp;rsquo;] = $error;
$e[&amp;lsquo;file&amp;rsquo;] = $trace[0][&amp;lsquo;file&amp;rsquo;];
$e[&amp;rsquo;line&amp;rsquo;] = $trace[0][&amp;rsquo;line&amp;rsquo;];
ob_start();
debug_print_backtrace();
$e[&amp;rsquo;trace&amp;rsquo;] = ob_get_clean();
} else {
$e = $error;
}
} else {
//否则定向到错误页面
$error_page = C(&amp;lsquo;ERROR_PAGE&amp;rsquo;);
if (!empty($error_page)) {
redirect($error_page);
} else {
if (C(&amp;lsquo;SHOW_ERROR_MSG&amp;rsquo;))
$e[&amp;lsquo;message&amp;rsquo;] = is_array($error) ? $error[&amp;lsquo;message&amp;rsquo;] : $error;
else
$e[&amp;lsquo;message&amp;rsquo;] = C(&amp;lsquo;ERROR_MESSAGE&amp;rsquo;);
}
}
// 包含异常页面模板
include C(&amp;lsquo;TMPL_EXCEPTION_FILE&amp;rsquo;);
exit;
}&lt;/li>
&lt;/ul>
&lt;p>{% endcodeblock %}&lt;/p></description></item><item><title>更改rubygems镜像源</title><link>https://blog.xenori.com/2013/07/change-rubygem-source/</link><pubDate>Mon, 15 Jul 2013 00:15:00 +0800</pubDate><guid>https://blog.xenori.com/2013/07/change-rubygem-source/</guid><description>&lt;p>由于国内网络的原因，在安装ruby相关软件时，经常会在请求&lt;strong>rubygems.org&lt;/strong>下载时一直卡着不动，这时可以切换到淘宝的镜像源，速度嗖嗖的。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://ruby.taobao.org/" target="_blank" rel="noopener"
>http://ruby.taobao.org/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>详细的更改方法可以访问上面的网址，假如项目下有GemFile文件，还需要更改GemFile文件的配置源地址。&lt;/p>
&lt;h2 id="linux操作系统包管理镜像站">linux操作系统包管理镜像站：&lt;/h2>
&lt;p>centos、ubuntu等linux发行版的yum和apt包管理工具镜像站：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://mirrors.aliyun.com/" target="_blank" rel="noopener"
>http://mirrors.aliyun.com/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://mirrors.163.com/" target="_blank" rel="noopener"
>http://mirrors.163.com/&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>使用scala+scaloid+IntelliJ IDEA 12开发android应用</title><link>https://blog.xenori.com/2013/06/develop-android-with-intellij-idea-12-and-scaloid/</link><pubDate>Sun, 30 Jun 2013 15:41:00 +0800</pubDate><guid>https://blog.xenori.com/2013/06/develop-android-with-intellij-idea-12-and-scaloid/</guid><description>&lt;h3 id="软件环境">软件环境&lt;/h3>
&lt;p>继续下面的示例前，需要保证安装了下面的软件：&lt;/p>
&lt;ul>
&lt;li>JDK 1.6&lt;/li>
&lt;li>Android SDK&lt;/li>
&lt;li>IntelliJ IDEA 12&lt;/li>
&lt;li>Scala 2.10.2&lt;/li>
&lt;li>Maven 3&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>IntelliJ IDEA 12正常也可以换为Android Studio，不过因为Android Studio是基于IntelliJ IDEA 13 EAP开发的，当前scala plugin还不支持13 EAP，所以还是建议使用IntelliJ IDEA 12，等scala plugin支持最新版后，再换为Android Studio进行开发。&lt;/p>
&lt;/blockquote>
&lt;h3 id="示例项目">示例项目&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/pocorall/hello-scaloid-maven" target="_blank" rel="noopener"
>hello-scaloid-maven&lt;/a>是一个完全使用maven编译的示例项目,借助&lt;a class="link" href="http://code.google.com/p/maven-android-plugin/" target="_blank" rel="noopener"
>android maven plugin&lt;/a>插件可以把代码编译为android的apk文件。&lt;/p>
&lt;p>1、下载hello scaloid maven项目到本地
{% codeblock lang:ruby %}
git clone &lt;a class="link" href="https://github.com/pocorall/hello-scaloid-maven.git" target="_blank" rel="noopener"
>https://github.com/pocorall/hello-scaloid-maven.git&lt;/a> hello-scaloid-maven
{% endcodeblock %}&lt;/p>
&lt;p>2、打开POM.xml文件，在&lt;!-- raw HTML omitted -->中加上Android SDK的本地路径
{% codeblock lang:xml %}
&lt;!-- raw HTML omitted -->
&amp;lt;scala.version&amp;gt;2.10.2&amp;lt;/scala.version&amp;gt;
&amp;lt;android.sdk.path&amp;gt;/Applications/android sdk/&amp;lt;/android.sdk.path&amp;gt;
&lt;!-- raw HTML omitted -->
{% endcodeblock %}&lt;/p>
&lt;p>3、执行maven命令下载依赖软件
{% codeblock lang:ruby %}
mvn clean package
{% endcodeblock %}&lt;/p>
&lt;p>4、当提示build success后，用IntelliJ IDEA的“File-&amp;gt;Open Project”打开POM.xml文件。&lt;strong>这里不建议直接使用mvn idea:idea命令生成的IntelliJ项目文件，因为IntelliJ一直在更新，而mvn生成的项目文件可能格式比较旧了。&lt;/strong>&lt;/p>
&lt;p>5、因为android不包括scala类库，所以编译时需要把scala和scaloid类库也编译到apk中，但一个apk是有方法数量限制的，当不使用Proguard进行裁减优化时，使用IntelliJ IDEA编译项目经常会提示错误：
{% codeblock lang:ruby %}
Android Dex: [hello-scaloid-maven] trouble writing output: Too many methods: 112662; max is 65536. By package:
Android Dex: [hello-scaloid-maven] 2 android.annotation
Android Dex: [hello-scaloid-maven] 32 android.gesture
Android Dex: [hello-scaloid-maven] 48101 org.scaloid.common
&amp;hellip;
{% endcodeblock %}&lt;/p>
&lt;p>6、IntelliJ IDEA默认不打开Proguard，下面我们修改配置打开Proguard。打开“File-&amp;gt;Prject Structure-&amp;gt;Facets-&amp;gt;android-&amp;gt;compiler”，勾选上&lt;strong>Enable ProGuard&lt;/strong>项。并把&lt;strong>Config file&lt;/strong>指向项目根目录的&lt;strong>proguard.cfg&lt;/strong>文件。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>注意：MAC下android sdk目录假如有空格的话，编译时会提示错误：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;/blockquote>
&lt;p>Unable to access jarfile /Applications/Android
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;blockquote>
&lt;p>这时需要改下Proguard脚本。打开“$(android sdk path)/tools/proguard/bin/proguard.sh”文件，把“$PROGUARD_HOME/lib/proguard.jar”路径用双引号括起来。详细可参考：&lt;a class="link" href="http://fiahfy.blogspot.com/2013/06/unable-to-access-jarfile.html" target="_blank" rel="noopener"
>http://fiahfy.blogspot.com/2013/06/unable-to-access-jarfile.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>7、设置好Proguard后，再使用IntelliJ IDEA编译应该就能成功了。Have fun！！&lt;/p>
&lt;blockquote>
&lt;p>Tip：假如你觉得android模拟器太慢，可以参考这篇文章做优化，速度提高10倍！！&lt;a class="link" href="https://www.virag.si/2012/10/speeding-up-android-emulator/" target="_blank" rel="noopener"
>https://www.virag.si/2012/10/speeding-up-android-emulator/&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>ubuntu日常操作</title><link>https://blog.xenori.com/2012/10/ubuntu-daily/</link><pubDate>Tue, 30 Oct 2012 15:14:22 +0000</pubDate><guid>https://blog.xenori.com/2012/10/ubuntu-daily/</guid><description>&lt;p>工作用电脑将会切换到ubuntu上了，记录下ubuntu常用操作。&lt;/p>
&lt;h3 id="升级到php54">===升级到php5.4===&lt;/h3>
&lt;pre>&lt;code>For Ubuntu 11.10/12.04:
sudo add-apt-repository ppa:ondrej/php5
sudo apt-get update
sudo apt-get install php5
For Ubuntu 10.04 LTS, run the following commands (Thanks to Ivan Castellanos for the extra tip):
sudo echo &amp;quot;deb http://ppa.launchpad.net/ondrej/php5/ubuntu lucid main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
sudo echo &amp;quot;deb-src http://ppa.launchpad.net/ondrej/php5/ubuntu lucid main&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E5267A6C
sudo apt-get update
sudo apt-get install php5
You can check if PHP 5.4.x is successfully installed with this command:
php5 -v
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="http://www.zimbio.com/Ubuntu&amp;#43;Linux/articles/D_AsJR2qAL6/How&amp;#43;Upgrade&amp;#43;PHP&amp;#43;5&amp;#43;4&amp;#43;Ubuntu" target="_blank" rel="noopener"
>http://www.zimbio.com/Ubuntu+Linux/articles/D_AsJR2qAL6/How+Upgrade+PHP+5+4+Ubuntu&lt;/a>&lt;/p>
&lt;h3 id="开启ubuntu的root帐号">===开启ubuntu的root帐号===&lt;/h3>
&lt;pre>&lt;code>$ sudo passwd root
[sudo] password for ramesh:
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="http://www.thegeekstuff.com/2009/09/ubuntu-tips-how-to-login-using-su-command-su-gives-authentication-failure-error-message/" target="_blank" rel="noopener"
>http://www.thegeekstuff.com/2009/09/ubuntu-tips-how-to-login-using-su-command-su-gives-authentication-failure-error-message/&lt;/a>&lt;/p>
&lt;h3 id="安装ssh连接服务">===安装SSH连接服务===&lt;/h3>
&lt;pre>&lt;code>sudo apt-get install openssh-server
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="https://help.ubuntu.com/10.04/serverguide/openssh-server.html" target="_blank" rel="noopener"
>https://help.ubuntu.com/10.04/serverguide/openssh-server.html&lt;/a>&lt;/p>
&lt;h3 id="apache卸载nginx和php安装">===apache卸载、nginx和php安装===&lt;/h3>
&lt;p>&lt;a class="link" href="http://cc.ecjtu.net/posts/php-5-4-Nginx-ubuntu-make-install" target="_blank" rel="noopener"
>http://cc.ecjtu.net/posts/php-5-4-Nginx-ubuntu-make-install&lt;/a>&lt;/p>
&lt;p>php交互命令行：http://phpsh.org/&lt;/p></description></item><item><title>利用IDA Pro反汇编程序</title><link>https://blog.xenori.com/2012/05/disassembly-with-ida-pro/</link><pubDate>Wed, 16 May 2012 16:30:16 +0000</pubDate><guid>https://blog.xenori.com/2012/05/disassembly-with-ida-pro/</guid><description>&lt;p>&lt;a class="link" href="http://www.hex-rays.com/products/ida/index.shtml" target="_blank" rel="noopener"
>IDA Pro&lt;/a>是一款强大的反汇编软件，特有的IDA视图和交叉引用，可以方便理解程序逻辑和快速定位代码片断，以方便修改。&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1vme0mij20ly0ihdil.jpg"
loading="lazy"
alt="IDA视图"
>&lt;/p>
&lt;h3 id="示例程序">示例程序&lt;/h3>
&lt;p>下面会通过修改示例程序的输出字符串，来讲解如何使用IDA Pro。&lt;/p>
&lt;pre>&lt;code>#include
main()
{
int n;
scanf (&amp;quot;%d&amp;quot;,&amp;amp;n);
if (n &amp;gt; 0)
printf(&amp;quot;a &amp;gt; 0&amp;quot;); //后面会用IDA Pro把'a'改成'n'
else
printf(&amp;quot;n &amp;lt; 0&amp;quot;);
}
&lt;/code>&lt;/pre>
&lt;p>编译后的程序下载：&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/05/test.zip" target="_blank" rel="noopener"
>demo&lt;/a>&lt;/p>
&lt;h3 id="运行ida-pro">运行IDA Pro&lt;/h3>
&lt;p>运行IDA Pro，并使用PE文件的方式打开示例的test.exe文件。IDA Pro会新建一个工程，并开始反汇编程序。反汇编完成后，在[IDA-View]窗口中，可以看到程序逻辑的树形图，如下：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1xayieqj20jp0iztb6.jpg"
loading="lazy"
alt="树形图"
>
&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1xrz40tj208v08574h.jpg"
loading="lazy"
alt="树形图"
>&lt;/p>
&lt;p>树形图把条件分支清晰地显示出来了，&lt;strong>绿色线&lt;/strong>连着的表示条件为true时执行的逻辑，而&lt;strong>红色线&lt;/strong>表示条件为false时执行的逻辑。&lt;strong>右下角&lt;/strong>有IDA视图的缩略图，在上面点击可以快速定位到视图的指定位置。&lt;/p>
&lt;p>IDA的工具栏有几个按钮对定位代码很重要，如下图所示：&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1y4cfa7j203r00tt8i.jpg"
loading="lazy"
alt="定位相关功能按钮"
>&lt;/p>
&lt;p>从左到右分别是：
&lt;strong>Open exports window&lt;/strong>:打开导出窗口
&lt;strong>Open import window&lt;/strong>:打开导入窗口
*&lt;strong>Open names window&lt;/strong>:函数和参数的命名列表
*&lt;strong>Open functions window&lt;/strong>:程序调用的所有函数窗口
*&lt;strong>Open strings window&lt;/strong>: 打开字符串显示窗口，会列出程序中的所有字符串，该窗口有助于你通过程序的运行输出逆向找出对应的代码片断。&lt;/p>
&lt;h3 id="定位代码片断">定位代码片断&lt;/h3>
&lt;p>假设我们现在接到个任务，需修正程序，把输出“a &amp;gt; 0”修正为“n &amp;gt; 0”。示例程序比较简单，直接看IDA视图我们就能找到需修改的代码片断，但实际处理时，可能程序有几m大，通过一个个看IDA视图已没法有效找到相关的执行代码片断，这时怎么办？
使用字符串窗口和IDA强大的交叉引用！
点击工具栏的[Open strings windows]按钮，可以看到如下的程序字符串：&lt;/p>
&lt;p>&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1yut1etj20db03pmxq.jpg"
loading="lazy"
alt="程序字符串"
>&lt;/p>
&lt;p>程序的字符串较少，可以很快地看到我们需要的字符串“a &amp;gt; 0”在数据段&lt;strong>00403003&lt;/strong>位置。假如字符串多到已不能肉眼定位查找，因为字符串窗口是没有查找功能的，这时需要借助其他的文本编辑器，如notepad，editplus等。在字符串窗口内右键，选择菜单[copy]命令，会把字符串窗口的所有内容复制到剪贴板，再粘贴到记事本中查找就可以了。&lt;/p>
&lt;p>&lt;strong>双击&lt;/strong>字符串窗口的该行字符串，会跳转到IDA视图的&lt;strong>00403003位置，如下图所示：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1zg56f5j20jx01vdg3.jpg"
loading="lazy"
alt="IDA视图"
>&lt;/p>
&lt;p>该位置的字符串后面会注释有DATA XREF的字样，这是程序中引用到该字符串的代码片断的地址！在该行上右键，选择[Jump to cross reference&amp;hellip;]项，会立即跳转到引用该字符串的代码片断位置！&lt;/p>
&lt;p>&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q20cc1okj20eg04hgm8.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q20sej74j20b302yaa8.jpg"
loading="lazy"
>&lt;/p>
&lt;p>最后定位的代码片断
上图显示的汇编指令即是我们要找的代码片断，这时点击[Hex View-A]窗口，会切换到二进制浏览模式，并高亮了汇编代码的二进制格式指令，如下图所示：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q215hg0cj20e60203z5.jpg"
loading="lazy"
>&lt;/p>
&lt;p>已找到需修改的代码片断，剩下的只需把a改成n。&lt;/p>
&lt;h3 id="修改程序文件">修改程序文件&lt;/h3>
&lt;p>在IDA中，可以在[Hex View-A]窗口右键选择[Edit]来修改二进制指令。修改后通过右键选择[Commit Change]可以看到修改后的IDA视图。但需要注意的是，这种方式的修改并不会更新原始程序文件，实际只是修改了IDA的项目文件！IDA中只适合做一些验证性的修改，确保正确后再使用其他工具修改原始程序文件。
在IDA中验证修改正确后，可以使用UltraEdit或Hex Workshop来修改原始程序文件。下面会以UltraEdit为例来说明如何修改。&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q221zxgej20he084jtg.jpg"
loading="lazy"
>&lt;/p>
&lt;p>用UltraEdit直接打开程序文件，UltraEdit会以16进制模式显示程序文件。&lt;strong>UltraEdit显示的地址和IDA显示的地址是不同的&lt;/strong>，为了找到对应代码片断在UltraEdit中的实际地址，需要使用到UltraEdit的查找功能。在IDA中复制需修改的16进制模式显示的指令，在UltraEdit中打开查找，粘贴并查找该16进制字符串，UltrEdit会很快定位到该指令处，如下图所示：&lt;/p>
&lt;p>&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q22llu5nj20et04z0u2.jpg"
loading="lazy"
>&lt;/p>
&lt;p>在IDA中使得右键来复制&lt;/p>
&lt;p>&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q233977pj20bp05gaao.jpg"
loading="lazy"
>&lt;/p>
&lt;p>在UltraEdit打开查找功能&lt;/p>
&lt;p>&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q23e9of1j20hc02vjsc.jpg"
loading="lazy"
>&lt;/p>
&lt;p>找到了UltraEdit的对应位置&lt;/p>
&lt;p>现在我们要把“a &amp;gt; 0”改成“n &amp;gt; 0”，a对应的ASCII码是61，而n对应的ASCII码是6E，只需把61改成6E就可以了，修改后保存。&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q23tgcxbj20h800oaa3.jpg"
loading="lazy"
>&lt;/p>
&lt;p>再次运行，可以看到结果已改变！&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q244d9g5j203y026dfn.jpg"
loading="lazy"
>&lt;/p>
&lt;p>示例只是修改了字符串，只需更改数据段内容就可以了，不用更改指令。假如需要更改指令，需要参考&lt;a class="link" href="http://courses.engr.illinois.edu/ece390/resources/opcodes.html#Main" target="_blank" rel="noopener"
>http://courses.engr.illinois.edu/ece390/resources/opcodes.html#Main&lt;/a> 8086指令操作表写出对应指今的16进制形式，再修改。&lt;/p>
&lt;h3 id="参考资料">参考资料：&lt;/h3>
&lt;p>&lt;a class="link" href="http://blog.csdn.net/liquanhai/article/details/5479141" target="_blank" rel="noopener"
>http://blog.csdn.net/liquanhai/article/details/5479141&lt;/a>
&lt;a class="link" href="http://www.youtube.com/watch?v=Gl2S0YPRb9s" target="_blank" rel="noopener"
>http://www.youtube.com/watch?v=Gl2S0YPRb9s&lt;/a>
&lt;a class="link" href="http://www.woodmann.com/crackz/Tutorials/Flores1.htm" target="_blank" rel="noopener"
>http://www.woodmann.com/crackz/Tutorials/Flores1.htm&lt;/a>
&lt;a class="link" href="http://courses.engr.illinois.edu/ece390/resources/opcodes.html#Main" target="_blank" rel="noopener"
>http://courses.engr.illinois.edu/ece390/resources/opcodes.html#Main&lt;/a>
&lt;a class="link" href="http://faydoc.tripod.com/cpu/conventions.htm" target="_blank" rel="noopener"
>http://faydoc.tripod.com/cpu/conventions.htm&lt;/a>&lt;/p></description></item><item><title>使用Mono.Cecil更改程序集dll特性</title><link>https://blog.xenori.com/2012/05/use-mono-cecil-to-change-dll-attribute/</link><pubDate>Sat, 12 May 2012 08:31:49 +0000</pubDate><guid>https://blog.xenori.com/2012/05/use-mono-cecil-to-change-dll-attribute/</guid><description>&lt;p>工作中发现一个公共组件因为某个类不带有[Serializable]特性，导致保存到memcache时出错。刚好负责的同事请假不在，尝试了iLSpy反编译方法后，最后决定使用Mono.Cecil直接修改现成的程序集dll解决。&lt;/p>
&lt;p>示例代码如下：&lt;/p>
&lt;pre>&lt;code>class Program
{
static void Main(string[] args)
{
var asmFile = &amp;quot;TestDll.dll&amp;quot;; // 程序集名
Console.WriteLine(&amp;quot;add serializable attribute for '{0}'.&amp;quot;, asmFile);
var asmDef = AssemblyDefinition.ReadAssembly(asmFile, new ReaderParameters
{
ReadSymbols = true // 标识是否读取修改pdb文件
});
// 取类名中包含&amp;quot;Entity&amp;quot;字符串的类
var types = asmDef.Modules
.SelectMany(m =&amp;gt; m.Types)
.Where(t =&amp;gt; t.Name.Contains(&amp;quot;Entity&amp;quot;));
// 设置类为可序列化
foreach (var type in types)
{
type.IsSerializable = true;
}
// 重新保存dll
var newAsmFileName = &amp;quot;TestDll_new.dll&amp;quot;;
asmDef.Write(newAsmFileName, new WriterParameters
{
WriteSymbols = true
});
Console.WriteLine(&amp;quot;new dll has save as {0}.&amp;quot;, newAsmFileName);
}
}
&lt;/code>&lt;/pre>
&lt;p>Mono.Cecil除了可以更改特性，还能把sealed类更改为public类，功能非常强大。&lt;/p>
&lt;p>&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/05/MonoCecilTest.zip" target="_blank" rel="noopener"
>下载demo&lt;/a>&lt;/p>
&lt;p>参考资料：
&lt;a class="link" href="http://blog.zhaojie.me/2011/09/aspnet-mvc-dynamic-model-mono-cecil.html" target="_blank" rel="noopener"
>使用Mono.Cecil辅助ASP.NET MVC使用dynamic类型Model&lt;/a>&lt;/p></description></item><item><title>WinDbg入门</title><link>https://blog.xenori.com/2012/04/windbg-tutorial/</link><pubDate>Tue, 24 Apr 2012 15:52:37 +0000</pubDate><guid>https://blog.xenori.com/2012/04/windbg-tutorial/</guid><description>&lt;p>这是准备在每周技术分享会中分享的内容，但因为团队都忙于各种需求和服务器迁移，分享就一直搁置了。&lt;/p>
&lt;p>这个ppt还是有用心做的，如ppt的背景，和debug流程的箭头都是使用photoshop偷下来的= =！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>示例程序：&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/04/WindbgTestExample.zip" target="_blank" rel="noopener"
>Download Example&lt;/a>&lt;/p></description></item><item><title>增加Android模拟器的"Internal Storage"容量</title><link>https://blog.xenori.com/2012/04/android-internal-storage-space/</link><pubDate>Thu, 12 Apr 2012 16:06:07 +0000</pubDate><guid>https://blog.xenori.com/2012/04/android-internal-storage-space/</guid><description>&lt;p>android模拟器默认的内部存储空间只有几十m，随便安装几个app就满了，google了下，发现AVD管理器是没有增加内部存储空间的设置的，要增加需要使用命令行来启动模拟器，命令如下：&lt;/p>
&lt;pre>&lt;code>emulator -partition-size &amp;lt;size&amp;gt; -avd &amp;lt;virtual device name&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>可以把命令保存到批处理bat文件中，以方便以后直接启动。&lt;/p>
&lt;p>&lt;strong>使用命令行启动模拟器是不能使用snapshot功能的，创建的avd之前有启动的话，需要先关闭。&lt;/strong>
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1sdhdhnj20as05w3yp.jpg"
loading="lazy"
alt="android avd"
>&lt;/p>
&lt;p>参考资料：
&lt;a class="link" href="https://groups.google.com/forum/?fromgroups#!topic/android-developers/wFO2HOcFiV4" target="_blank" rel="noopener"
>https://groups.google.com/forum/?fromgroups#!topic/android-developers/wFO2HOcFiV4&lt;/a>
&lt;a class="link" href="http://developer.android.com/guide/developing/tools/emulator.html#startup-options" target="_blank" rel="noopener"
>http://developer.android.com/guide/developing/tools/emulator.html#startup-options&lt;/a>&lt;/p></description></item><item><title>WSGI处理流程图</title><link>https://blog.xenori.com/2012/03/a-diagram-to-explain-wsgi/</link><pubDate>Mon, 26 Mar 2012 15:41:54 +0000</pubDate><guid>https://blog.xenori.com/2012/03/a-diagram-to-explain-wsgi/</guid><description>&lt;p>StackOverflow上看到的解释WSGI如何工作的图（一图胜千言）：
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1rcz9d8j21kw0pzjwx.jpg"
loading="lazy"
>&lt;/p>
&lt;p>相关：
&lt;a class="link" href="http://stackoverflow.com/questions/1303118/looking-for-a-diagram-to-explain-wsgi" target="_blank" rel="noopener"
>http://stackoverflow.com/questions/1303118/looking-for-a-diagram-to-explain-wsgi&lt;/a>
&lt;a class="link" href="http://stackoverflow.com/questions/1303118/looking-for-a-diagram-to-explain-wsgi" target="_blank" rel="noopener"
>http://www.python.org/dev/peps/pep-0333/&lt;/a>&lt;/p></description></item><item><title>linux常用命令</title><link>https://blog.xenori.com/2012/03/linux-useful-commands/</link><pubDate>Sat, 17 Mar 2012 09:42:44 +0000</pubDate><guid>https://blog.xenori.com/2012/03/linux-useful-commands/</guid><description>&lt;p>在微博上发现已有同学整理了一个不错的linux命令文档：&lt;a class="link" href="http://115.com/file/c2rzrvw3#Unix-Linux" target="_blank" rel="noopener"
>http://115.com/file/c2rzrvw3#Unix-Linux&lt;/a>
这篇文章等遇到好的命令再继续更新。。。&lt;/p>
&lt;p>文件命令 | 程序命令 | 网络命令 | 系统命令&lt;/p>
&lt;h3 id="文件">文件&lt;/h3>
&lt;p>创建一个文本文件&lt;/p>
&lt;pre>&lt;code>touch test.txt
&lt;/code>&lt;/pre>
&lt;p>删除文件&lt;/p>
&lt;pre>&lt;code>rm -f text.txt
&lt;/code>&lt;/pre>
&lt;p>创建一个目录&lt;/p>
&lt;pre>&lt;code>mkdir newdir
&lt;/code>&lt;/pre>
&lt;p>删除一个目录&lt;/p>
&lt;pre>&lt;code>rm -r dirname
&lt;/code>&lt;/pre>
&lt;p>显示目录中的文件信息&lt;/p>
&lt;pre>&lt;code>ls -lt
&lt;/code>&lt;/pre>
&lt;p>改变文件或目录的权限&lt;/p>
&lt;pre>&lt;code>chmod 666 test.txt
&lt;/code>&lt;/pre>
&lt;p>查看文件夹大小&lt;/p>
&lt;pre>&lt;code>du -h --max-depth=1 ./mp3
&lt;/code>&lt;/pre>
&lt;p>解压tar文件&lt;/p>
&lt;pre>&lt;code>tar zxpf test.tar.gz
&lt;/code>&lt;/pre>
&lt;h3 id="程序">程序&lt;/h3>
&lt;p>安装程序&lt;/p>
&lt;p>显示正在运行的程序&lt;/p>
&lt;pre>&lt;code>ps -ef
&lt;/code>&lt;/pre>
&lt;p>关闭程序&lt;/p>
&lt;pre>&lt;code>kill -QUIT [PID]
&lt;/code>&lt;/pre>
&lt;p>强制关闭程序&lt;/p>
&lt;pre>&lt;code>kill -9 [PID]
&lt;/code>&lt;/pre>
&lt;h3 id="网络">网络&lt;/h3>
&lt;p>查看程序占用端口情况&lt;/p>
&lt;pre>&lt;code>netstat -anp
&lt;/code>&lt;/pre>
&lt;p>-a显示所有连接，-n显示端口情况，-p显示程序PID&lt;/p>
&lt;h3 id="系统">系统&lt;/h3>
&lt;p>重启&lt;/p>
&lt;pre>&lt;code>reboot
&lt;/code>&lt;/pre>
&lt;p>关机&lt;/p>
&lt;pre>&lt;code>poweroff
&lt;/code>&lt;/pre></description></item><item><title>如何查看哪些进程和服务器正在使用数据库</title><link>https://blog.xenori.com/2012/03/find-who-connect-to-database/</link><pubDate>Sat, 17 Mar 2012 09:33:03 +0000</pubDate><guid>https://blog.xenori.com/2012/03/find-who-connect-to-database/</guid><description>&lt;p>工作中有时会碰到需要迁移数据库的时候，如更换机房，更换新服务器等。迁移数据库最重要是要确保正在运行的程序不会因为漏更改连接字符串而导致程序报错。但有时维护的项目可能老旧，没有相关维护文档，还有一些使用该数据库的windows服务也可能遍布在其他服务器上，这时我们该如何找到所有正在使用该数据库的服务呢？&lt;/p>
&lt;p>下面以windows服务器和Sql Server数据库为例，数据库服务器的ip是192.168.6.189，linux平台的思路差不多，只是命令有变化。&lt;/p>
&lt;h3 id="1查看sql-server进程id">1、查看Sql Server进程ID&lt;/h3>
&lt;p>打开任务管理器，点击“&lt;strong>查看&lt;/strong>-&amp;gt;&lt;strong>选择列&lt;/strong>”，勾选“&lt;strong>PID(进程标识符)&lt;/strong>”
&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1p9zo5yj20b70bkabs.jpg"
loading="lazy"
alt="sql server"
>
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1pyu9epj205k07ywf2.jpg"
loading="lazy"
alt="sql server"
>&lt;/p>
&lt;p>进程名称为“&lt;strong>sqlservr.exe&lt;/strong>”的PID就是Sql Server的进程ID，当前是&lt;strong>1800&lt;/strong>。&lt;/p>
&lt;h3 id="2查看当前连接sql-server的服务器列表">2、查看当前连接Sql Server的服务器列表&lt;/h3>
&lt;p>打开命令行，输入下面的命令：&lt;/p>
&lt;pre>&lt;code>netstat -ano|find &amp;quot;1800&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>结果如下：&lt;/p>
&lt;pre>&lt;code>C:\Documents and Settings&amp;gt;netstat -ano|find &amp;quot;1800&amp;quot;
TCP 0.0.0.0:3758 0.0.0.0:0 LISTENING 1800
TCP 0.0.0.0:5025 0.0.0.0:0 LISTENING 1800
TCP 127.0.0.1:1434 0.0.0.0:0 LISTENING 1800
TCP 192.168.6.189:3758 192.168.6.76:2685 ESTABLISHED 1800
TCP 192.168.6.189:3758 192.168.6.76:2725 ESTABLISHED 1800
&lt;/code>&lt;/pre>
&lt;p>该命令会打印出所有连接到1800进程的服务器列表，可以看到&lt;strong>192.168.6.76&lt;/strong>这台服务器正在连接到Sql Server。&lt;/p>
&lt;h3 id="3查看连接到数据库服务器的进程">3、查看连接到数据库服务器的进程&lt;/h3>
&lt;p>进入服务器192.168.6.76，打开命令行，输入下面的命令：&lt;/p>
&lt;pre>&lt;code>netstat -ano |find &amp;quot;6.189&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>6.189是数据库服务器的ip，find命令用来查找带有&amp;quot;6.189&amp;quot;字符串的行。输出如下：&lt;/p>
&lt;pre>&lt;code>d:\webroot&amp;gt;netstat -ano |find &amp;quot;6.189&amp;quot;
TCP 192.168.6.76:2685 192.168.6.189:3758 ESTABLISHED 8520
TCP 192.168.6.76:2725 192.168.6.189:3758 ESTABLISHED 8520
&lt;/code>&lt;/pre>
&lt;p>结果最右边的就是正连接到数据库服务器的进程ID，当前是&lt;strong>8520&lt;/strong>.现在已经找到进程了^0^，你只需打开任务管理器，看下该进程ID对应是进程是什么，就能准确定位了。&lt;/p>
&lt;h3 id="4查看iis进程对应的站点">4、查看IIS进程对应的站点&lt;/h3>
&lt;p>有时我们找到使用数据库的进程了，但是像IIS这种程序，因为所有站点的进程名都相同，所以无法准备定位了。
&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1qewrroj206s08iaal.jpg"
loading="lazy"
alt="sql server"
>
有什么方法可以找到w3wp.exe对应的站点名呢？可以使用iisapp命令：&lt;/p>
&lt;pre>&lt;code>d:\webroot&amp;gt;iisapp -a
W3WP.exe PID: 6584 AppPoolId: test1.com
W3WP.exe PID: 16304 AppPoolId: Special
W3WP.exe PID: 8520 AppPoolId: test2.com
W3WP.exe PID: 3164 AppPoolId: test3.com
&lt;/code>&lt;/pre>
&lt;p>iisapp命令会输出W3WP进程对应的应用程序池名，通过应用程序池名我们就能准备定位站点：）&lt;/p></description></item><item><title>了解IIS的主机名(Host Headers)配置项</title><link>https://blog.xenori.com/2012/03/understanding-iis-host-headers/</link><pubDate>Sat, 03 Mar 2012 17:00:18 +0000</pubDate><guid>https://blog.xenori.com/2012/03/understanding-iis-host-headers/</guid><description>&lt;p>IIS可以在一台服务器上配置多个web站点，每个站点通过ip地址、端口(port)和主机名(host)结合的标识符(ServerBindings Metabase)进行区分。标识字符串的格式如下：&lt;/p>
&lt;pre>&lt;code>IP:Port:Hostname
&lt;/code>&lt;/pre>
&lt;p>上面的IP和Hostname是可选项，假如设定站点时不指定，表示匹配所有。&lt;/p>
&lt;h3 id="主机名host-headers是http消息的一部分">主机名(Host Headers)是HTTP消息的一部分&lt;/h3>
&lt;p>浏览器和web服务器之间是通过http协议通信的。http发送的请求头部(headers)部分包含有很多信息，如Content-Length, Referer, &lt;strong>Host&lt;/strong>等等。&lt;/p>
&lt;h3 id="浏览器如何和web服务器通信">浏览器如何和web服务器通信&lt;/h3>
&lt;p>互联网上的两台主机之间是通过TCP/IP协议进行通信的，通信建立连接时需要指定ip和端口号(port)。当我们在浏览器中输入一个网站的域名，并按回车后，浏览器默认会使用http协议和80端口发出请求。&lt;/p>
&lt;p>&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1ogexavj20dw01i74b.jpg"
loading="lazy"
alt="client to server"
>&lt;/p>
&lt;p>浏览器首先需要把域名解析为对应的ip地址。域名解析可以使用dns服务器或本地的host文件。&lt;/p>
&lt;p>当域名解析为ip地址后，浏览器会和web服务器建立连接，并发出网页访问请求信息。请求信息的头部一般像下面这样：&lt;/p>
&lt;pre>&lt;code>GET /index.htm HTTP/1.1
Host: www.ilopia.com
&lt;/code>&lt;/pre>
&lt;p>IIS接收到请求后，会检查请求是否带有host信息(请求中也可能不带有host信息，如使用ip直接访问)。IIS发现有host后，会查找是否有匹配该host的站点，如果有匹配的站点，就会把请求路由给它进行处理。&lt;/p>
&lt;p>最后一步是IIS响应处理请求。&lt;/p>
&lt;h3 id="iis如何分发请求到指定web站点">IIS如何分发请求到指定web站点&lt;/h3>
&lt;p>IIS分发请求到指定站点的规则如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>1、是否存在准确匹配 IP:Port:Hostname标识字符串的站点，存在即分发请求，没有进行下一步匹配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、是否存在监听所有IP地址(站点设定时不指定)，并且Port和Hostname都匹配的站点，存在即分发请求，没有进行下一步匹配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、是否存在端口Port匹配，而IP和Hostname都未指定的站点，存在即分发请求，没有浏览器会提示没法连接到服务器&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;p>&lt;a class="link" href="http://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/0ed054d1-ca3a-495f-bad4-3a251e5a07a3.mspx?mfr=true" target="_blank" rel="noopener"
>ServerBindings Metabase Property (IIS 6.0)&lt;/a>
&lt;a class="link" href="http://www.it-notebook.org/iis/article/understanding_host_headers.htm" target="_blank" rel="noopener"
>Understanding Host Headers in IIS&lt;/a>
&lt;a class="link" href="http://www.it-notebook.org/iis/article/iis_multiple_websites.htm" target="_blank" rel="noopener"
>Using Host Headers to host multiple websites on IIS 6.0&lt;/a>&lt;/p></description></item><item><title>如何在ubuntu server 10.04中安装vmware tools</title><link>https://blog.xenori.com/2012/02/how-to-install-vmware-tools-in-ubuntu-server/</link><pubDate>Sun, 19 Feb 2012 08:07:01 +0000</pubDate><guid>https://blog.xenori.com/2012/02/how-to-install-vmware-tools-in-ubuntu-server/</guid><description>&lt;p>本人的ubuntu server版本是10.04.4，安装在免费的vmware player 4.0中。
安装vmware-tools需要gcc和对应的linux-headers进行编译，需先执行下面两个命令进行安装：&lt;/p>
&lt;pre>&lt;code>sudo apt-get gcc
sudo apt-get install build-essential linux-headers-$(uname -r)
&lt;/code>&lt;/pre>
&lt;p>安装后，点击vmware player菜单“Virtual Machine-&amp;gt;Install VMware Tools”，画面下方会出现黄色的VMware Tools安装提示框。
1、把安装光盘绑定到一个文件夹：&lt;/p>
&lt;pre>&lt;code>mkdir /mnt/cdrom
sudo mount /dev/cdrom /mnt/cdrom
&lt;/code>&lt;/pre>
&lt;p>2、解压安装文件到临时目录/tmp：&lt;/p>
&lt;pre>&lt;code>cd /tmp
tar zxpf /mnt/cdrom/VMwareTools-8.0.0-&amp;lt;xxxx&amp;gt;.tar.gz
&amp;lt;/xxxx&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>3、执行安装：&lt;/p>
&lt;pre>&lt;code>cd vmware-tools-distrib
sudo ./vmware-install.pl
&lt;/code>&lt;/pre>
&lt;p>4、之后按照安装提示，一直按Enter键确认就可以了。
5、安装后执行reboot重启：&lt;/p>
&lt;pre>&lt;code>sudo reboot
&lt;/code>&lt;/pre>
&lt;p>参考资料：
&lt;a class="link" href="http://ubuntu-tutorials.com/2007/10/02/how-to-install-vmware-tools-on-ubuntu-guests/" target="_blank" rel="noopener"
>http://www.vmware.com/support/ws55/doc/ws_newguest_tools_linux.html#wp1127177&lt;/a>
&lt;a class="link" href="http://ubuntuforums.org/showthread.php?t=1561822" target="_blank" rel="noopener"
>http://ubuntuforums.org/showthread.php?t=1561822&lt;/a>
&lt;a class="link" href="http://ubuntu-tutorials.com/2007/10/02/how-to-install-vmware-tools-on-ubuntu-guests/" target="_blank" rel="noopener"
>http://ubuntu-tutorials.com/2007/10/02/how-to-install-vmware-tools-on-ubuntu-guests/&lt;/a>&lt;/p></description></item><item><title>Molas——.NET依赖分离框架</title><link>https://blog.xenori.com/2012/02/molas-isolation-framework/</link><pubDate>Tue, 14 Feb 2012 17:29:51 +0000</pubDate><guid>https://blog.xenori.com/2012/02/molas-isolation-framework/</guid><description>&lt;p>&lt;img src="http://research.microsoft.com/en-us/projects/pex/pexweb.png"
loading="lazy"
>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/moles/" target="_blank" rel="noopener"
>Moles&lt;/a>是由微软研究院(&lt;a class="link" href="http://research.microsoft.com" target="_blank" rel="noopener"
>Microsoft Research&lt;/a>)开发的.NET依赖分离框架，它实现了使用自定义的委托(delegate)方法来替换原有类中的方法，以达到分离依赖，方便单元测试的目的。Moles在功能和用法上与开源的IoC框架Moq很像，但Moles有一些Moq实现不了功能，如替换静态方法，去掉静态构造函数，突破访问限制等。Molas非常有利于对ASP.NET WebForm构建的网站和依赖第三方类库的程序进行单元测试。&lt;/p>
&lt;h2 id="下载和安装">下载和安装&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/downloads.aspx" target="_blank" rel="noopener"
>下载Moles&lt;/a>后直接安装就可以了，里面集成有VS2010的插件，安装成功后，VS2010右键菜单中会集成Moles功能菜单。&lt;/p>
&lt;h2 id="使用示例">使用示例&lt;/h2>
&lt;p>我们试下测试2000年千年虫的bug。在VS2010中创建一个MoleDomain的类项目，并创建类Y2KChecker，代码如下：&lt;/p>
&lt;pre>&lt;code>namespace MoleDomain
{
public static class Y2KChecker
{
public static void Check()
{
if (DateTime.Now == new DateTime(2000, 1, 1))
throw new ApplicationException(&amp;quot;y2kbug!&amp;quot;);
}
}
}
&lt;/code>&lt;/pre>
&lt;p>现在我们要测试这段代码，确定当时间为2000/1/1时，程序能正确抛出异常。很显然这段代码没法做单元测试，因为代码中的DateTime.Now是依赖系统时钟的，只返回当前时间，我们没法改变它的值使它刚好等于2000/1/1。怎么办好呢？&lt;/p>
&lt;p>使用Molas解决这个问题很简单。创建一个测试项目，并引用MoleDomain项目，单元测试代码如下：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
public void Test()
{
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>运行测试，会显示预期的未通过，因为DateTime.Now现在返回的还是系统时间。
&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1ld1fvzj20d203d74i.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;p>我们试下使用Molas替换DateTime.Now的返回值，在测试项目引用列表中，右键MoleDomain，选择“Add Moles Assembly”，确定后会自动在项目中增加一个MoleDomain.moles文件，moles后缀的文件是让Moles对该程序集自动生成对应的Molas类型程序集，以便测试时使用。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mey3gxj20c109eaas.jpg"
loading="lazy"
alt="moles"
>
右键测试项目，选择“重新生成”，会发现程序自动引用了很多Moles相关的程序集，如Microsoft.Moles.Framework，还有自动生成的 MolaDomain.Moles程序集。
&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1mvxks5j206i08rq3d.jpg"
loading="lazy"
alt="moles"
>
要使Moles正常运行，需要改下原来的单元测试代码。在测试方法上方加上HostType特性，并写下替换DateTime.Now返回值的代码：&lt;/p>
&lt;pre>&lt;code>[TestMethod]
[ExpectedException(typeof(ApplicationException))]
[HostType(&amp;quot;Moles&amp;quot;)]
public void Test()
{
//利用委托替换原来的返回值
MDateTime.NowGet = () =&amp;gt; new DateTime(2000, 1, 1);
Y2KChecker.Check();
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，发现还是失败，提示错误：&lt;/p>
&lt;pre>&lt;code>测试方法 MoleDomain.Test.Y2KCheckerTest.Test 引发了异常 Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException，但应为异常 System.ApplicationException。异常消息: Microsoft.Moles.Framework.Moles.MoleNotInstrumentedException: The System.DateTime System.DateTime.get_Now() was not instrumented
To resolve this issue, add the following attribute in the test project:
using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
&lt;/code>&lt;/pre>
&lt;p>提示缺少一些引用配置，在测试命名空间上方加上代码：&lt;/p>
&lt;pre>&lt;code>using Microsoft.Moles.Framework;
[assembly: MoledType(typeof(System.DateTime))]
namespace MoleDomain.Test
{
.....
}
&lt;/code>&lt;/pre>
&lt;p>再次运行测试，终于通过测试了：）
&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1neh8mtj20ds027aa6.jpg"
loading="lazy"
alt="moles"
>&lt;/p>
&lt;h1 id="mole基础知识">Mole基础知识&lt;/h1>
&lt;p>原始类成员方法对应的Mole类型属性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>◇ 静态方法表示为mole类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类实例方法表示为嵌套的&lt;strong>AllInstances&lt;/strong>类型的静态属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>◇ 类构造函数表示为mole类型的命名为&lt;strong>Constructor&lt;/strong>的静态属性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下面部分说明下如何使用.
&lt;strong>Static Methods&lt;/strong>
为mole类型的静态属性附加委托方法可以替换类静态方法的内容。mole类型属性只能附加一个委托方法。如&lt;strong>MyClass&lt;/strong>类有一个静态方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public static class MyClass {
public static int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们附加一个mole到MyMethod中，使它一直返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.MyMethod = () =&amp;gt;5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass类型的代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass {
public static Func MyMethod {
set {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>安装Moles框架后，使用右键的“Add Moles Assembly”功能添加.mole后缀文件后，MMyClass就能自动生成。&lt;/p>
&lt;p>&lt;strong>实例方法(对所有实例生效)&lt;/strong>
和静态方法相似，也可以对所有实例方法进行mole。实例方法放置在嵌套类&lt;strong>AllInstances&lt;/strong>的静态属性中，例如下面MyClass实例的MyMethod方法：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>mole一个方法使所有实例对象都返回5：&lt;/p>
&lt;pre>&lt;code>MMyClass.AllInstances.MyMethod = _ =&amp;gt; 5;
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public static class AllInstances {
public static FuncMyMethod {
set {
...
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>实例方法(对一个实例生效)&lt;/strong>
对不同的实例，实例方法可以mole不同的委托方法。mole的属性实际是mole类型实例自己的属性（不是静态方法)，每个mole类型实例都会有一个原始类型的实例对象。如&lt;strong>MyClass&lt;/strong>的实例方法&lt;strong>MyMethod&lt;/strong>：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public int MyMethod() {
...
}
}
&lt;/code>&lt;/pre>
&lt;p>我们可以创建两个MMyClass的实例对象，一个使它返回5，另一个使它返回10：&lt;/p>
&lt;pre>&lt;code>var myClass1 = new MMyClass()
{
MyMethod = () =&amp;gt; 5
};
var myClass2 = new MMyClass() { MyMethod = () =&amp;gt; 10 };
&lt;/code>&lt;/pre>
&lt;p>自动生成的mole类型代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public Func MyMethod {
set {
...
}
}
public MyClass Instance {
get {
...
}
}
}
&lt;/code>&lt;/pre>
&lt;p>原始类型对象可以通过mole实例对象的&lt;strong>Instance&lt;/strong>属性获得：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
var instance = mole.Instance;
&lt;/code>&lt;/pre>
&lt;p>mole实例对象也可以隐式转换为原始类型对象，所以你可以直接赋值对原始类型，如下：&lt;/p>
&lt;pre>&lt;code>var mole = new MMyClass();
MyClassinstance = mole;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>构造函数(Constructors)&lt;/strong>
类构造函数也可以mole来进行一些赋值操作。类构造函数表示为mole类型的静态方法&lt;strong>Constructor&lt;/strong>，如下面的MyClass类带有一个int参数的构造函数：&lt;/p>
&lt;pre>&lt;code>public class MyClass {
public MyClass(int value) {
this.Value = value;
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过附加构造函数使以后的所有实例的Value属性都返回-5：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
var mole = new MMyClass(@this) {
ValueGet = () =&amp;gt; -5
};
};
&lt;/code>&lt;/pre>
&lt;p>如果你只想mole后面一个实例，我们只需把Constructor静态属性赋null值，如：&lt;/p>
&lt;pre>&lt;code>MMyClass.ConstructorInt32 = (@this, value) =&amp;gt; {
...
MMyClass.ConstructorInt32 = null;
};
&lt;/code>&lt;/pre>
&lt;p>需要注意的是，每个mole类型都有两个构造函数，当需要一个新的mole实例对象时，使用默认的构造器；而带有一个原始类型参数的构造函数，只应该在mole构造函数时使用。&lt;/p>
&lt;pre>&lt;code>public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
&lt;/code>&lt;/pre>
&lt;p>自动生成的MMyClass代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase
{
public static Action ConstructorInt32 {
set {
...
}
}
public MMyClass() { }
public MMyClass(MyClass instance) : base(instance) { }
...
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>基类成员(Base Members)&lt;/strong>
只要把子类实例作为基类构造函数的参数传入，就可以创建一个基类的mole对象，并访问到基类中的mole属性。例如，基类&lt;strong>Base&lt;/strong>有一个MyMethod的方法，而&lt;strong>Child&lt;/strong>是&lt;strong>Base&lt;/strong>的子类：&lt;/p>
&lt;pre>&lt;code>public abstract class Base {
public int MyMethod() {
...
}
}
public class Child : Base {
}
&lt;/code>&lt;/pre>
&lt;p>通过创建一个&lt;strong>MBase&lt;/strong>对象我们能设置&lt;strong>Base&lt;/strong>的mole属性：&lt;/p>
&lt;pre>&lt;code>var child = new MChild();
new MBase(child) { MyMethod = () =&amp;gt; 5 };
&lt;/code>&lt;/pre>
&lt;p>注意这里，当&lt;strong>MChild&lt;/strong>实例作为传入&lt;strong>MBase&lt;/strong>构造函数时，会被隐式转换为&lt;strong>Child&lt;/strong>实例。
MChild和MBase的自动生成代码如下：&lt;/p>
&lt;pre>&lt;code>public class MChild : MoleBase {
public MChild() { }
public MChild(Child child)
: base(child) { }
}
public class MBase : MoleBase {
public MBase(Base target) { }
public Func MyMethod
{ set { ... } }
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>静态构造函数&lt;/strong>
静态构造函数在Moles中被特殊对待，Moles只能简单地抹去静态构造函数，而不能重新为它附加新的委托方法。Moles通过指定[MolesEraseStaticConstructor]特性来抹去一个类的静态构造函数。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseStaticConstructor(typeof(MyStatic))]
class MyStatic {
static MyStatic() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>终结器(Finalizers)&lt;/strong>
对于终结器，Moles也是特殊对待的。Moles也是只能简单抹去终结器，通过指定[MolesEraseFinalizer]特性实现。&lt;/p>
&lt;pre>&lt;code>[assembly: MolesEraseFinalizer(typeof(MyFinalizer))]
class MyFinalizer {
~MyFinalizer() {
throw new Exception(); // needs moling…
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>私有方法&lt;/strong>
假如私有方法的签名类型是可见的，Moles会为私有方法自动生成mole属性。签名类型可见是指，参数类型或返回值类型是可见的，不是私有类型。&lt;/p>
&lt;p>&lt;strong>绑定接口&lt;/strong>
当类有实现接口时，Moles自动生成的mole类型会提供立即绑定接口成员的方法。例如，MyClass实现了s IEnumerable接口：&lt;/p>
&lt;pre>&lt;code>public class MyClass : IEnumerable {
public IEnumerator GetEnumerator() {
...
}
...
}
&lt;/code>&lt;/pre>
&lt;p>通过mole类型的&lt;strong>Bind&lt;/strong>方法，我们可以简捷地mole接口实现：&lt;/p>
&lt;pre>&lt;code>var myClass = new MMyClass();
myClass.Bind(new int[] { 1, 2, 3 });
&lt;/code>&lt;/pre>
&lt;p>自动生成的&lt;strong>MMyClass&lt;/strong>代码结构如下：&lt;/p>
&lt;pre>&lt;code>public class MMyClass : MoleBase {
public MMyClass Bind(IEnumerable target) {
...
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="moles缺点">Moles缺点&lt;/h2>
&lt;p>Moles缺点是，测试运行比较慢，还有测试代码只能在本机上才能测试通过，假如同伴获取代码后需要运行单元测试，必须也安装Molas环境。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/molesmanual.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://research.microsoft.com/en-us/projects/pex/documentation.aspx" target="_blank" rel="noopener"
>http://research.microsoft.com/en-us/projects/pex/documentation.aspx&lt;/a>&lt;/p></description></item><item><title>WinDbg常用命令</title><link>https://blog.xenori.com/2012/02/windbg-useful-commands/</link><pubDate>Thu, 02 Feb 2012 03:33:37 +0000</pubDate><guid>https://blog.xenori.com/2012/02/windbg-useful-commands/</guid><description>&lt;p>&lt;a class="link" href="2012/02/intro-to-windbg-for-dotnet-developers/" >前一篇文章&lt;/a>介绍了WinDbg入门，本篇主要介绍WinDbg常用命令和用法。&lt;/p>
&lt;p>调试程序的CPU满载问题，关键是要知道程序当前正在进行什么操作。假如我们在cpu满载时创建了一个dump文件，使用下面几个命令可以查看当前程序正在进行什么处理：
&lt;strong>.time&lt;/strong>
运行.time命令会显示时间相关的信息，如系统运行时间，进程运行时间和CPU花费在内核态和用户态的时间。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; .time
Debug session time: Tue Oct 23 08:38:35.000 2007 (GMT+1)
System Uptime: 4 days 17:48:01.906
Process Uptime: 0 days 0:24:37.000
Kernel time: 0 days 0:04:23.000
User time: 0 days 0:03:28.000
&lt;/code>&lt;/pre>
&lt;p>你可以看到系统已正常运行超过4天，进程运行了24分钟，CPU在内核态和用户态累积使用了8分钟。根据进程时间和CPU时间能大概估算出CPU使用率平均值是32.5%。&lt;/p>
&lt;p>&lt;strong>!threadpool&lt;/strong>&lt;/p>
&lt;p>****通过!threadpool命令我们能准确知道创建dump时cpu的使用率。也能知道在队列中的待处理请求数，Completion Port(IOCP)线程数和定时器time数。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; !threadpool
CPU utilization 100%
Worker Thread: Total: 5 Running: 4 Idle: 1 MaxLimit: 200 MinLimit: 2
Work Request in Queue: 16
Unknown Function: 6a2d945d Context: 023ede30
Unknown Function: 6a2d945d Context: 023ee1e8
AsyncTimerCallbackCompletion TimerInfo@11b53760
Unknown Function: 6a2d945d Context: 023ee3a8
Unknown Function: 6a2d945d Context: 023e3040
Unknown Function: 6a2d945d Context: 023ee178
Unknown Function: 6a2d945d Context: 023edfb0
AsyncTimerCallbackCompletion TimerInfo@11b36428
AsyncTimerCallbackCompletion TimerInfo@11b53868
Unknown Function: 6a2d945d Context: 023ee060
Unknown Function: 6a2d945d Context: 023ee290
Unknown Function: 6a2d945d Context: 023eded0
Unknown Function: 6a2d945d Context: 023edd88
Unknown Function: 6a2d945d Context: 023ede98
Unknown Function: 6a2d945d Context: 023ee258
Unknown Function: 6a2d945d Context: 023edfe8
--------------------------------------
Number of Timers: 9
--------------------------------------
Completion Port Thread:Total: 3 Free: 3 MaxFree: 4 CurrentLimit: 2 MaxLimit: 200 MinLimit: 2
&lt;/code>&lt;/pre>
&lt;p>我们可以看到当前CPU已100%使用率，我们进入下一命令。&lt;/p>
&lt;p>&lt;strong>!runaway&lt;/strong>&lt;/p>
&lt;p>这个命令用于显示所有正在运行的线程和它们的CPU使用率。这个命令对于查找高CPU使用率问题很有帮助！&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; !runaway
User Mode Time
Thread Time
25:1a94 0 days 0:00:39.937
16:1bc0 0 days 0:00:38.390
50:1e8c 0 days 0:00:08.859
52:1e40 0 days 0:00:08.687
20:1c2c 0 days 0:00:08.234
51:1340 0 days 0:00:08.171
21:1bcc 0 days 0:00:06.953
26:13ec 0 days 0:00:06.671
44:131c 0 days 0:00:03.906
22:d8c 0 days 0:00:03.375
33:78c 0 days 0:00:02.656
34:1a8c 0 days 0:00:00.906
29:1f5c 0 days 0:00:00.828
6:e28 0 days 0:00:00.625
5:1c78 0 days 0:00:00.546
23:14a4 0 days 0:00:00.484
4:5ac 0 days 0:00:00.437
45:5dc 0 days 0:00:00.421
3:13b4 0 days 0:00:00.421
47:19c8 0 days 0:00:00.375
28:1b6c 0 days 0:00:00.250
46:1dac 0 days 0:00:00.156
7:1dd8 0 days 0:00:00.109
48:cdc 0 days 0:00:00.093
49:1eac 0 days 0:00:00.062
15:1a64 0 days 0:00:00.062
0:1804 0 days 0:00:00.046
36:4a4 0 days 0:00:00.031
11:1eb4 0 days 0:00:00.031
1:10b4 0 days 0:00:00.031
31:16ac 0 days 0:00:00.015
14:4ac 0 days 0:00:00.015
2:186c 0 days 0:00:00.015
59:590 0 days 0:00:00.000
58:294 0 days 0:00:00.000
57:16d0 0 days 0:00:00.000
56:1578 0 days 0:00:00.000
55:1428 0 days 0:00:00.000
54:16d8 0 days 0:00:00.000
53:fd8 0 days 0:00:00.000
43:1b8c 0 days 0:00:00.000
42:1c24 0 days 0:00:00.000
41:1e2c 0 days 0:00:00.000
40:11b0 0 days 0:00:00.000
39:edc 0 days 0:00:00.000
38:1a08 0 days 0:00:00.000
37:171c 0 days 0:00:00.000
35:1254 0 days 0:00:00.000
32:1f9c 0 days 0:00:00.000
30:1ae8 0 days 0:00:00.000
27:190c 0 days 0:00:00.000
24:1d2c 0 days 0:00:00.000
19:1e38 0 days 0:00:00.000
18:ee4 0 days 0:00:00.000
17:fb8 0 days 0:00:00.000
13:1b54 0 days 0:00:00.000
12:1a48 0 days 0:00:00.000
10:f64 0 days 0:00:00.000
9:1024 0 days 0:00:00.000
8:1b78 0 days 0:00:00.000
&lt;/code>&lt;/pre>
&lt;p>你可以看到运行线程的总时间和使用.time命令看到的总cpu使用时间并不相等。原因很简单，因为线程被重复使用或回收了。这也意味着一个线程的CPU使用时间可能是处理多个请求的结果。&lt;/p>
&lt;p>&lt;strong>!threads&lt;/strong>&lt;/p>
&lt;p>!threads显示当前所有的托管线程信息。输出如下：&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; !threads
ThreadCount: 48
UnstartedThread: 0
BackgroundThread: 29
PendingThread: 0
DeadThread: 19
Hosted Runtime: no
PreEmptive GC Alloc Lock
ID OSID ThreadOBJ State GC Context Domain Count APT Exception
16 1 1bc0 001fccd0 1808220 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
22 2 d8c 002016f0 b220 Enabled 00000000:00000000 0019daf0 0 MTA (Finalizer)
14 4 4ac 00242e58 880a220 Enabled 00000000:00000000 0019daf0 0 MTA (Threadpool Completion Port)
23 5 14a4 11b39f18 80a220 Enabled 00000000:00000000 0019daf0 0 MTA (Threadpool Completion Port)
24 6 1d2c 11b41ad8 1220 Enabled 00000000:00000000 0019daf0 0 Ukn
25 7 1a94 11b46c70 180b220 Enabled 27240c98:27241fd8 11b42540 1 MTA (Threadpool Worker)
26 9 13ec 12ce2888 200b220 Enabled 2a9f1434:2a9f33c0 11b42540 0 MTA
27 a 190c 12d85eb8 200b220 Enabled 00000000:00000000 11b42540 0 MTA
29 b 1f5c 13df6a50 200b220 Enabled 2ab1da6c:2ab1f1c0 11b42540 0 MTA
30 c 1ae8 12d44a58 b220 Enabled 00000000:00000000 11b42540 0 MTA
31 d 16ac 12e2e008 200b220 Enabled 2a81348c:2a8153c0 11b42540 1 MTA
5 e 1c78 12da2160 220 Enabled 00000000:00000000 0019daf0 0 Ukn
33 8 78c 11b674c8 200b220 Enabled 2707b818:2707c1d8 11b42540 0 MTA
34 12 1a8c 13f163c8 220 Enabled 00000000:00000000 0019daf0 0 Ukn
36 13 4a4 13eef718 200b220 Enabled 2a7db4a4:2a7dd3c0 11b42540 0 MTA
4 14 5ac 13ef2008 220 Enabled 00000000:00000000 0019daf0 0 Ukn
42 10 1c24 13f0e950 880b220 Enabled 00000000:00000000 0019daf0 0 MTA (Threadpool Completion Port)
6 11 e28 13f16008 220 Enabled 00000000:00000000 0019daf0 0 Ukn
3 f 13b4 13eba008 220 Enabled 00000000:00000000 0019daf0 0 Ukn
43 15 1b8c 140db008 880b220 Enabled 00000000:00000000 0019daf0 0 MTA (Threadpool Completion Port)
44 17 131c 140ceb28 200b220 Enabled 272288c8:27229fd8 11b42540 0 MTA
45 1d 5dc 140cd0a0 220 Enabled 00000000:00000000 0019daf0 0 Ukn
47 20 19c8 1651a008 220 Enabled 00000000:00000000 0019daf0 0 Ukn
XXXX 24 0 16468880 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
46 1f 1dac 1650ab48 220 Enabled 00000000:00000000 0019daf0 0 Ukn
XXXX 1a 0 140d5008 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 16 0 140c5008 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
50 3 1e8c 14064420 180b220 Enabled 27246f54:27247fd8 11b42540 1 MTA (Threadpool Worker)
XXXX 35 0 1406e800 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
51 36 1340 140df008 180b220 Enabled 2adec9cc:2aded1c0 11b42540 1 MTA (Threadpool Worker)
XXXX 37 0 16566868 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
48 38 cdc 16578840 220 Enabled 00000000:00000000 0019daf0 0 Ukn
XXXX 39 0 16566c28 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 3b 0 1646b8b0 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 3c 0 16674008 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 3d 0 16676418 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 3e 0 16676fb8 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 3f 0 16674d48 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 40 0 1667de10 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 41 0 16680050 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 42 0 166812e8 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 43 0 16683e60 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
52 44 1e40 165259e8 180b220 Enabled 2adf126c:2adf31c0 11b42540 1 MTA (Threadpool Worker)
XXXX 45 0 165b7c08 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 46 0 165aa3d8 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 47 0 165242c8 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
XXXX 48 0 165e9500 1801820 Enabled 00000000:00000000 0019daf0 0 Ukn (Threadpool Worker)
49 3a 1eac 165676f0 220 Enabled 00000000:00000000 0019daf0 0 Ukn
&lt;/code>&lt;/pre>
&lt;p>线程ID为XXXX表示该线程已结束，并在等待回收。我们也能看到线程ID为22的线程正在终结(finalizer)。假如我们使用!runaway命令时看到22线程有大量的cpu活动，可能我们的程序有终结(finalizer)问题。&lt;/p>
&lt;p>&lt;strong>切换到指定线程&lt;/strong>&lt;/p>
&lt;p>要切换到指定的线程，可以使用下面的格式命令：~[thread id]s，假如我们要切换到50线程，命令如下：&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; ~50s
&lt;/code>&lt;/pre>
&lt;p>现在我们已切换到线程50，可以使用很多其他有用的命令。&lt;/p>
&lt;p>&lt;strong>!clrstack&lt;/strong>
!clrstack显示当前线程的堆栈信息，通过指定“-p”参数，还能看到方法调用的参数和局部变量信息。
下面是线程50的堆栈信息：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !clrstack
OS Thread Id: 0x1e8c (50)
ESP EIP
17a9e750 7d61c828 [NDirectMethodFrameSlim: 17a9e750] System.DirectoryServices.Protocols.Wldap32.ldap_bind_s(IntPtr, System.String, System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX, System.DirectoryServices.Protocols.BindMethod)
17a9e768 14df70f9 System.DirectoryServices.Protocols.LdapConnection.BindHelper(System.Net.NetworkCredential, Boolean)
17a9e794 14df6de0 System.DirectoryServices.Protocols.LdapConnection.Bind()
17a9e79c 14df59e9 System.DirectoryServices.Protocols.LdapConnection.SendRequestHelper(System.DirectoryServices.Protocols.DirectoryRequest, Int32 ByRef)
17a9e8b8 14df56e8 System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest, System.TimeSpan)
17a9e8bc 14df5657 [InlinedCallFrame: 17a9e8bc]
&lt;/code>&lt;/pre>
&lt;p>从下向上看，我们能知道LdapConnection调用了SendRequest方法，而SendRequest又调用了SendRequestHelper方法等等。
如果我们执行“!clrstack -p”命令，我们得到信息：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !clrstack -p
OS Thread Id: 0x1e8c (50)
ESP EIP
17a9e750 7d61c828 [NDirectMethodFrameSlim: 17a9e750] System.DirectoryServices.Protocols.Wldap32.ldap_bind_s(IntPtr, System.String, System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX, System.DirectoryServices.Protocols.BindMethod)
17a9e768 14df70f9 System.DirectoryServices.Protocols.LdapConnection.BindHelper(System.Net.NetworkCredential, Boolean)
PARAMETERS:
this = 0x271fdfe0
newCredential =
needSetCredential =
17a9e794 14df6de0 System.DirectoryServices.Protocols.LdapConnection.Bind()
PARAMETERS:
this =
17a9e79c 14df59e9 System.DirectoryServices.Protocols.LdapConnection.SendRequestHelper(System.DirectoryServices.Protocols.DirectoryRequest, Int32 ByRef)
PARAMETERS:
this = 0x271fdfe0
request = 0x27246e38
messageID = 0x17a9e8ec
17a9e8b8 14df56e8 System.DirectoryServices.Protocols.LdapConnection.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest, System.TimeSpan)
PARAMETERS:
this = 0x271fdfe0
request = 0x27246e38
requestTimeout =
17a9e8bc 14df5657 [InlinedCallFrame: 17a9e8bc]
&lt;/code>&lt;/pre>
&lt;p>我们可以看到DirectoryRequest参数传递给了SendRequest和SendRequestHelper，要查看DirectoryRequest的相关信息，我们只需复制它的地址（0x27246e38），并在下个命令中使用。&lt;/p>
&lt;p>&lt;strong>!dumpobject (!do)&lt;/strong>
这是另外一个重要的命令。Dumpobject会打印出指定地址的对象的相关信息。我们使用刚才的地址试下:&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !do 0x27246e38
Name: System.DirectoryServices.Protocols.SearchRequest
MethodTable: 14b394c4
EEClass: 14d97ce0
Size: 52(0x34) bytes
GC Generation: 0
(C:\WINDOWS\assembly\GAC_MSIL\System.DirectoryServices.Protocols\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.Protocols.dll)
Fields:
MT Field Offset Type VT Attr Value Name
02c39310 4000102 4 System.String 0 instance 00000000 directoryRequestID
14b398bc 4000103 8 ...ControlCollection 0 instance 27246e90 directoryControlCollection
02c39310 4000111 c System.String 0 instance 27246d00 dn
12579f5c 4000112 10 ....StringCollection 0 instance 27246eb4 directoryAttributes
02c36ca0 4000113 14 System.Object 0 instance 27246ddc directoryFilter
14b39344 4000114 18 System.Int32 1 instance 1 directoryScope
14b393fc 4000115 1c System.Int32 1 instance 0 directoryRefAlias
0fd3da00 4000116 20 System.Int32 1 instance 0 directorySizeLimit
1202af88 4000117 28 System.TimeSpan 1 instance 27246e60 directoryTimeLimit
120261c8 4000118 24 System.Boolean 1 instance 0 directoryTypesOnly
&lt;/code>&lt;/pre>
&lt;p>通过打印的信息，可以知道它是System.DirectoryServices.Protocols.SearchRequest的一个对象，而显示的都是 System.DirectoryServices.Protocols.SearchRequest的属性值。要知道SearchRequest类的相关属性信息，可以&lt;a class="link" href="http://msdn2.microsoft.com/en-us/library/system.directoryservices.protocols.searchrequest_properties.aspx" target="_blank" rel="noopener"
>查看MSDN&lt;/a>。当前我们已有RequestId, Scope和DistinguishedName等等。
所以，假如我们想知道SearchRequest对象的DistinguishedName属性值，即是上面列表中的dn，我们只需再复制它的地址（27246d00），并再次使用!dumpobject命令。因为DistinguishedName是System.String类型，所以输出结果很明显：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !do 27246d00
Name: System.String
MethodTable: 02c39310
EEClass: 0fb610ac
Size: 112(0x70) bytes
GC Generation: 0
(C:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089\mscorlib.dll)
String: CN=Dummy,CN=Accounts,CN=useradm,DC=dummy,DC=net
Fields:
MT Field Offset Type VT Attr Value Name
0fd3da00 4000096 4 System.Int32 1 instance 48 m_arrayLength
0fd3da00 4000097 8 System.Int32 1 instance 47 m_stringLength
0fb80010 4000098 c System.Char 1 instance 43 m_firstChar
02c39310 4000099 10 System.String 0 shared static Empty
&amp;gt;&amp;gt; Domain:Value 0019daf0:03380310 11b42540:03380310 &amp;lt;&amp;lt; 0fb86d44 400009a 14 System.Char[] 0 shared static WhitespaceChars &amp;gt;&amp;gt; Domain:Value 0019daf0:03380324 11b42540:033855bc &amp;lt;&amp;lt;
&lt;/code>&lt;/pre>
&lt;p>通过输出的信息我们很容易知道DistinguishedName属性的值是“CN=Dummy,CN=Accounts,CN=useradm,DC=dummy,DC=net”。如果我们想查看更多内容，只需继续使用!dumpobject命令即可。&lt;/p>
&lt;p>&lt;strong>!dumpstackobjects (!dso)&lt;/strong>
使用该命令我们可以查看到当前线程的堆栈引用的所有托管对象。打印信息如下：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dso
OS Thread Id: 0x1e8c (50)
ESP/REG Object Name
17a9e534 0741f860 System.RuntimeType
17a9e6b8 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e6bc 27246f20 System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX
17a9e740 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e744 27246f20 System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX
17a9e764 27246f20 System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX
17a9e768 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e780 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e784 27246e38 System.DirectoryServices.Protocols.SearchRequest
17a9e794 271fdf14 System.DirectoryServices.Protocols.LdapDirectoryIdentifier
17a9e7a8 27246ef8 System.Collections.ArrayList
17a9e7bc 27246ef8 System.Collections.ArrayList
17a9e7c8 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e8a4 27246e38 System.DirectoryServices.Protocols.SearchRequest
17a9e8d0 27246ed8 System.Object[] (System.Object[])
17a9e8e0 073ff6b8 System.String cn
17a9e8e4 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e8f4 27246d00 System.String CN=Dummy,CN=Accounts,CN=useradm,DC=Dummy,DC=net
17a9e8f8 271fdfe0 System.DirectoryServices.Protocols.LdapConnection
17a9e8fc 27246e38 System.DirectoryServices.Protocols.SearchRequest
17a9e910 03380310 System.String
17a9e914 27246e24 System.Object[] (System.String[])
17a9e918 272399a8 System.String CN=OID-Dummy-ABC123,CN=Dummy,CN=Accounts,CN=useradm,DC=Dummy,DC=net
17a9e91c 27246ddc System.String (CN=OID-Dummy-ABC123)
...etc...
&lt;/code>&lt;/pre>
&lt;p>这个命令对于查找当前线程引用了那些对象很有用。假如你想查看某一对象，只需复制[Object]字段的地址，并使用 !dumpobject命令：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !do 271fdfe0
Name: System.DirectoryServices.Protocols.LdapConnection
MethodTable: 14a2040c
EEClass: 149daf08
Size: 56(0x38) bytes
(C:\WINDOWS\assembly\GAC_MSIL\System.DirectoryServices.Protocols\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.Protocols.dll)
Fields:
MT Field Offset Type VT Attr Value Name
14a2078c 40000c3 4 ...NetworkCredential 0 instance 00000000 directoryCredential
14a2144c 40000c4 8 ...ificateCollection 0 instance 271fe018 certificatesCollection
1202af88 40000c5 10 System.TimeSpan 1 instance 271fdff0 connectionTimeOut
1466fe50 40000c6 c ...rectoryIdentifier 0 instance 271fdf14 directoryIdentifier
14a2034c 4000236 24 System.Int32 0 instance 2 connectionAuthType
14a223a4 4000237 18 ...dapSessionOptions 0 instance 271fe2d8 options
0fb896d8 4000238 28 System.IntPtr 0 instance 564180944 ldapHandle
120261c8 4000239 2c System.Boolean 0 instance 0 disposed
120261c8 400023a 2d System.Boolean 0 instance 0 bounded
120261c8 400023b 2e System.Boolean 0 instance 0 needRebind
14a22084 400023e 1c ...pResponseCallback 0 instance 271fe03c fd
120261c8 4000243 2f System.Boolean 0 instance 0 setFQDNDone
120261c8 4000244 30 System.Boolean 0 instance 1 automaticBind
120261c8 4000245 31 System.Boolean 0 instance 1 needDispose
120261c8 4000246 32 System.Boolean 0 instance 1 connected
14a2267c 4000247 20 ...s.QUERYCLIENTCERT 0 instance 271fe394 clientCertificateRoutine
0fd314bc 400023c 20 ...ections.Hashtable 0 shared static handleTable
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe504 &amp;lt; &amp;lt;
02c36ca0 400023d 24 System.Object 0 shared static objectLock
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe53c &amp;lt; &amp;lt;
0fd314bc 400023f 28 ...ections.Hashtable 0 shared static asyncResultTable
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe610 &amp;lt; &amp;lt;
14a21864 4000240 2c ...lResultsProcessor 0 shared static partialResultsProcessor
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe678 &amp;lt; &amp;lt;
12305e94 4000241 30 ....ManualResetEvent 0 shared static waitHandle
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe64c &amp;lt; &amp;lt;
14a21954 4000242 34 ...lResultsRetriever 0 shared static retriever
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:073fe6a8 &amp;lt; &amp;lt;
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>!dumparray (!da)&lt;/strong>
你可能已经注意到有很多对象数组在堆栈中，在上面的列表中查找System.Object[]类型就能找到。如果你对对象数组使用 !dumpobject命令，你只能看到数组信息，而不能看到数组的内容信息，要看到数组内容信息，就需要使用!dumparray命令，或简称!da:&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !do 27239b98
Name: System.Object[]
MethodTable: 02c3896c
EEClass: 02c388ec
Size: 24(0x18) bytes
Array: Rank 1, Number of elements 2, Type CLASS
Element Type: System.String
Fields:
None
0:050&amp;gt; !da 27239b98
Name: System.String[]
MethodTable: 02c3896c
EEClass: 02c388ec
Size: 24(0x18) bytes
Array: Rank 1, Number of elements 2, Type CLASS
Element Methodtable: 02c39310
[0] 272399a8
[1] 27239a44
&lt;/code>&lt;/pre>
&lt;p>通过!dumparray命令我们能知道该数组对象是字符串数组，并给出了数组项的地址。再使用!dumpobject命令我们就能看到数组项的具体内容。&lt;/p>
&lt;p>&lt;strong>!objsize&lt;/strong>
如果你查看上面打印的信息，可以看到对象的大小是24字节。从某方面来说，这是对的，24字节是System.Object[]数组对象本身大小，但并不包括数组内容的大小!要获得整个对象的大小，就要使用到 !objsize命令:&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !objsize 27239b98
sizeof(27239b98) =          348 (       0x15c) bytes (System.Object[])
&lt;/code>&lt;/pre>
&lt;p>!objsize会遍历对象引用的所有子对象，并计算出总的大小。如上面数组对象和它的内容的总大小是348字节。
如果对象有引用很多子对象，那么!objsize会花费较多的时间计算出总大小。&lt;/p>
&lt;p>&lt;strong>!dumpheap&lt;/strong>
这是另一个较频繁使用的命令。!dumpheap会打印出所有在托管堆中的对象信息。直接执行该命令会打印出大量的信息，所以一般使用时都至少带上一个参数。加上-stat参数后会输出总结后的信息，如下面是截取的是!dumpheap -stat命令输出的一部分:&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dumpheap -stat
------------------------------
Heap 0
total 2754508 objects
------------------------------
Heap 1
total 2761329 objects
------------------------------
total 5515837 objects
Statistics:
      MT    Count    TotalSize Class Name
16e0a6d8        1           12 System.Collections.Generic.ObjectEqualityComparer`1[[System.Data.ProviderBase.DbConnectionInternal, System.Data]]
16d9cd9c        1           12 System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode
16d9bf30        1           12 System.Diagnostics.OrdinalCaseInsensitiveComparer
16d9112c        1           12 System.Xml.Serialization.NameTable
16d7f664        1           12 System.Xml.Serialization.TempAssemblyCache
163ea85c        1           12 System.Data.Res
1501e4c4        1           12 System.Collections.Generic.ObjectEqualityComparer`1[[System.Web.UI.Control, System.Web]]
14efb138        1           12 System.Net.TimeoutValidator
14ef9964        1           12 System.Net.Cache.HttpRequestCacheLevel
14ef77a8        1           12 Microsoft.Win32.WinInetCache
14ef68e4        1           12 System.Net.WebRequest+WebProxyWrapper
14ef658c        1           12 System.Net.Configuration.ProxyElement+BypassOnLocalValues
14ef63d8        1           12 System.Net.Configuration.ProxyElement+AutoDetectValues
14ef5b68        1           12 System.Net.CaseInsensitiveAscii
14ef5610        1           12 System.Net.HeaderInfoTable
14ef4718        1           12 System.Net.HttpRequestCreator
14db6710        1           12 System.Web.Configuration.MachineKeyValidationConverter
14db3140        1           12 System.Collections.Generic.ObjectEqualityComparer`1[[System.Runtime.Serialization.MemberHolder, mscorlib]]
14b3f4d8        1           12 System.Web.UI.SupportsEventValidationAttribute
...etc...
14a276a8    19578       704808 System.DirectoryServices.Interop.AdsValueHelper
14a2ea24     9196       735680 System.Web.UI.WebControls.Label
14a2e51c    16862       741928 System.Web.UI.WebControls.Style
125778ec    48015       768240 System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry
120261c8    65842       790104 System.Boolean
14a2ee7c     9198       809424 System.Web.UI.WebControls.Table
14b311c4     9647       810348 System.Web.UI.WebControls.Image
13a2b7dc    34913       837912 System.Web.HttpServerVarsCollectionEntry
14b303a4    10605       848400 System.Web.UI.WebControls.HyperLink
14d8e3d4    77748       932976 Microsoft.Web.UI.WebControls.BaseChildNodeCollection+ActionType
14db90ac    81372       976464 System.Web.UI.WebControls.FontInfo
14b30694    28648      1031328 System.Web.UI.WebControls.TableRow+CellControlCollection
14d8fdbc    38912      1089536 Microsoft.Web.UI.WebControls.TreeNodeCollection
14b3d0bc    86592      1385472 System.Web.UI.Pair
1466c5c4    39305      1414980 System.Web.UI.ControlCollection
14d8e48c    77748      1865952 Microsoft.Web.UI.WebControls.BaseChildNodeCollection+Action
1545061c    38874      2176944 Microsoft.Web.UI.WebControls.TreeNode
14b30eec    52668      2317392 System.Web.UI.WebControls.TableItemStyle
14a2f804    28515      2395260 System.Web.UI.WebControls.TableRow
14a2be6c    40894      2453640 System.Web.UI.LiteralControl
0fd3da00   228792      2745504 System.Int32
14b3e3ac   244793      2937516 System.Web.UI.IndexedString
14a2de94   198580      3177280 System.Web.UI.StateBag
1466c454    80512      3542528 System.Web.UI.Control+OccasionalFields
12302c2c   205849      4116980 System.Collections.Specialized.HybridDictionary
14b30024    52934      4446456 System.Web.UI.WebControls.TableCell
12302f2c   178294      4992232 System.Collections.Specialized.ListDictionary
14a2e284   412762      6604192 System.Web.UI.StateItem
14d8ce64   117078      7024680 Microsoft.Web.UI.WebControls.CssCollection
0fd314bc   132065      7395640 System.Collections.Hashtable
1230319c   422580      8451600 System.Collections.Specialized.ListDictionary+DictionaryNode
1202a58c   380438      9130512 System.Collections.ArrayList
0fd32050   133000     22582944 System.Collections.Hashtable+bucket[]
02c3896c   649842     23275900 System.Object[]
0fd3c12c     3471     36385536 System.Byte[]
001fee20      338     65409920      Free
02c39310   683083    161821000 System.String
Total 5515837 objects
Fragmented blocks larger than 0.5 MB:
    Addr     Size      Followed by
2adf31cc    2.0MB         2aff85d8 System.String
2b006a2c   20.3MB         2c4530d8 System.Net.SocketAddress
&lt;/code>&lt;/pre>
&lt;p>输出信息按对象类型的总大小升序排序，你一般可以在列表的最下面找到string对象的大小，因为字符串在程序中一般是最常用的。
其他比较有用的参数是-type和-mt（MethodTable的意思）。使用它们你可以查看指定对象类型的详细信息，例如假如我们想查看System.Net.HttpRequestCreator类型的具体信息，可以复制上面列表中它的MT字段地址（14ef4718），然后使用 !dumpheap -mt命令：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dumpheap -mt 14ef4718
------------------------------
Heap 0
Address MT Size
0342ccf8 14ef4718 12
total 1 objects
------------------------------
Heap 1
Address MT Size
total 0 objects
------------------------------
total 1 objects
Statistics:
MT Count TotalSize Class Name
14ef4718 1 12 System.Net.HttpRequestCreator
&lt;/code>&lt;/pre>
&lt;p>上面列出了所有System.Net.HttpRequestCreator类型的对象的地址，假如我们想查看指定对象的信息，再使用!dumpobject命令就可以了。
!dumpheap -type可以根据字符串来匹配对应的对象类型。如我们输入命令“!dumpheap -type System.Web”，是指显示所有类名包含有“System.Web”字符串的对象信息。
其他参数-min和-max是接受表示对象大小的最大值和最小值（单位字节），命令会只列出大于指定值或小于指定值的对象信息。这两个参数对于查找滥用字符串问题很有帮助。&lt;/p>
&lt;p>&lt;strong>实战训练&lt;/strong>
&lt;strong>查明缓存使用的大小&lt;/strong>
为了知道在System.Web.Caching.Cache类型中有多少数据，我执行了“ !dumpheap -stat -type System.Web.Caching.Cache”命令。注意，我用了-stat参数，否则我会得到一个包含有System.Web.Caching.CacheKeys和System.Web.Caching.CacheEntrys对象的很长的列表。下面的执行结果：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dumpheap -type System.Web.Caching.Cache -stat
------------------------------
Heap 0
total 665 objects
------------------------------
Heap 1
total 1084 objects
------------------------------
total 1749 objects
Statistics:
MT Count TotalSize Class Name
123056f8 1 12 System.Web.Caching.CacheKeyComparer
1230494c 1 12 System.Web.Caching.Cache
1230500c 1 24 System.Web.Caching.CacheMultiple
1230514c 1 32 System.Web.Caching.CacheMemoryStats
123053b4 1 36 System.Web.Caching.CacheMemoryTotalMemoryPressure
123059bc 2 40 System.Web.Caching.CacheUsage
12304bdc 1 48 System.Web.Caching.CacheCommon
123054f4 1 52 System.Web.Caching.CacheMemoryPrivateBytesPressure
12305874 2 64 System.Web.Caching.CacheExpires
12304e64 2 200 System.Web.Caching.CacheSingle
1255b594 85 1360 System.Web.Caching.CacheDependency+DepFileInfo
123046c4 40 1440 System.Web.Caching.CacheDependency
123042ec 47 1504 System.Web.Caching.CacheItemRemovedCallback
123063fc 832 16640 System.Web.Caching.CacheKey
12306820 732 52704 System.Web.Caching.CacheEntry
Total 1749 objects
&lt;/code>&lt;/pre>
&lt;p>很明显System.Web.Caching.Cache的方法列表地址（MethodTable）是1230494c，再使用!dumpheap命令我就能看到它的所有对象信息，如下：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dumpheap -mt 1230494c
------------------------------
Heap 0
Address MT Size
03392d20 1230494c 12
total 1 objects
------------------------------
Heap 1
Address MT Size
total 0 objects
------------------------------
total 1 objects
Statistics:
MT Count TotalSize Class Name
1230494c 1 12 System.Web.Caching.Cache
Total 1 objects
&lt;/code>&lt;/pre>
&lt;p>可以看到System.Web.Caching.Cache类型只有一个对象，地址是03392d20，再通过!objsize命令就能计算出它的大小。因为缓存对象很复杂，并包含有大量的子对象，要计算出总大小需要花些时间：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !objsize 03392d20
sizeof(03392d20) = 266640828 ( 0xfe49dbc) bytes (System.Web.Caching.Cache)
&lt;/code>&lt;/pre>
&lt;p>所以缓存的总大小是 266 MB。&lt;/p>
&lt;p>&lt;strong>缓存了什么东西？&lt;/strong>
为了弄清缓存中保存了什么内容，我查看了System.Web.Caching.CacheEntry的对象信息。通过之前的信息可以知道System.Web.Caching.CacheEntry类型的方法列表(MethodTable)是12306820。执行!dumpheap命令取CacheEntry的所有对象信息：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !dumpheap -mt 12306820
------------------------------
Heap 0
Address MT Size
033950bc 12306820 72
033a20d8 12306820 72
033ac79c 12306820 72
033da21c 12306820 72
033f04c4 12306820 72
03428ec8 12306820 72
0344dab4 12306820 72
03815d00 12306820 72
038265d8 12306820 72
....etc...
03af7010 12306820 72
03b291bc 12306820 72
03b2c674 12306820 72
03b6dca0 12306820 72
03b797dc 12306820 72
03b85318 12306820 72
03ba9150 12306820 72
03c258cc 12306820 72
03de43c8 12306820 72
03e160f8 12306820 72
total 382 objects
------------------------------
total 732 objects
&lt;/code>&lt;/pre>
&lt;p>要显示上面的信息，也可以使用“!dumpheap -type System.Web.Caching.CacheEntry”命令。
有了所有CacheEntry对象的地址信息，我随机拿了一个地址查看它的内容：&lt;/p>
&lt;pre>&lt;code>0:050&amp;gt; !do 03b2c674
Name: System.Web.Caching.CacheEntry
MethodTable: 12306820
EEClass: 122f6470
Size: 72(0x48) bytes
(C:\WINDOWS\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll)
Fields:
MT Field Offset Type VT Attr Value Name
02c39310 4001327 4 System.String 0 instance 03b2c600 _key
0fb8f1f8 4001328 c System.Byte 0 instance 2 _bits
0fd3da00 4001329 8 System.Int32 0 instance -1314181915 _hashCode
02c36ca0 4001330 10 System.Object 0 instance 03b2c644 _value
120219d0 4001331 1c System.DateTime 1 instance 03b2c690 _utcCreated
120219d0 4001332 24 System.DateTime 1 instance 03b2c698 _utcExpires
1202af88 4001333 2c System.TimeSpan 1 instance 03b2c6a0 _slidingExpiration
0fb8f1f8 4001334 d System.Byte 0 instance 7 _expiresBucket
123062d8 4001335 34 ...g.ExpiresEntryRef 1 instance 03b2c6a8 _expiresEntryRef
0fb8f1f8 4001336 e System.Byte 0 instance 4294967295 _usageBucket
12306738 4001337 38 ...ing.UsageEntryRef 1 instance 03b2c6ac _usageEntryRef
120219d0 4001338 3c System.DateTime 1 instance 03b2c6b0 _utcLastUpdate
123046c4 4001339 14 ...g.CacheDependency 0 instance 00000000 _dependency
02c36ca0 400133a 18 System.Object 0 instance 033d8344 _onRemovedTargets
120219d0 400132d 1bc System.DateTime 1 shared static NoAbsoluteExpiration
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:03395104 &amp;lt; &amp;lt;
1202af88 400132e 1c0 System.TimeSpan 1 shared static NoSlidingExpiration
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:03395114 &amp;lt; &amp;lt;
1202af88 400132f 1c4 System.TimeSpan 1 shared static OneYear
&amp;gt;&amp;gt; Domain:Value 0019daf0:NotInit 11b42540:03395124 &amp;lt; &amp;lt;
&lt;/code>&lt;/pre>
&lt;p>输出的是CacheEntry的属性信息，里面最重要的是_value属性。我复制它的地址（03b2c644），再用!dumpobject命令查看：&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; !do 03e160c8
Name: System.Web.SessionState.InProcSessionState
MethodTable: 14dbad5c
EEClass: 14e43af8
Size: 48(0x30) bytes
(C:\WINDOWS\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll)
Fields:
MT Field Offset Type VT Attr Value Name
1466c9d8 4001d89 4 ...ateItemCollection 0 instance 1a7f5438 _sessionItems
1292672c 4001d8a 8 ...ObjectsCollection 0 instance 00000000 _staticObjects
0fd3da00 4001d8b c System.Int32 0 instance 20 _timeout
120261c8 4001d8c 18 System.Boolean 0 instance 0 _locked
120219d0 4001d8d 1c System.DateTime 1 instance 03e160e4 _utcLockDate
0fd3da00 4001d8e 10 System.Int32 0 instance 1 _lockCookie
1202bf60 4001d8f 24 ...ReadWriteSpinLock 1 instance 03e160ec _spinLock
0fd3da00 4001d90 14 System.Int32 0 instance 0 _flags
&lt;/code>&lt;/pre>
&lt;p>可以看到缓存的是一个InProcSessionState对象。&lt;/p>
&lt;p>&lt;strong>参考文章：&lt;/strong>
&lt;a class="link" href="http://blogs.msdn.com/b/johan/archive/2007/11/26/getting-started-with-windbg-part-ii.aspx" target="_blank" rel="noopener"
>Getting started with windbg - part I&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://blogs.msdn.com/b/johan/archive/2007/11/26/getting-started-with-windbg-part-ii.aspx" target="_blank" rel="noopener"
>Getting started with windbg - part II&lt;/a>&lt;/p></description></item><item><title>面向.NET开发人员的WinDbg入门教程</title><link>https://blog.xenori.com/2012/02/intro-to-windbg-for-dotnet-developers/</link><pubDate>Wed, 01 Feb 2012 08:28:43 +0000</pubDate><guid>https://blog.xenori.com/2012/02/intro-to-windbg-for-dotnet-developers/</guid><description>&lt;p>原文：&lt;a class="link" href="http://blogs.msdn.com/b/kaevans/archive/2011/04/11/intro-to-windbg-for-net-developers.aspx" target="_blank" rel="noopener"
>http://blogs.msdn.com/b/kaevans/archive/2011/04/11/intro-to-windbg-for-net-developers.aspx
&lt;/a> 翻译：bitxeno&lt;/p>
&lt;p>当你的代码发布为产品后，无论是在其他人的电脑中运行，还是部署到服务器中，你通常不再能访问到它的程序文件，也不能观察到代码的当前运行情况和运行环境。当你的代码在新的环境运行时，有很多因素会影响到程序的运行情况，如服务器系统打了更新补丁，网络策略改变，防火墙规则限制，磁盘权限配置等等。当代码运行不正常时，你可能只能靠代码中各处输出的日志来判断运行情况。但只靠输出日志，你有时还是不能判断故障出现的原因。&lt;/p>
&lt;p>在不浪费客户时间的同时做故障排除对你是个很大的挑战，因为不会有客户喜欢被一个搞技术的家伙不断问是点了那个按钮操作了哪些步骤导致程序出错的。boss也不会给你几天甚至几周的时间让你慢慢排除故障，你必须现在就知道到底发生了什么。&lt;/p>
&lt;p>理想情况下，你应该能看到堆栈跟踪，能查看到当前的变量值，能调试代码。事实证明你可以做到这点。。。而且不需要附加到客户环境中！&lt;/p>
&lt;p>&lt;strong>下载WinDbg&lt;/strong>
&lt;a class="link" href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;id=8279" target="_blank" rel="noopener"
> 下载Debugging Tools for Windows&lt;/a>到你的本地开发机中，windbg是其中的一部分，如果你只需要windbg，在可以在“&lt;em>Common Utilities&lt;/em>”中选择“&lt;em>Debugging Tools for Windows&lt;/em>&amp;ldquo;进入安装。安装程序会根据你电脑的cpu类型安装对应的windbg，x86的电脑会安装x86版本，x64的cpu电脑就会安装x64版。如果你选择的是“&lt;em>Redistributable Packages&lt;/em>“，就会为你下载全部三个版本（x86,x64,Itanium）。&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1emjvn9j20l00el41h.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>WinDbg默认会安装到c盘的“Program Files\Debugging Tools for Windows”文件夹下，建议你把安装目录复制到“d:\debug”，这样方便后面增加其他扩展组件。&lt;/p>
&lt;p>安装好后，目录下的windbg.exe就是windbg程序&lt;/p>
&lt;p>&lt;strong>安装PssCor2&lt;/strong>&lt;/p>
&lt;p>****下一步是加载托管代码扩展组件PssCor2。默认时，WinDbg只能用于调试非托管代码程序 ，而加载.net使用的SOS.dll扩展组件后，WinDbg就能调试托管程序了。WinDbg调试.net程序的另一个选择是PssCor2，它是SOS.dll的超集，并提供了一些面对托管代码的额外功能，如查看托管线程，托管堆，CLR堆栈等等。&lt;/p>
&lt;p>&lt;a class="link" href="http://www.microsoft.com/download/en/details.aspx?id=1073" target="_blank" rel="noopener"
>下载PssCor2&lt;/a>并解压到“d:\debug”，以方便后面的调试使用。&lt;/p>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1fetlpgj20k9096q42.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>&lt;strong>设定符号文件路径（Symbol Path）&lt;/strong>&lt;/p>
&lt;p>****当你使用Visual Studio编译程序时，是否有留意到在bin/Debug文件夹下会有.pdb后缀的文件？这些文件包含有dll程序集的调试符号，pdb文件并不包含有执行代码，只是使调试工具能把代码执行指令翻译为正确的可识别字符。微软提供了包含大量pdb文件的公共服务器，地址如下：&lt;/p>
&lt;p>&lt;a class="link" href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener"
>http://msdl.microsoft.com/download/symbols&lt;/a>&lt;/p>
&lt;p>在windbg中设定符号文件路径后，相关的pdb文件会自动从服务器下载下来并保存到本地。你首先需要指定一个pdb文件的保存路径，如“d:\debug\symbols”。&lt;/p>
&lt;p>&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1g54ge9j20h207zta1.jpg"
loading="lazy"
alt="windbg tutorial"
>
打开windbg程序，选择“File-&amp;gt;Symbol File Path…“，把下面的内容复制进去保存。&lt;/p>
&lt;pre>&lt;code>srv*d:\debug\symbols*http://msdl.microsoft.com/download/symbols
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="http://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1gqvwzcj20fv05tdg6.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>&lt;strong>创建测试程序&lt;/strong>&lt;/p>
&lt;p>我们先创建一个简单的命令行程序用于测试：&lt;/p>
&lt;pre>&lt;code>using System;
namespace Microsoft.PFE.Samples
{
public class Program
{
static void Main()
{
Console.WriteLine(&amp;quot;Enter a message:&amp;quot;);
string input = Console.ReadLine();
Data d = new Data
{
ID = 5,
Message = input,
CurrentDateTime = System.DateTime.Now
};
Console.WriteLine(&amp;quot;You entered: &amp;quot; + d);
}
}
public class Data
{
public int ID {get; set;}
public string Message {get; set;}
public DateTime CurrentDateTime {get; set;}
public override string ToString()
{
Console.ReadLine();
return string.Format(&amp;quot;ID:{0} {1} at {2}&amp;quot;, ID, Message,
CurrentDateTime.ToLongTimeString());
}
}
}
&lt;/code>&lt;/pre>
&lt;p>因为PssCor2只能处理.Net 3.5以下的程序，所以在编译前需要先把程序的环境改为.Net 3.5。假如是调试.NET 4.0的程序，可以&lt;a class="link" href="http://www.microsoft.com/download/en/details.aspx?id=21255" target="_blank" rel="noopener"
>下载PssCor4&lt;/a>。编译运行程序，输入一个字符串，看程序是否运行正常。&lt;/p>
&lt;p>客户抱怨说不知道为什么程序需要按两次enter键。程序并不按我们的预期工作，我们必须找到具体的原因。作为一个简单的例子，我们能一眼看出代码中的ToString()方法中多了一次ReadLine()导致的，但我们这次试下用windbg找出问题所在。&lt;/p>
&lt;p>运行程序，输入一个字符串，按一次enter，当出现第二次输入提示时，不要动！我们处于捕捉问题的关键点，我们需要做一个dump文件。&lt;/p>
&lt;p>&lt;strong>创建dump文件&lt;/strong>&lt;/p>
&lt;p>****在windows7和windows2008中，可以在任务管理器中直接创建dump文件。只需打开任务管理器，右键进程名并选择“Create Dump File”。&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1h819trj20sg0cbn0n.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>dump文件创建成功后，我们会看到提示：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1ihkg7aj20sg0ca42h.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>dump文件是当前进程的内存快照，dump文件的大小会和进程使用的内存大小一样，为了减少体积，你可以使用压缩软件进行压缩。&lt;/p>
&lt;p>还有另外的工具可以创建dump文件，如&lt;a class="link" href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" target="_blank" rel="noopener"
>Process Explorer from SysInternals&lt;/a>，也只需要在任务管理中右键选择“Full Dump”。&lt;/p>
&lt;p>&lt;img src="http://ww2.sinaimg.cn/large/7ce4a9f6gw1e5q1j0grajj20fq0anwgj.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>ADPlus和DebugDiag也可以创建dump文件。ADPlus是windbg安装目录下的一个命令行程序，你可以用下面的命令创建一个dump文件：&lt;/p>
&lt;pre>&lt;code>Adplus -quiet -hang -p 4332 -o d:\debug
&lt;/code>&lt;/pre>
&lt;p>4332是进程id，任务管理器默认是不显示进程id的，要显示出来，需要在windows任务管理器选择“查看-&amp;gt;选择列”，勾选“PID（进程标识符）”。&lt;/p>
&lt;p>&lt;strong>开始使用WinDbg&lt;/strong>&lt;/p>
&lt;p>****现在我们有了程序dump文件，打开windbg程序，选择菜单“File-&amp;gt;Open Crash Dump”，并选择刚创建的dump文件，你会看到一些信息：&lt;/p>
&lt;pre>&lt;code>Loading Dump File [D:\debug\program6.dmp]
User Mini Dump File: Only registers, stack and portions of memory are available
Symbol search path is: srv*d:\debug\symbols*http://msdl.microsoft.com/download/symbols
Executable search path is:
Windows 7 Version 7600 MP (8 procs) Free x64
Product: WinNt, suite: SingleUserTS
Machine Name:
Debug session time: Sun Feb 6 10:43:57.000 2011 (GMT-6)
System Uptime: not available
Process Uptime: 0 days 1:05:48.000
.........................
ntdll!NtRequestWaitReplyPort+0xa:
00000000`76d2ff7a c3 ret
&lt;/code>&lt;/pre>
&lt;p>在上面的文字中，你可以看到dump文件的路径，符号文件的查找路径等信息。而程序最下方有个输入框，你可以在上面输入命令。&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/7ce4a9f6gw1e5q1jkayjcj20sg0dtjul.jpg"
loading="lazy"
alt="windbg tutorial"
>&lt;/p>
&lt;p>&lt;strong>显示模块&lt;/strong>&lt;/p>
&lt;p>让我们试下显示程序已加载了哪些模块。在窗口最下方的输入框中，输入“lm”命令。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; lm
start end module name
00000000`00120000 00000000`00128000 program (deferred)
00000000`742b0000 00000000`74379000 msvcr80 (deferred)
00000000`76ac0000 00000000`76bba000 user32 (deferred)
00000000`76bc0000 00000000`76cdf000 kernel32 (pdb symbols) d:\debug\symbols\kernel32.pdb\D5E268B5DD1048A1BFB011C744DD3DFA2\kernel32.pdb
00000000`76ce0000 00000000`76e8b000 ntdll (pdb symbols) d:\debug\symbols\ntdll.pdb\0F7FCF88442F4B0E9FB51DC4A754D9DE2\ntdll.pdb
000007fe`f3fb0000 000007fe`f4134000 mscorjit (deferred)
000007fe`f5030000 000007fe`f5f0b000 mscorlib_ni (deferred)
000007fe`f7650000 000007fe`f7ffe000 mscorwks (deferred)
000007fe`f8010000 000007fe`f80a0000 mscoreei (deferred)
000007fe`f80a0000 000007fe`f810f000 mscoree (deferred)
000007fe`fcb70000 000007fe`fcb7f000 CRYPTBASE (deferred)
000007fe`fcc40000 000007fe`fcc4f000 profapi (deferred)
000007fe`fcf20000 000007fe`fcf8b000 KERNELBASE (deferred)
000007fe`fd0e0000 000007fe`fd2e2000 ole32 (deferred)
000007fe`fd4d0000 000007fe`fd59a000 usp10 (deferred)
000007fe`fd6f0000 000007fe`fe476000 shell32 (deferred)
000007fe`fe480000 000007fe`fe4ae000 imm32 (deferred)
000007fe`fe840000 000007fe`fe84e000 lpk (deferred)
000007fe`fe9d0000 000007fe`feaab000 advapi32 (deferred)
000007fe`feb50000 000007fe`fec7e000 rpcrt4 (deferred)
000007fe`fec80000 000007fe`fecf1000 shlwapi (deferred)
000007fe`fed00000 000007fe`fed67000 gdi32 (deferred)
000007fe`fee10000 000007fe`fef19000 msctf (deferred)
000007fe`fef20000 000007fe`fefbf000 msvcrt (deferred)
000007fe`fefd0000 000007fe`fefef000 sechost (deferred)
&lt;/code>&lt;/pre>
&lt;p>在上面的模块列表中，你需要关注的是mscorwks是否存在，PssCor2只能用于.NET 3.5的程序，假如是.NET 4.0程序，就看不到mscorwks模块。&lt;/p>
&lt;p>对于SharePoint开发人员，假如你正在调试程序特性如 receivers 和 event 处理为什么不触发，lm将是很好用的命令。通过上面的列表，你能知道有哪些模块没加载进来，可能是配置不正确导致的，这样能大大地减少你查找问题的范围。对于ASP.NET开发人员，会有助于查找HttpModule不触发的原因，可能是web.config配置不正确。&lt;/p>
&lt;p>&lt;strong>加载PssCor2&lt;/strong>&lt;/p>
&lt;p>要把PssCor2扩展组件加载入windbg，需使用下面的命令：&lt;/p>
&lt;pre>&lt;code>.load d:\debug\psscor2\amd64\psscor2.dll
&lt;/code>&lt;/pre>
&lt;p>我的电脑是64位的，所以我加载了AMD64 版本的PssCor2.dll。加载的PssCor2版本必须和dump文件进程所在服务器的架构相一致，假如你是调试x86程序的dump文件，你就必须加载x86版本的PssCor2.dll。
输入下面的命令，以确认PssCor2是否加载成功：&lt;/p>
&lt;pre>&lt;code>!help
&lt;/code>&lt;/pre>
&lt;p>正确会输入下面的内容：&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; .load d:\debug\psscor2\amd64\psscor2.dll
0:000&amp;gt; !help
-------------------------------------------------------------------------------
PSSCOR is a debugger extension DLL designed to aid in the debugging of managed
programs. Functions are listed by category, then roughly in order of
importance. Shortcut names for popular functions are listed in parenthesis.
Type &amp;quot;!help &amp;quot; for detailed info on that function.
Object Inspection Examining code and stacks
----------------------------- -----------------------------
DumpObj (do) Threads
DumpArray (da) CLRStack
DumpStackObjects (dso) IP2MD
DumpAllExceptions (dae) BPMD
DumpHeap U
DumpVC DumpStack
GCRoot EEStack
ObjSize GCInfo
FinalizeQueue EHInfo
PrintException (pe) COMState
TraverseHeap
DumpField (df)
DumpDynamicAssemblies (dda)
GCRef
DumpColumnNames (dcn)
DumpRequestQueues
DumpUMService
Examining CLR data structures Diagnostic Utilities
----------------------------- -----------------------------
DumpDomain VerifyHeap
EEHeap DumpLog
Name2EE FindAppDomain
SyncBlk SaveModule
DumpThreadConfig (dtc) SaveAllModules (sam)
DumpMT GCHandles
DumpClass GCHandleLeaks
DumpMD VMMap
Token2EE VMStat
EEVersion ProcInfo
DumpModule StopOnException (soe)
ThreadPool MinidumpMode
DumpHttpRuntime FindDebugTrue
DumpIL FindDebugModules
PrintDateTime Analysis
DumpDataTables CLRUsage
DumpAssembly CheckCurrentException (cce)
RCWCleanupList CurrentExceptionName (cen)
PrintIPAddress VerifyObj
DumpHttpContext HeapStat
ASPXPages GCWhere
DumpASPNETCache (dac) ListNearObj (lno)
DumpSig
DumpMethodSig Other
DumpRuntimeTypes -----------------------------
ConvertVTDateToDate (cvtdd) FAQ
ConvertTicksToDate (ctd)
DumpRequestTable
DumpHistoryTable
DumpBuckets
GetWorkItems
DumpXmlDocument (dxd)
DumpCollection (dc)
Examining the GC history
-----------------------------
HistInit
HistStats
HistRoot
HistObj
HistObjFind
HistClear
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>mscordacwks.dll&lt;/strong>&lt;/p>
&lt;p>我喜欢在服务器中创建程序的dump文件，然后把dump文件转移到自己的windows7开发机上进行调试。假如服务器是Windows Server 2008 R2的操作系统，当我在本地开发机使用psscor2时，很容易遇到下面的错误：&lt;/p>
&lt;pre>&lt;code>CLRDLL: CLR DLL load disabled
Failed to load data access DLL, 0x80004005
Verify that 1) you have a recent build of the debugger (6.2.14 or newer)
2) the file mscordacwks.dll that matches your version of mscorwks.dll is
in the version directory
3) or, if you are debugging a dump file, verify that the file
mscordacwks___.dll is on your symbol path.
4) you are debugging on the same architecture as the dump file.
For example, an IA64 dump file must be debugged on an IA64
machine.
You can also run the debugger command .cordll to control the debugger's
load of mscordacwks.dll. .cordll -ve -u -l will do a verbose reload.
If that succeeds, the PSSCOR command should work on retry.
If you are debugging a minidump, you need to make sure that your executable
path is pointing to mscorwks.dll as well.
&lt;/code>&lt;/pre>
&lt;p>通过bing搜索发现一篇相关的博客文章&lt;a class="link" href="http://blogs.msdn.com/b/dougste/archive/2009/02/18/failed-to-load-data-access-dll-0x80004005-or-what-is-mscordacwks-dll.aspx" target="_blank" rel="noopener"
>how to work around the mscordacwks issue&lt;/a>，文章指出需要把服务器的mscordacwks文件拷贝到windbg程序目录下。mscordacwks在我的Windows Server 2008 R2服务器上的版本是4952，所以我把服务器上的mscordacwks拷贝到windbg目录，并重命名为“mscordacwks_AMD64_AMD64_2.0.50727.4952.dll“。mscordacwks在服务器的路径是“”C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscordacwks.dll”，假如你不知道正确的重命名规则，你可以输入下面的命令，输出会提示需要加载的mscordacwks命名。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; .cordll -ve -u -l
CLR DLL status: No load attempts
0:000&amp;gt; !threads
CLRDLL: C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\mscordacwks.dll:2.0.50727.3053 f:0
doesn't match desired version 2.0.50727.3625 f:0
CLRDLL: Unable to find mscordacwks_AMD64_AMD64_2.0.50727.4952.dll by mscorwks search
CLRDLL: Unable to find 'mscordacwks_AMD64_AMD64_2.0.50727.4952.dll' on the path
CLRDLL: Unable to get version info for 'd:\debug\symbols\mscorwks.dll\4E154C985a9000\mscordacwks_AMD64_AMD64_2.0.50727.4952.dll', Win32 error 0n87
CLRDLL: ERROR: Unable to load DLL mscordacwks_AMD64_AMD64_2.0.50727.4952.dll, Win32 error 0n87
Failed to load data access DLL, 0x80004005
Verify that 1) you have a recent build of the debugger (6.2.14 or newer)
2) the file mscordacwks.dll that matches your version of mscorwks.dll is
in the version directory
3) or, if you are debugging a dump file, verify that the file
mscordacwks___.dll is on your symbol path.
4) you are debugging on the same architecture as the dump file.
For example, an IA64 dump file must be debugged on an IA64
machine.
You can also run the debugger command .cordll to control the debugger's
load of mscordacwks.dll. .cordll -ve -u -l will do a verbose reload.
If that succeeds, the PSSCOR command should work on retry.
If you are debugging a minidump, you need to make sure that your executable
path is pointing to mscorwks.dll as well.
&lt;/code>&lt;/pre>
&lt;p>重命名后，再次输入上面的命令，会显示加载成功提示。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; .cordll -ve -u -l
CLR DLL status: Loaded DLL mscordacwks_AMD64_AMD64_2.0.50727.4952.dll
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>检查CRL堆栈&lt;/strong>&lt;/p>
&lt;p>要查看CLR堆栈内容，输入下面命令：&lt;/p>
&lt;pre>&lt;code>!clrstack
&lt;/code>&lt;/pre>
&lt;p>输出如下：&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; !clrstack
OS Thread Id: 0xa48 (0)
*** WARNING: Unable to verify checksum for mscorlib.ni.dll
Child-SP RetAddr Call Site
000000000012e910 000007fef5a910e9 DomainNeutralILStubClass.IL_STUB(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte*, Int32, Int32 ByRef, IntPtr)
000000000012ea30 000007fef5a91202 System.IO.__ConsoleStream.ReadFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte[], Int32, Int32, Int32, Int32 ByRef)
000000000012ea90 000007fef538065a System.IO.__ConsoleStream.Read(Byte[], Int32, Int32)
000000000012eaf0 000007fef53a28ca System.IO.StreamReader.ReadBuffer()
000000000012eb40 000007fef5a9435f System.IO.StreamReader.ReadLine()
000000000012eb90 000007ff0017015b System.IO.TextReader+SyncTextReader.ReadLine()
000000000012ebf0 000007fef791d502 Program.Main()
&lt;/code>&lt;/pre>
&lt;p>真棒！你现在可以看到堆栈的调用情况了。我们可以立即看到程序进入了Program.Main函数，调用Console.ReadLine并等待用户的输入。&lt;/p>
&lt;p>&lt;strong>结论&lt;/strong>&lt;/p>
&lt;p>本篇文章只是简单介绍windbg的使用，假如你想全局的了解windbg，并如何使用windbg做故障排除，可以看下Tess Ferrandez的视频教程“Debugging .NET Applications with WinDbg“。&lt;/p>
&lt;p>&lt;strong>扩展阅读：&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" target="_blank" rel="noopener"
>Process Explorer from SysInternals&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=5c068e9f-ebfe-48a5-8b2f-0ad6ab454ad4" target="_blank" rel="noopener"
>PssCor2 Debugging Extension&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx" target="_blank" rel="noopener"
>Download the Debugging Tools for Windows&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://msdn.microsoft.com/en-us/library/bb190764.aspx" target="_blank" rel="noopener"
>SOS.dll (SOS Debugging Extension)&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://blogs.msdn.com/b/dougste/archive/2009/02/18/failed-to-load-data-access-dll-0x80004005-or-what-is-mscordacwks-dll.aspx" target="_blank" rel="noopener"
>“Failed to load data access DLL, 0x80004005” – OR – What is mscordacwks.dll?&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=28bd5941-c458-46f1-b24d-f60151d875a3&amp;amp;displaylang=en" target="_blank" rel="noopener"
>DebugDiag&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://blogs.msdn.com/b/johan/archive/2007/11/26/getting-started-with-windbg-part-ii.aspx" target="_blank" rel="noopener"
>Getting started with windbg - part I&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://blogs.msdn.com/b/johan/archive/2007/11/26/getting-started-with-windbg-part-ii.aspx" target="_blank" rel="noopener"
>Getting started with windbg - part II&lt;/a>&lt;/p></description></item><item><title>利用HAProxy实现零停机更新维护</title><link>https://blog.xenori.com/2012/01/zero-downtime-with-haproxy/</link><pubDate>Sat, 21 Jan 2012 08:04:49 +0000</pubDate><guid>https://blog.xenori.com/2012/01/zero-downtime-with-haproxy/</guid><description>&lt;p>&lt;a class="link" href="http://haproxy.1wt.eu/" target="_blank" rel="noopener"
>HAProxy&lt;/a>是linux平台上的负载均衡软件，有完善的服务器健康检测和会话(session)保持功能，性能高，支持tcp和http网络连接分发。&lt;/p>
&lt;h2 id="问题起因">&lt;strong>问题起因&lt;/strong>&lt;/h2>
&lt;p>入公司一年，我发现在ASP.NET网站上部署更新时，经常会遇到下面这样的烦恼：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>假如更新到bin文件夹下的dll文件，会引起iis的应用程序池重启，从而导致更新这段时间内，用户访问网站会非常缓慢，甚至出现页面超时。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署更新时要小心翼翼，祈祷上帝没少拷了什么文件，假如更新后网站出错，就只能心跳加速地快速还原系统&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编辑经常提一些需求只是简单更改下页面文字，而为了不使这种简单的更改引起应用程序池重启，一般部署网站时都是采用copy方式发布，而网站也工作在debug模式下，而不是更优化速度更快的release模式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>上面几种情况都很影响用户体验，也让每次更新时肾上激素上升。
要解决上面的烦恼，需要满足下面几个条件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>有至少两个以上的相同功能站点，当一个站点下线维护时，后续的请求能自动交给另一个站点处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有站点健康检测功能，可以一个个轮流地下线站点和上线站点，这过程中对用户的访问完全不受影响
应用HAProxy的负载均衡和服务器检测特性可以很好地解决上面的问题，最简单的负载均衡框架如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>                 192.168.1.2:8001
IP=192.168.1.1   192.168.1.2:8002   192.168.1.3
-------+-------------+-------+-----------+----
|             |       |          _|_db
+--+--+        +-+-+   +-+-+      (___)
|  LB |        | A |   | B |      (___)
+-----+        +---+   +---+      (___)
haproxy       2 cheap web sites
keepalived
&lt;/code>&lt;/pre>
&lt;p>192.168.1.1是一台linux服务器，运行着HAProxy。
192.168.1.2是一台windows服务器，iis上运行着两个相同的站点，端口分别设为8001/8002
192.168.1.3是数据库服务器&lt;/p>
&lt;h2 id="haproxy部署测试">&lt;strong>HAProxy部署测试&lt;/strong>&lt;/h2>
&lt;h3 id="安装haproxy">&lt;strong>安装HAProxy&lt;/strong>&lt;/h3>
&lt;p>在ubuntu中安装HAProxy很简单，执行下面的命令就能自动下载安装：&lt;/p>
&lt;pre>&lt;code>sudo apt-get install haproxy
&lt;/code>&lt;/pre>
&lt;p>假如ubuntu服务器上的不是最新版，你想安装最新版，可以到官网下载最新的tar压缩包，解压后进入该目录，执行下面的命令：&lt;/p>
&lt;pre>&lt;code>make install
&lt;/code>&lt;/pre>
&lt;h3 id="配置haproxy">&lt;strong>配置HAProxy&lt;/strong>&lt;/h3>
&lt;p>创建配置文件haproxy.cfg&lt;/p>
&lt;pre>&lt;code>mkdir /etc/haproxy
vim /etc/haproxy/haproxy.cfg
&lt;/code>&lt;/pre>
&lt;p>HAProxy提供了两种零停机维护方案，一种是定时检测指定文件的请求是否成功，不成功超过指定次数后，可认为服务器已停机，新进入的连接会自动分发到其他机器，另一种是使用备份服务器，下面只介绍最简单的第一种。
HAProxy实现服务器检测和负载均衡的简单配置如下：&lt;/p>
&lt;pre>&lt;code># this config needs haproxy-1.1.28 or haproxy-1.2.1
global
maxconn 4096
uid 99
gid 99
daemon
defaults
mode    http
timeout connect 5000ms
timeout client 50000ms
timeout server 50000ms
option redispatch
listen  http-in
bind *:80
balance roundrobin
option httpchk HEAD /deploy.txt HTTP/1.0
server server1 192.168.1.2:8001 check inter 2000 rise 2 fall 2
server server2 192.168.1.2:8002 check inter 2000 rise 2 fall 2
&lt;/code>&lt;/pre>
&lt;p>下面说下主要的几个配置项：
option redispatch：当之前连接的服务器宕机后，自动把连接分发到其他服务器
bind：监听指定的端口
balance roundrobin：以轮询的方式分发连接
option httpchk HEAD /deploy.txt HTTP/1.0：通过请求/deploy.txt文件来确定服务器健康情况
server server1 192.168.1.2:8001：指定分发的站点，server1可以是任意名称，在写log时使用
check inter 2000：表示服务器检测的间隔时间，2000指2秒，单位是毫秒
rise 2：表示服务器检测请求成功2次后，可认为站点已恢复，连接可以重新分发给它
fall 2：表示服务检测请求失败2次后，可认为站点已宕机，之后不会再分发连接给它&lt;/p>
&lt;p>详细的配置说明可以看&lt;a class="link" href="http://haproxy.1wt.eu/download/1.4/doc/configuration.txt" target="_blank" rel="noopener"
>HAProxy配置文档&lt;/a>&lt;/p>
&lt;h3 id="运行haproxy">&lt;strong>运行HAProxy&lt;/strong>&lt;/h3>
&lt;p>执行下面的命令检查配置是否正确：&lt;/p>
&lt;pre>&lt;code>haproxy -f /etc/haproxy/haproxy.cfg -c
&lt;/code>&lt;/pre>
&lt;p>运行haproxy：&lt;/p>
&lt;pre>&lt;code>haproxy -f /etc/haproxy/haproxy.cfg
&lt;/code>&lt;/pre>
&lt;h3 id="创建测试站点">&lt;strong>创建测试站点&lt;/strong>&lt;/h3>
&lt;p>在服务器192.168.1.2中，创建站点server1，server2，端口分别是8001，8002。
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1bvyxggj20a906b0td.jpg"
loading="lazy"
alt="HAProxy"
>
server1中创建default.htm网页，并输出内容：
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q1cqu34rj209101h742.jpg"
loading="lazy"
alt="HAProxy"
>
server2中创建default.htm网页，并输出内容：
&lt;img src="hhttp://ww3.sinaimg.cn/large/7ce4a9f6gw1e5q1d9w628j207q01fwea.jpg"
loading="lazy"
alt="HAProxy"
>
在server1和server2根目录都创建一个空白的deploy.txt文本文件，以便haproxy用来检测服务器健康情况.&lt;/p>
&lt;h3 id="测试">&lt;strong>测试&lt;/strong>&lt;/h3>
&lt;p>在浏览器中访问linux服务器的&lt;a class="link" href="http://192.168.1.1/" target="_blank" rel="noopener"
>http://192.168.1.1&lt;/a>地址，就能看到server1和server2的站点内容，每次刷新网页会轮流显示server1和server2的default.htm内容，因为现在是以轮询方式分发请求连接的。
尝试把server1中的deploy.txt文件重命名为deploy1.txt，重命名后因为haproxy检测deploy.txt时返回404，haproxy会认为是服务器有问题，当经过4秒后，重新刷新网页，可以看到网页只显示server2的网页内容。
重新把server1的deploy1.txt改回deploy.txt，静待4秒后再刷新网页，可以看到又能显示server1的网页内容了。&lt;/p>
&lt;p>参考资料：
&lt;a class="link" href="http://www.igvita.com/2008/12/02/zero-downtime-restarts-with-haproxy/?utm_source=feedburner&amp;amp;utm_campaign=Feed%3A&amp;#43;igvita&amp;#43;%28igvita.com%29&amp;amp;utm_content=feed" target="_blank" rel="noopener"
>Zero-Downtime Restarts with HAProxy&lt;/a>
&lt;a class="link" href="http://haproxy.1wt.eu/download/1.3/doc/architecture.txt" target="_blank" rel="noopener"
>HAProxy Architecture  Guide&lt;/a>&lt;/p></description></item><item><title>利用Eclipse+Scala搭建android开发环境</title><link>https://blog.xenori.com/2012/01/use-eclipse-scala-develop-android/</link><pubDate>Sat, 21 Jan 2012 07:06:00 +0000</pubDate><guid>https://blog.xenori.com/2012/01/use-eclipse-scala-develop-android/</guid><description>&lt;p>&lt;strong>1、安装JAVA SDK&lt;/strong>&lt;/p>
&lt;p>到官网（&lt;a class="link" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener"
>http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a> ）下载最新的javase sdk，推荐安装1.6版。安装完成后，在windows环境变量中添加[JAVA_HOME]，并把路径指向java sdk的安装根目录。&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;strong>2、安装Scala&lt;/strong>&lt;/p>
&lt;p>从scala官网（&lt;a class="link" href="http://www.scala-lang.org/downloads" target="_blank" rel="noopener"
>http://www.scala-lang.org/downloads&lt;/a> ）下载windows版的压缩包，推荐2.8.1 final版，直接解压到相应目录中，假设为c:\scala-2.8.1.final\，再添加下面两个环境变量：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>新增环境变量SCALA_HOME，并设为c:\scala-2.8.1.final&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在已有环境变量Path中，追加值c:\scala-2.8.1.final\bin&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>通过win-&amp;gt;run-cmd打开命令行，输入scala，能输出版本信息证明已安装成功&lt;/p>
&lt;p>&lt;strong>3、安装Eclipse&lt;/strong>&lt;/p>
&lt;p>到Eclipse官网（&lt;a class="link" href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener"
>http://www.eclipse.org/downloads/&lt;/a>）下载，直接解压就能使用，推荐下载Eclipse Classic/Eclipse For Java。&lt;/p>
&lt;p>&lt;strong>4、安装Android SDK&lt;/strong>&lt;/p>
&lt;p>到android开发社区(&lt;a class="link" href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener"
>http://developer.android.com/sdk/index.html&lt;/a>)下载安装。安装后进入&lt;strong>开始 &amp;gt; 所有程序 &amp;gt; Android SDK &amp;gt; SDK Manager&lt;/strong>程序，软件会提示一些可安装的更新，大家可以根据需要选择安装，建议安装下面图中所示的：&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/QQ%E4%BA%94%E7%AC%94%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D.png"
loading="lazy"
>&lt;/p>
&lt;p>之后是漫长的等待&amp;hellip;&lt;/p>
&lt;p>&lt;strong>装ADT Plugin for Eclipse&lt;/strong>
等待android sdk安装好后，打开Eclipse，进入菜单&lt;strong>Help&lt;/strong> &amp;gt; &lt;strong>Install New Software&amp;hellip;&lt;/strong>.，点击**Add，**添加链接&lt;/p>
&lt;pre>&lt;code>https://dl-ssl.google.com/android/eclipse/
&lt;/code>&lt;/pre>
&lt;p>勾选所有项目，然后点击Next安装。&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-2.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-3.jpg"
loading="lazy"
>&lt;/p>
&lt;p>安装完成并重启Eclipse后，进入菜单&lt;strong>Window &amp;gt; Preferences &amp;gt; Android&lt;/strong>，点击&lt;strong>Browser&lt;/strong>，把路径指向android sdk的安装目录，然后点击&lt;strong>Apply&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-6.jpg"
loading="lazy"
>
&lt;strong>6、安装Scala IDE Plugin&lt;/strong>
打开&lt;strong>Eclipse&lt;/strong>，进入菜单&lt;strong>Help&lt;/strong> &amp;gt; &lt;strong>Install New Software&amp;hellip;&lt;/strong>.，点击**Add，**添加链接&lt;/p>
&lt;pre>&lt;code>http://download.scala-ide.org/releases-28/2.0.0-beta
&lt;/code>&lt;/pre>
&lt;p>勾选安装下面两项：&lt;/p>
&lt;p>&lt;strong>JDT weaving For scala&lt;/strong>&lt;/p>
&lt;p>**Scala IDE for Eclipse **
&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-4.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-5.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;strong>7、安装Treesaker **
打开&lt;/strong>Eclipse**，进入菜单&lt;strong>Help&lt;/strong> &amp;gt; &lt;strong>Install New Software&amp;hellip;&lt;/strong>.，点击**Add，**添加链接&lt;/p>
&lt;pre>&lt;code>http://treeshaker.googlecode.com/svn/trunk/update_site/
&lt;/code>&lt;/pre>
&lt;p>勾选treeshaker,点击Next安装。&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-7.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-8.jpg"
loading="lazy"
>&lt;/p>
&lt;p>treeshaker是一个开源的辅助插件，详细可以访问项目地址：&lt;a class="link" href="http://code.google.com/p/treeshaker/" target="_blank" rel="noopener"
>http://code.google.com/p/treeshaker/&lt;/a>&lt;/p>
&lt;p>&lt;strong>8、简单的helloworld&lt;/strong>&lt;/p>
&lt;p>Eclipse中打开&lt;strong>File &amp;gt; New &amp;gt; Project &amp;gt; Android Project&lt;/strong>创建一个新的android工程项目：&lt;/p>
&lt;p>&lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-9.jpg"
loading="lazy"
>&lt;/p>
&lt;p>按下面的步骤把java的项目转为scala的项目：&lt;/p>
&lt;p>1、把src文件夹重命名为_src（右键src &amp;gt; Refactor &amp;gt; Rename)
2、右键HelloWorld项目 &amp;gt; Configure &amp;gt; Add Scala Nature
3、右键HelloWorld项目 &amp;gt; Add/Remove Treeshaker
4、打开菜单Project &amp;gt; Properties &amp;gt; Builders，确保builder的顺序和如下一样：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Android Resource Manager&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Android Pre Compiler&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scala Builder&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Treeshaker&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Android Package Builder&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>5、打开res\layout\main.xml，把下面的内容替换&lt;!-- raw HTML omitted -->中的内容：&lt;/p>
&lt;pre>&lt;code>&amp;lt;TextView
android:layout_width=&amp;quot;fill_parent&amp;quot;
android:layout_height=&amp;quot;wrap_content&amp;quot;
android:text=&amp;quot;@string/hello&amp;quot;
android:id=&amp;quot;@+id/text&amp;quot;
/&amp;gt;
&amp;lt;Button
android:id=&amp;quot;@+id/button&amp;quot;
android:layout_width=&amp;quot;wrap_content&amp;quot;
android:layout_height=&amp;quot;wrap_content&amp;quot;
android:text=&amp;quot;Click me&amp;quot;
/&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>5、删除_src下的源文件HelloWorldActivity.java 6、创建新的scala代码文件，右键包com.test，选择New &amp;gt; Other &amp;gt; Scala Class &lt;img src="http://images.cnblogs.com/cnblogs_com/vento/scala-android-10.jpg"
loading="lazy"
>Name设为HelloWorldActivty，Superclass设为android.app.Activity 7、修改HelloWorldActivity.scala文件： 增加导入：&lt;/p>
&lt;pre>&lt;code>import android.os.Bundle
import android.view.View
import android.widget.TextView
import android.widget.Button
import R._
&lt;/code>&lt;/pre>
&lt;p>HelloWorldAcitvity类中增加代码：&lt;/p>
&lt;pre>&lt;code>override def onCreate(savedInstanceState: Bundle) {
super.onCreate(savedInstanceState)
setContentView(R.layout.main)
val textView = findViewById(R.id.text).asInstanceOf[TextView]
val button = findViewById(R.id.button).asInstanceOf[Button]
button.setOnClickListener((v: View) =&amp;gt; textView.setText(&amp;quot;Hello Scala&amp;quot;))
}
implicit def func2OnClickListener(func : (View) =&amp;gt; Unit) : View.OnClickListener = {
return new View.OnClickListener() {
override def onClick(v: View) = func(v)
}
}
&lt;/code>&lt;/pre>
&lt;p>8、通过菜单Run &amp;gt; Run，应该能正常编译并在android模拟器中运行了&lt;/p>
&lt;p>扩展阅读：&lt;/p>
&lt;p>&lt;a class="link" href="http://code.google.com/p/treeshaker/wiki/CreateNewScalaProject" target="_blank" rel="noopener"
>CreateNewScalaProject&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.slideshare.net/papamitra/scalaandroid" target="_blank" rel="noopener"
>ScalaでAndroidアプリ開発 &lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.nevercertain.com/2011/02/18/scala-android-intellij-win-part-3.html" target="_blank" rel="noopener"
>Building Android Apps with Scala - IntelliJ &lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://lamp.epfl.ch/~michelou/android/" target="_blank" rel="noopener"
>Exploring Android With Scala&lt;/a>&lt;/p></description></item><item><title>使windows服务安装名称可配置</title><link>https://blog.xenori.com/2012/01/config-windows-services-install-name/</link><pubDate>Thu, 12 Jan 2012 07:42:04 +0000</pubDate><guid>https://blog.xenori.com/2012/01/config-windows-services-install-name/</guid><description>&lt;p>有时，我们安装的windows服务可能是个框架，在同一服务器上可能服务于不同的系统，为了使服务名称不冲突，需要把服务名称更改为可配置。
因为ServiceInstaller能直接设置安装服务的名称和描述，所以很容易就能写出下面的代码：&lt;/p>
&lt;pre>&lt;code>serviceInstaller.ServiceName = ConfigurationManager.AppSetting[&amp;quot;ServiceName&amp;quot;];
serviceInstaller.Description = ConfigurationManager.AppSetting[&amp;quot;ServiceDescription&amp;quot;];
&lt;/code>&lt;/pre>
&lt;p>编译执行安装，可惜抛出了异常，安装失败了。
&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/01/QQ%e4%ba%94%e7%ac%94%e6%88%aa%e5%9b%be%e6%9c%aa%e5%91%bd%e5%90%8d.png" target="_blank" rel="noopener"
>&lt;img src="http://bitxeno.me/wp-content/uploads/2012/01/QQ%e4%ba%94%e7%ac%94%e6%88%aa%e5%9b%be%e6%9c%aa%e5%91%bd%e5%90%8d.png"
loading="lazy"
>&lt;/a>
失败的原因是，执行安装服务的程序是InstallUtil.exe，安装阶段不会自动加载服务的app.config配置文件，只会加载全局的machine.config，需改为手动加载app.config并读取。
确定解决思路后，我写出了下面的代码：&lt;/p>
&lt;p>var targetDirectory = AppDomain.CurrentDomain.BaseDirectory;
var configPath = Path.Combine(targetDirectory, &amp;ldquo;Service.exe&amp;rdquo;);
var config = ConfigurationManager.OpenExeConfiguration(configPath);
serviceInstaller.ServiceName = config.AppSettings.Settings[&amp;ldquo;ServiceName&amp;rdquo;].Value;
serviceInstaller.Description = config.AppSettings.Settings[&amp;ldquo;ServiceDescription&amp;rdquo;].Value;&lt;/p>
&lt;p>再次编译运行，发现本机上安装成功了：），整个程序打包交给另一个同事在服务器上安装，发现安装过程又出错了。。。
过去看了一下，发现错误的原因是，本机安装时，InstallUtil程序我是放在和服务同一目录，而服务器上的InstallUtil是和服务在不同目录。看来AppDomain.CurrentDomain.BaseDirectory获取到的是InstallUtil的应用程序域目录路径，而不是服务的。
之后使用反射来解决了这个问题，代码如下：&lt;/p>
&lt;pre>&lt;code>var path = System.Reflection.Assembly.GetExecutingAssembly().Location;
var targetDirectory = System.IO.Path.GetDirectoryName(path);
var configPath = Path.Combine(targetDirectory, &amp;quot;Service.exe&amp;quot;);
var config = ConfigurationManager.OpenExeConfiguration(configPath);
serviceInstaller.ServiceName = config.AppSettings.Settings[&amp;quot;ServiceName&amp;quot;].Value;
serviceInstaller.Description = config.AppSettings.Settings[&amp;quot;ServiceDescription&amp;quot;].Value;
&lt;/code>&lt;/pre></description></item><item><title>获取客户端的真实ip代码改进</title><link>https://blog.xenori.com/2012/01/get-client-ip/</link><pubDate>Mon, 09 Jan 2012 07:39:49 +0000</pubDate><guid>https://blog.xenori.com/2012/01/get-client-ip/</guid><description>&lt;p>现在系统中常用的获取客户端真实ip的代码如下：&lt;/p>
&lt;pre>&lt;code>// 获取IP地址
protected string GetIPAddress()
{
string result = &amp;quot;&amp;quot;;
try
{
//透过代理取客户端ip
result = HttpContext.Current.Request.ServerVariables[&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;] ?? &amp;quot;&amp;quot;;
if (result == &amp;quot;&amp;quot;)
{
//连接主机ip
result = HttpContext.Current.Request.ServerVariables[&amp;quot;REMOTE_ADDR&amp;quot;] ?? &amp;quot;&amp;quot;;
}
if (result == &amp;quot;&amp;quot;)
{
result = HttpContext.Current.Request.UserHostAddress;
}
}
catch (Exception ex)
{
}
return result;
}
&lt;/code>&lt;/pre>
&lt;p>这段代码有两个问题：
1、根据&lt;a class="link" href="http://www.openinfo.co.uk/apache/index.html" target="_blank" rel="noopener"
>这篇文章&lt;/a>说明，当请求经常多个代理时，HTTP_X_FORWARDED_FOR可能会附加上多个服务器ip，格式如下：&lt;/p>
&lt;p>X-Forwarded-For: client1, proxy1, proxy2, &amp;hellip;&lt;/p>
&lt;p>正确的客户端ip应该只是第一个ip地址&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>2、当用户手机是用CMWAP访问网站时，上面代码返回的是10.xxx的私有网络ip，而真实的服务器ip是在REMOTE_ADDR中，如下图所示：
&lt;a class="link" href="http://bitxeno.me/wp-content/uploads/2012/01/serverip.jpg" target="_blank" rel="noopener"
>&lt;img src="http://bitxeno.me/wp-content/uploads/2012/01/serverip-300x238.jpg"
loading="lazy"
>&lt;/a>
所以对于获取来的ip，需要做是否私有网络ip的判断。所有私有网络的ip段如下：&lt;/p>
&lt;pre>&lt;code>private static readonly long[,] privateIpRange = { //私有网络ip段,长整形表示
{0,50331647}, //{&amp;quot;0.0.0.0&amp;quot;,&amp;quot;2.255.255.255&amp;quot;},
{167772160,184549375}, //{&amp;quot;10.0.0.0&amp;quot;,&amp;quot;10.255.255.255&amp;quot;},
{2130706432,2147483647}, //{&amp;quot;127.0.0.0&amp;quot;,&amp;quot;127.255.255.255&amp;quot;},
{2851995648,2852061183}, //{&amp;quot;169.254.0.0&amp;quot;,&amp;quot;169.254.255.255&amp;quot;},
{2886729728,2887778303}, //{&amp;quot;172.16.0.0&amp;quot;,&amp;quot;172.31.255.255&amp;quot;},
{3221225984,3221226239}, //{&amp;quot;192.0.2.0&amp;quot;,&amp;quot;192.0.2.255&amp;quot;},
{3232235520,3232301055}, //{&amp;quot;192.168.0.0&amp;quot;,&amp;quot;192.168.255.255&amp;quot;},
{4294967040,4294967295}}; //{&amp;quot;255.255.255.0&amp;quot;,&amp;quot;255.255.255.255&amp;quot;}
&lt;/code>&lt;/pre></description></item><item><title>通过新浪接口抓取ip库</title><link>https://blog.xenori.com/2012/01/crawl-sina-ip-data/</link><pubDate>Mon, 09 Jan 2012 07:23:24 +0000</pubDate><guid>https://blog.xenori.com/2012/01/crawl-sina-ip-data/</guid><description>&lt;p>新浪有开放ip查询的接口（&lt;a class="link" href="http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;amp;ip=123.124.2.85" target="_blank" rel="noopener"
>http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;amp;ip=123.124.2.85&lt;/a>），通过不断查询就能抓取到ip信息。不过要遍历所有的ip地址不现实，数据存储和查询都是问题，一般我们面对的是中国的用户，只需要遍历抓取下中国范围的ip信息就行，而且ip地址最后一位的256个ip一般分配到同一地区，所以最后一位只需遍历.0的ip就可以了。
目前ip4地址已经分配完，中国的ip段可以在以下网址找到：
&lt;a class="link" href="https://www.countryipblocks.net/e_country_data/CN_range.txt" target="_blank" rel="noopener"
>https://www.countryipblocks.net/e_country_data/CN_range.txt&lt;/a>
首先需要处理，把上面的ip段转换为具体的ip地址：&lt;/p>
&lt;p>private static List&lt;!-- raw HTML omitted --> HandleIpRange()
{
var list = new List&lt;!-- raw HTML omitted -->();
var lines = File.ReadAllLines(&amp;ldquo;CN_range.txt&amp;rdquo;);
var pattern = @&amp;quot;(\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})\s-\s(\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})&amp;quot;;
foreach (var line in lines)
{
var match = Regex.Match(line, pattern, RegexOptions.IgnoreCase);
if (match.Success)
{
var begin = match.Groups[1].Value;
var end = match.Groups[2].Value;&lt;/p>
&lt;pre>&lt;code> var beginInt = Ip3ToInt(begin);
var endInt = Ip3ToInt(end);
while (beginInt &amp;lt;= endInt)
{
list.Add(IntToIp3(beginInt));
beginInt += 1;
}
}
}
return list;
}
private static int Ip3ToInt(string ip4)
{
var arr = ip4.Split('.');
var p0 = int.Parse(arr[0]);
var p1 = int.Parse(arr[1]);
var p2 = int.Parse(arr[2]);
return (p0 &amp;lt;&amp;lt; 16) | (p1 &amp;lt;&amp;lt; 8) | p2;
}
private static string IntToIp3(int s)
{
var p0 = s &amp;gt;&amp;gt; 16 &amp;amp; 0xFF;
var p1 = s &amp;gt;&amp;gt; 8 &amp;amp; 0xFF;
var p2 = s &amp;amp; 0xFF;
return string.Format(&amp;quot;{0}.{1}.{2}.0&amp;quot;, p0, p1, p2);
}
&lt;/code>&lt;/pre>
&lt;p>剩下只需用多线程请求新浪接口，把结果保存到数据库就可以了。&lt;/p>
&lt;p>&lt;strong>数据修正：&lt;/strong>
从新浪接口查询回来的数据，有一部分国家和省市都是空的，还有一部分国家是美国等，这部分数据需要修正下。数据修正可以查询ip138网站，它的数据来源是APNIC，比较新，请求地址如下（&lt;a class="link" href="http://www.ip138.com/ips8.asp?action=2&amp;amp;ip=223.72.166.0" target="_blank" rel="noopener"
>http://www.ip138.com/ips8.asp?action=2&amp;amp;ip=223.72.166.0&lt;/a>）。把请求回来的内容用正则解析并update到数据库就可以了。&lt;/p>
&lt;p>&lt;strong>进一步减少数据大小：&lt;/strong>
新浪接口返回的内容都会带有start和end的ip段，表示ip段中的ip都是属于同一地区。可以把start和end的ip转换为int值，再把int表示的ip段和地区信息保存到另一张表中。查询用户ip所属时，只需把用户ip也转换为int值，再找出int值所在的ip段对应的地区就可以了。&lt;/p></description></item><item><title>开源线程池组件SmartThreadPool</title><link>https://blog.xenori.com/2012/01/smartthreadpool/</link><pubDate>Mon, 09 Jan 2012 07:11:38 +0000</pubDate><guid>https://blog.xenori.com/2012/01/smartthreadpool/</guid><description>&lt;p>1、为什么需要使用线程池(Thread Pool）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>**减少线程间上下文切换。**线程执行一定的时间片后，系统会自动把cpu切换给另一个线程使用，这时还需要保存当前的线程上下文状态，并加载新线程的上下文状态。当程序中有大量的线程时，每个线程分得的时间片会越来越少，可能会出现线程未处理多少操作，就需要切换到另一线程，这样频繁的线程间上下文切换会花费大量的cpu时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**减少内存占用。**系统每创建一条物理线程，需要大概花费1MB的内存空间，许多程序喜欢先创建多条物理线程，并周期轮询来处理各自的任务，这样既消耗了线程上下文切换的时间，还浪费了内存。这些任务可能只需要一条线程就能满足要求。假如某一任务需要执行较长的周期，线程池还可以自动增加线程，并在空闲时，销毁线程，释放占用的内存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>2、为什么不使用.Net默认的线程池&lt;/p>
&lt;ul>
&lt;li>.Net默认的线程池(ThreadPool)是一个静态类，所以是没办法自己创建一个新的程序池的。默认的线程池与应用程序域(AppDomain)挂钩，一个AppDomain只有一个线程池。假如在线程池中执行了一个周期较长的任务，一直占用着其中一个线程，可能就会影响到应用程序域中的其他程序的性能。例如，假如在Asp.Net的线程池中执行一个周期较长的任务，就会影响请求的并发处理能力（线程池默认有个最大线程数）。
3、SmartThreadPool特性和优点&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>SmartThreadPool&lt;/a>特性如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>池中的线程数量会根据负载自动增减&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>任务异步执行后可以返回值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处于任务队列中未执行的任务可以取消&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>回调函数可以等待多个任务都执行完成后再触发&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以有优先级(priority)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务可以分组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持泛型Action&lt;!-- raw HTML omitted --> 和 Func&lt;!-- raw HTML omitted -->&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>有性能监测机制&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>4、使用示例
最简单的使用方法：&lt;/p>
&lt;pre>&lt;code> // 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
smartThreadPool.QueueWorkItem(() =&amp;gt;
{
Console.WriteLine(&amp;quot;Hello World!&amp;quot;);
});
&lt;/code>&lt;/pre>
&lt;p>带返回值的任务：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
var sum = 0;
for (var i = 0; i &amp;lt; 10; i++)
sum += i;
return sum;
});
// 输出计算结果
Console.WriteLine(result.Result);
&lt;/code>&lt;/pre>
&lt;p>等待多个任务执行完成：&lt;/p>
&lt;pre>&lt;code>// 创建一个线程池
SmartThreadPool smartThreadPool = new SmartThreadPool();
// 执行任务
var result1 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(5000);
return 3;
});
var result2 = smartThreadPool.QueueWorkItem(() =&amp;gt;
{
//模拟计算较长时间
Thread.Sleep(3000);
return 5;
});
bool success = SmartThreadPool.WaitAll(
new IWorkItemResult[] { result1, result2 });
if (success)
{
// 输出结果
Console.WriteLine(result1.Result);
Console.WriteLine(result2.Result);
}
&lt;/code>&lt;/pre>
&lt;p>5、结论
使用SmartThreadPool可以简单就实现支持多线程的程序，由线程池来管理线程，可以减少死锁的出现。SmartThreadPool还支持简单的生产者-消费者模式，当不需要对任务进行持久化时，还是很好用的。&lt;/p>
&lt;p>6、扩展阅读&lt;/p>
&lt;p>&lt;a class="link" href="http://www.codeproject.com/KB/threads/smartthreadpool.aspx" target="_blank" rel="noopener"
>http://www.codeproject.com/KB/threads/smartthreadpool.aspx&lt;/a>
&lt;a class="link" href="http://smartthreadpool.codeplex.com/" target="_blank" rel="noopener"
>http://smartthreadpool.codeplex.com/&lt;/a>
&lt;a class="link" href="http://www.albahari.com/threading/" target="_blank" rel="noopener"
>http://www.albahari.com/threading/&lt;/a>&lt;/p></description></item><item><title>小巧方便的ORM类库——PetaPoco</title><link>https://blog.xenori.com/2012/01/petapoco/</link><pubDate>Mon, 09 Jan 2012 05:11:52 +0000</pubDate><guid>https://blog.xenori.com/2012/01/petapoco/</guid><description>&lt;p>&lt;a class="link" href="http://www.toptensoftware.com/petapoco/" target="_blank" rel="noopener"
>PetaPoco&lt;/a>是一个简单轻巧的orm开源类库，全部功能只有一个文件，可以很方便集成到项目中。代替SqlHelper辅助类的不二选择。。。&lt;/p>
&lt;pre>&lt;code>主要功能包括：
- 映射实体类，支持enum，Nullable等类型，可同时映射多个实例。
- 支持分页
- 以@0等占位符代替SqlParameter，传参更方便
- 带有sql字符串构造器，构造条件查询sql非常方便
- update支持指定字段更新
- 支持T4模板
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>使用示例：&lt;/strong>
使用前需要先new一个数据库实例：&lt;/p>
&lt;pre>&lt;code>var db = new PetaPoco.Database(&amp;quot;ConnectionName&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>&lt;!-- raw HTML omitted -->可以放心地把db实例设为static，因为实例中没有SqlConnection的引用，连接每次执行完后，会自动关闭。&lt;!-- raw HTML omitted -->
发现有人反映在web上使用static的db实例还是会有问题，具体可看链接(&lt;a class="link" href="https://github.com/toptensoftware/PetaPoco/issues/103" target="_blank" rel="noopener"
>Link1&lt;/a>)，StackOverflow中推荐web中每个请求使用一个单独的db实例(&lt;a class="link" href="http://stackoverflow.com/questions/7052350/how-to-create-a-dal-using-petapoco/9995413#9995413" target="_blank" rel="noopener"
>Link2&lt;/a>).
1、取一条记录&lt;/p>
&lt;pre>&lt;code>var a = db.SingleOrDefault&amp;lt;article&amp;gt;(&amp;quot;SELECT * FROM articles WHERE article_id=@0&amp;quot;, 123));&amp;lt;/article&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>2、分页&lt;/p>
&lt;pre>&lt;code>// 分页实质在内部是用Row_Number()重写了sql，支持join
var result=db.Page&amp;lt;article&amp;gt;(1, 20, &amp;quot;SELECT * FROM articles WHERE category=@0 ORDER BY date_created DESC&amp;quot;, &amp;quot;coolstuff&amp;quot;);&amp;lt;/article&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>上面的分页sql，会被改写为sql：&lt;/p>
&lt;pre>&lt;code>SELECT * FROM (
SELECT ROW_NUMBER() OVER (ORDER BY date_created DESC) peta_rn, * FROM articles WHERE category=@0 ) peta_paged
WHERE peta_rn&amp;gt;@1 AND peta_rn
&lt;/code>&lt;/pre>
&lt;p>3、部分更新&lt;/p>
&lt;pre>&lt;code>db.Update(&amp;quot;articles&amp;quot;, &amp;quot;article_id&amp;quot;, new { title=&amp;quot;New title&amp;quot; }, 123);
&lt;/code>&lt;/pre>
&lt;p>4、sql条件构造&lt;/p>
&lt;pre>&lt;code>var sql = PetaPoco.Sql.Builder
.Append(&amp;quot;SELECT * FROM articles&amp;quot;)
.Append(&amp;quot;WHERE article_id=@0&amp;quot;, id)
.Append(&amp;quot;WHERE date_created&amp;gt;=@0&amp;quot;, start_date.Value)
.Append(&amp;quot;WHERE date_created
&lt;/code>&lt;/pre>
&lt;p>5、直接执行sql&lt;/p>
&lt;pre>&lt;code>db.Execute(&amp;quot;DELETE FROM articles WHERE draft&amp;lt;&amp;gt;0&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>6、调用存储过程&lt;/p>
&lt;pre>&lt;code>//调用存储过程
db.Execute(&amp;quot;exec procSomeHandler @0, @1&amp;quot;, 3, &amp;quot;2011-10-01&amp;quot;);
//调用带输出(OUTPUT)参数的存储过程, 写的sql语句，@0参数后的“output”是关键
var param = new SqlParameter() { Direction = ParameterDirection.Output, SqlDbType = SqlDbType.Int };
db.Execute(&amp;quot;exec procSomeHandler @0 OUTPUT&amp;quot;, param);
&lt;/code>&lt;/pre>
&lt;p>7、代替返回值DataTable
有时，我们并不想每条执行的sql都需要创建对应的实体类，这样会导致项目中存在过多的实体类，有方法能做到DataTable这样灵活就最好了。在.net4.0中，PetaPoco可以返回dynamic类型，可以很好地解决这个问题，而在.net3.5中就没办法，不过可以通过修改PetaPoco代码，实现使用Dictionary类型来代替dynamic动态类型的功能。改动代码如下：&lt;a class="link" href="https://github.com/bitxeno/PetaPoco/commit/e07746c06977f09ef8e7a0f81b718e520b4513ed" target="_blank" rel="noopener"
>https://github.com/bitxeno/PetaPoco/commit/e07746c06977f09ef8e7a0f81b718e520b4513ed&lt;/a>&lt;/p>
&lt;pre>&lt;code>var list = db.Fetch&amp;gt;(&amp;quot;select article_id,date_created from articles&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>使用petapoco时有点需要注意，就是当数据库字段数据类型是varchar等非unicode字符类型时，petapoco传参需要把string转换为AnsiString类型，否则会有性能问题。&lt;/p>
&lt;pre>&lt;code>Ansi String Support
DBA guru Rob Sullivan yesterday pointed out that SQL Server has pretty severe performance overhead if you try to query an index with varchar column using a unicode string parameter. To fix this the parameter needs to be bound as DbType.AnsiString. To facilitate this you can now wrap such string parameters in a new AnsiString class:
var a = db.SingleOrDefault&amp;lt;article&amp;gt;(&amp;quot;WHERE title=@0&amp;quot;, new PetaPoco.AnsiString(&amp;quot;blah&amp;quot;));&amp;lt;/article&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>参考资料：
&lt;a class="link" href="http://code.google.com/p/dapper-dot-net/" target="_blank" rel="noopener"
>http://code.google.com/p/dapper-dot-net/&lt;/a>
&lt;a class="link" href="http://www.toptensoftware.com/petapoco/" target="_blank" rel="noopener"
>http://www.toptensoftware.com/petapoco/&lt;/a>&lt;/p></description></item><item><title>门户网站的ip查询接口</title><link>https://blog.xenori.com/2011/12/ip-lookup/</link><pubDate>Sun, 25 Dec 2011 06:09:12 +0000</pubDate><guid>https://blog.xenori.com/2011/12/ip-lookup/</guid><description>&lt;p>腾讯：&lt;a class="link" href="http://ip.qq.com/cgi-bin/searchip?searchip1=121.236.225.37" target="_blank" rel="noopener"
>http://ip.qq.com/cgi-bin/searchip?searchip1=121.236.225.37&lt;/a>
现在只能通过解析页面内容到取得&lt;/p>
&lt;p>新浪：&lt;a class="link" href="http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;amp;ip=123.124.2.85" target="_blank" rel="noopener"
>http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=json&amp;amp;ip=123.124.2.85&lt;/a>&lt;/p>
&lt;p>网易： &lt;a class="link" href="http://www.youdao.com/smartresult-xml/search.s?type=ip&amp;amp;q=123.124.2.85" target="_blank" rel="noopener"
>http://www.youdao.com/smartresult-xml/search.s?type=ip&amp;amp;q=123.124.2.85&lt;/a>&lt;/p>
&lt;p>ip地址在各个国家的分配情况表：
&lt;a class="link" href="http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest" target="_blank" rel="noopener"
>http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&lt;/a>
&lt;a class="link" href="http://www.countryipblocks.net/country-blocks/ip-range-format/" target="_blank" rel="noopener"
>http://www.countryipblocks.net/country-blocks/ip-range-format/&lt;/a>&lt;/p></description></item><item><title>GoAgent翻了个墙</title><link>https://blog.xenori.com/2011/12/open-the-doo/</link><pubDate>Sat, 10 Dec 2011 09:19:25 +0000</pubDate><guid>https://blog.xenori.com/2011/12/open-the-doo/</guid><description>&lt;p>GoAgent是个很强的Appspot代理程序，看youtube毫无压力=w=，chrome+SwitchySharp也很好用，下面是个简单的部署步骤：
1、到http://code.google.com/p/goagent/下载最新版的GoAgent
2、首选dns要设为8.8.8.8
3、到http://code.google.com/p/smarthosts/下载最新程序更新下hosts
4、按GoAgent部署教程上传程序到Appspot
5、把SwitchSharp的代理设为127.0.0.1:8087，并把在代规则指向：http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q178g3ouj20ol03g0t4.jpg"
loading="lazy"
alt="switchsharp rule setting"
>
6、have fun!&lt;/p>
&lt;p>更详细教程：
&lt;a class="link" href="http://maolihui.com/goagent-detailed-version-of-the-tutorial.html" target="_blank" rel="noopener"
>http://maolihui.com/goagent-detailed-version-of-the-tutorial.html&lt;/a>&lt;/p></description></item><item><title>Lucene实践</title><link>https://blog.xenori.com/2011/12/lucene-knowledge/</link><pubDate>Wed, 07 Dec 2011 15:51:09 +0000</pubDate><guid>https://blog.xenori.com/2011/12/lucene-knowledge/</guid><description>&lt;p>这是内部技术分享的ppt&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>xp3中运行s60 v3模拟器，出现闪退问题的解决方法</title><link>https://blog.xenori.com/2011/11/s60emulator-run-terminate/</link><pubDate>Mon, 28 Nov 2011 14:02:21 +0000</pubDate><guid>https://blog.xenori.com/2011/11/s60emulator-run-terminate/</guid><description>&lt;p>在我的xp3上安装S60_3rd_FP2_SDK_v1.1版本模块器，在运行时会出现闪退的问题（在xp2上好像没这问题)，解决方法如下：&lt;/p>
&lt;p>进入“我的电脑-》属性-》高级-》性能（设置）-》数据执行保护”，把epoc.exe程序加入例外中就可以了：
&lt;img src="http://ww4.sinaimg.cn/large/7ce4a9f6gw1e5q0qq4u7hj20el0fuabm.jpg"
loading="lazy"
alt="nokia s60 v3 fp1"
>&lt;/p>
&lt;p>假如你想查看nokia模拟器运行日志，可以在运行中打开“%temp%”当前用户临时文件夹，再搜索“epocwind.out”就是了&lt;/p></description></item><item><title>项目</title><link>https://blog.xenori.com/%E9%A1%B9%E7%9B%AE/</link><pubDate>Fri, 24 Dec 2010 00:20:08 +0800</pubDate><guid>https://blog.xenori.com/%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h1 id="施工中">施工中。。。&lt;/h1></description></item></channel></rss>